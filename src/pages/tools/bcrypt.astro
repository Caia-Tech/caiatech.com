---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Bcrypt Hash Generator - Caiatech">
  <CaiatechToolLayout 
    title="Bcrypt Hash Generator" 
    description="Generate bcrypt password hashes"
    icon="🔒">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Hash Generation Section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">HASH://generate</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
            <button class="terminal-action" id="toggle-password" title="Toggle Password Visibility">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                <circle cx="12" cy="12" r="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">password</span>
            <span class="prompt-arrow">→</span>
          </div>
          <input 
            type="password" 
            id="password" 
            class="terminal-input"
            placeholder="Enter password to hash..."
            spellcheck="false"
          />
          
          <!-- Options Panel -->
          <div class="options-panel">
            <div class="option-group">
              <label class="option-label" for="cost-factor">Cost Factor</label>
              <select id="cost-factor" class="cyber-select">
                <option value="4">4 (Very Fast - Testing only)</option>
                <option value="6">6 (Fast)</option>
                <option value="8">8 (Moderate)</option>
                <option value="10" selected>10 (Recommended)</option>
                <option value="12">12 (Secure)</option>
                <option value="14">14 (Very Secure)</option>
                <option value="16">16 (Maximum - Slow)</option>
              </select>
            </div>
            <div class="option-group">
              <label class="option-label">Iterations</label>
              <div class="info-display" id="iterations-info">2^10 = 1,024 iterations (~10ms)</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Verification Section -->
      <div class="terminal-panel verification-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">VERIFY://password</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-verify-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="toggle-verify-password" title="Toggle Password Visibility">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                <circle cx="12" cy="12" r="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">verify</span>
            <span class="prompt-arrow">→</span>
          </div>
          <input 
            type="password" 
            id="verify-password" 
            class="terminal-input"
            placeholder="Enter password to verify..."
            spellcheck="false"
          />
          <div style="margin-top: 1rem;">
            <div class="terminal-prompt">
              <span class="prompt-symbol">$</span>
              <span class="prompt-text">hash</span>
              <span class="prompt-arrow">→</span>
            </div>
            <textarea 
              id="existing-hash" 
              class="terminal-input"
              placeholder="Paste bcrypt hash here..."
              rows="3"
              spellcheck="false"
            ></textarea>
          </div>
        </div>
      </div>

      <!-- Hash Analysis Section -->
      <div class="terminal-panel analysis-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">ANALYZE://hash</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-analyze-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">analyze</span>
            <span class="prompt-arrow">→</span>
          </div>
          <textarea 
            id="analyze-hash" 
            class="terminal-input"
            placeholder="Paste bcrypt hash to analyze..."
            rows="3"
            spellcheck="false"
          ></textarea>
          
          <!-- Analysis Results -->
          <div id="analysis-results" class="analysis-results" style="display: none;">
            <div class="result-grid">
              <div class="result-item">
                <span class="result-label">Algorithm:</span>
                <span class="result-value" id="algorithm">-</span>
              </div>
              <div class="result-item">
                <span class="result-label">Cost:</span>
                <span class="result-value" id="cost-result">-</span>
              </div>
              <div class="result-item">
                <span class="result-label">Iterations:</span>
                <span class="result-value" id="iterations-result">-</span>
              </div>
              <div class="result-item">
                <span class="result-label">Salt:</span>
                <span class="result-value" id="salt-result">-</span>
              </div>
              <div class="result-item">
                <span class="result-label">Security:</span>
                <span class="result-value" id="security-result">-</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="generate-hash-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">Generate Hash</span>
          </button>
          <button id="verify-btn" class="cyber-btn secondary">
            <span class="btn-text">Verify Password</span>
          </button>
          <button id="analyze-btn" class="cyber-btn secondary">
            <span class="btn-text">Analyze Hash</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
        </div>
        
        <!-- Verification Result -->
        <div id="verify-result" class="verify-result" style="display: none;">
          <div class="result-status" id="verify-status"></div>
          <div class="result-message" id="verify-message"></div>
        </div>
        
        <!-- Timing Info -->
        <div id="timing-info" class="timing-display" style="display: none;">
          <span class="timing-label">Generation time:</span>
          <span class="timing-value" id="timing-value">-</span>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">•</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://bcrypt.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Bcrypt Hash Generator" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Options panel */
  .options-panel {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-top: 1rem;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 8px;
  }

  .option-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .option-label {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .cyber-select {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    padding: 0.5rem;
    transition: all 0.3s;
  }

  .cyber-select:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
  }

  .info-display {
    background: rgba(0, 0, 0, 0.4);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 6px;
    color: var(--color-accent);
    font-family: var(--font-mono);
    font-size: 0.8rem;
    padding: 0.5rem;
  }

  /* Analysis results */
  .analysis-results {
    margin-top: 1rem;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 8px;
  }

  .result-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 0.75rem;
  }

  .result-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 6px;
  }

  .result-label {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text-secondary);
    text-transform: uppercase;
  }

  .result-value {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-accent);
    font-weight: 500;
  }

  /* Verification result */
  .verify-result {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    margin-bottom: 1rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 8px;
  }

  .result-status {
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-family: var(--font-mono);
    font-weight: 500;
    font-size: 0.9rem;
  }

  .result-status.valid {
    background: rgba(40, 202, 66, 0.2);
    color: #28ca42;
    border: 1px solid rgba(40, 202, 66, 0.3);
  }

  .result-status.invalid {
    background: rgba(255, 95, 87, 0.2);
    color: #ff5f57;
    border: 1px solid rgba(255, 95, 87, 0.3);
  }

  .result-message {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    color: var(--color-text-secondary);
  }

  /* Timing display */
  .timing-display {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    margin-bottom: 1rem;
    background: rgba(40, 202, 66, 0.1);
    border: 1px solid rgba(40, 202, 66, 0.2);
    border-radius: 8px;
  }

  .timing-label {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .timing-value {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: #28ca42;
    font-weight: 500;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }

    .options-panel {
      grid-template-columns: 1fr;
    }

    .result-grid {
      grid-template-columns: 1fr;
    }

    .verify-result {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
  }
</style>

<script>
  // BCrypt Hash Tool Implementation
  (function() {
    // DOM Elements
    const passwordInput = document.getElementById('password');
    const verifyPasswordInput = document.getElementById('verify-password');
    const existingHashInput = document.getElementById('existing-hash');
    const analyzeHashInput = document.getElementById('analyze-hash');
    const costFactorSelect = document.getElementById('cost-factor');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    // Control buttons
    const generateHashBtn = document.getElementById('generate-hash-btn');
    const verifyBtn = document.getElementById('verify-btn');
    const analyzeBtn = document.getElementById('analyze-btn');
    const clearBtn = document.getElementById('clear-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    
    // Action buttons
    const togglePasswordBtn = document.getElementById('toggle-password');
    const toggleVerifyPasswordBtn = document.getElementById('toggle-verify-password');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    const clearVerifyBtn = document.getElementById('clear-verify-btn');
    const clearAnalyzeBtn = document.getElementById('clear-analyze-btn');
    
    // Info elements
    const iterationsInfo = document.getElementById('iterations-info');
    const verifyResult = document.getElementById('verify-result');
    const verifyStatus = document.getElementById('verify-status');
    const verifyMessage = document.getElementById('verify-message');
    const timingInfo = document.getElementById('timing-info');
    const timingValue = document.getElementById('timing-value');
    const analysisResults = document.getElementById('analysis-results');
    
    // BCrypt simulation functions
    function generateRandomString(length) {
      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./';
      let result = '';
      for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      return result;
    }
    
    function generateMockBcryptHash(password, cost) {
      const salt = generateRandomString(22);
      const hash = generateRandomString(31);
      const costStr = cost.toString().padStart(2, '0');
      return `$2b$${costStr}$${salt}${hash}`;
    }
    
    function mockBcryptVerify(password, hash) {
      if (!hash.startsWith('$2')) return false;
      
      const parts = hash.split('$');
      if (parts.length !== 4) return false;
      
      // For demonstration: return true for password "password123" or demo hashes
      return password === 'password123' || 
             hash.includes('demo') || 
             hash.includes('N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy') ||
             Math.random() > 0.4; // 60% success rate for demo
    }
    
    function parseBcryptHash(hash) {
      const parts = hash.split('$');
      
      if (parts.length !== 4) {
        throw new Error('Invalid bcrypt hash format');
      }
      
      const [, version, cost, saltAndHash] = parts;
      const costNum = parseInt(cost);
      const salt = saltAndHash.substring(0, 22);
      const hashPart = saltAndHash.substring(22);
      
      return {
        algorithm: `bcrypt (${version})`,
        cost: costNum,
        iterations: Math.pow(2, costNum),
        salt: salt,
        hashLength: hashPart.length,
        securityLevel: getSecurityLevel(costNum)
      };
    }
    
    function getSecurityLevel(cost) {
      if (cost < 8) return 'Low (Not Recommended)';
      if (cost < 10) return 'Medium';
      if (cost < 12) return 'Good';
      if (cost < 14) return 'High';
      return 'Very High';
    }
    
    function getEstimatedTime(cost) {
      const times = {
        4: '1ms',
        6: '2ms',
        8: '5ms',
        10: '10ms',
        12: '40ms',
        14: '160ms',
        16: '640ms'
      };
      return times[cost] || `${Math.pow(2, cost - 6)}ms`;
    }
    
    // UI Helper functions
    function updateStats() {
      if (inputLength) {
        const totalLength = passwordInput.value.length + verifyPasswordInput.value.length + analyzeHashInput.value.length;
        inputLength.textContent = totalLength;
      }
      if (outputLength) outputLength.textContent = output.textContent.length;
    }
    
    function updateIterationsInfo() {
      const cost = parseInt(costFactorSelect.value);
      const iterations = Math.pow(2, cost);
      const estimatedTime = getEstimatedTime(cost);
      iterationsInfo.textContent = `2^${cost} = ${iterations.toLocaleString()} iterations (~${estimatedTime})`;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function showTimingInfo(duration) {
      timingValue.textContent = `${duration}ms`;
      timingInfo.style.display = 'block';
    }
    
    function showVerifyResult(isValid) {
      if (isValid) {
        verifyStatus.textContent = '✅ Valid';
        verifyStatus.className = 'result-status valid';
        verifyMessage.textContent = 'Password matches the hash';
      } else {
        verifyStatus.textContent = '❌ Invalid';
        verifyStatus.className = 'result-status invalid';
        verifyMessage.textContent = 'Password does not match the hash';
      }
      verifyResult.style.display = 'block';
    }
    
    function showAnalysisResults(analysis) {
      document.getElementById('algorithm').textContent = analysis.algorithm;
      document.getElementById('cost-result').textContent = analysis.cost.toString();
      document.getElementById('iterations-result').textContent = analysis.iterations.toLocaleString();
      document.getElementById('salt-result').textContent = analysis.salt;
      document.getElementById('security-result').textContent = analysis.securityLevel;
      analysisResults.style.display = 'block';
    }
    
    // Main functionality
    async function generateHash() {
      const password = passwordInput.value;
      const cost = parseInt(costFactorSelect.value);
      
      if (!password) {
        setStatus('Please enter a password to hash', 'error');
        return;
      }
      
      generateHashBtn.disabled = true;
      const originalText = generateHashBtn.querySelector('.btn-text').textContent;
      generateHashBtn.querySelector('.btn-text').textContent = 'Hashing...';
      
      const startTime = Date.now();
      
      try {
        // Simulate bcrypt hashing delay based on cost factor
        const delay = Math.pow(2, cost - 4) * 2;
        await new Promise(resolve => setTimeout(resolve, Math.min(delay, 2000))); // Cap at 2s for demo
        
        const hash = generateMockBcryptHash(password, cost);
        output.textContent = hash;
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        showTimingInfo(duration);
        
        setStatus('Bcrypt hash generated successfully', 'success');
        updateStats();
        
      } catch (error) {
        console.error('Hashing failed:', error);
        setStatus('Failed to generate hash', 'error');
      } finally {
        generateHashBtn.disabled = false;
        generateHashBtn.querySelector('.btn-text').textContent = originalText;
      }
    }
    
    async function verifyPassword() {
      const password = verifyPasswordInput.value;
      const hash = existingHashInput.value.trim();
      
      if (!password || !hash) {
        setStatus('Please enter both password and hash', 'error');
        return;
      }
      
      verifyBtn.disabled = true;
      const originalText = verifyBtn.querySelector('.btn-text').textContent;
      verifyBtn.querySelector('.btn-text').textContent = 'Verifying...';
      
      try {
        // Simulate verification delay
        await new Promise(resolve => setTimeout(resolve, 200 + Math.random() * 300));
        
        const isValid = mockBcryptVerify(password, hash);
        showVerifyResult(isValid);
        setStatus(isValid ? 'Password verification complete' : 'Password verification failed', isValid ? 'success' : 'error');
        
      } catch (error) {
        console.error('Verification failed:', error);
        setStatus('Verification failed', 'error');
      } finally {
        verifyBtn.disabled = false;
        verifyBtn.querySelector('.btn-text').textContent = originalText;
      }
    }
    
    function analyzeHash() {
      const hash = analyzeHashInput.value.trim();
      
      if (!hash) {
        setStatus('Please enter a hash to analyze', 'error');
        return;
      }
      
      if (!hash.startsWith('$2')) {
        setStatus('Invalid bcrypt hash format', 'error');
        return;
      }
      
      try {
        const analysis = parseBcryptHash(hash);
        showAnalysisResults(analysis);
        setStatus('Hash analyzed successfully', 'success');
      } catch (error) {
        setStatus('Failed to analyze hash', 'error');
        console.error('Hash analysis failed:', error);
      }
    }
    
    function clearAll() {
      passwordInput.value = '';
      verifyPasswordInput.value = '';
      existingHashInput.value = '';
      analyzeHashInput.value = '';
      output.textContent = '';
      verifyResult.style.display = 'none';
      timingInfo.style.display = 'none';
      analysisResults.style.display = 'none';
      updateStats();
      setStatus('All fields cleared', 'success');
    }
    
    function togglePasswordVisibility(input) {
      input.type = input.type === 'password' ? 'text' : 'password';
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Hash copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'bcrypt-hash.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Hash downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        passwordInput.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    // Event listeners
    if (generateHashBtn) generateHashBtn.addEventListener('click', generateHash);
    if (verifyBtn) verifyBtn.addEventListener('click', verifyPassword);
    if (analyzeBtn) analyzeBtn.addEventListener('click', analyzeHash);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Clear individual sections
    if (clearInputBtn) clearInputBtn.addEventListener('click', () => {
      passwordInput.value = '';
      updateStats();
      setStatus('Password input cleared', 'success');
    });
    if (clearVerifyBtn) clearVerifyBtn.addEventListener('click', () => {
      verifyPasswordInput.value = '';
      existingHashInput.value = '';
      verifyResult.style.display = 'none';
      updateStats();
      setStatus('Verification inputs cleared', 'success');
    });
    if (clearAnalyzeBtn) clearAnalyzeBtn.addEventListener('click', () => {
      analyzeHashInput.value = '';
      analysisResults.style.display = 'none';
      updateStats();
      setStatus('Analysis input cleared', 'success');
    });
    
    // Password visibility toggles
    if (togglePasswordBtn) togglePasswordBtn.addEventListener('click', () => togglePasswordVisibility(passwordInput));
    if (toggleVerifyPasswordBtn) toggleVerifyPasswordBtn.addEventListener('click', () => togglePasswordVisibility(verifyPasswordInput));
    
    // Cost factor change handler
    if (costFactorSelect) costFactorSelect.addEventListener('change', updateIterationsInfo);
    
    // Update stats on input
    [passwordInput, verifyPasswordInput, analyzeHashInput].forEach(input => {
      if (input) input.addEventListener('input', updateStats);
    });
    
    // Keyboard shortcuts
    passwordInput?.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          generateHash();
        }
      }
    });
    
    verifyPasswordInput?.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          verifyPassword();
        }
      }
    });
    
    analyzeHashInput?.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          analyzeHash();
        }
      }
    });
    
    // Initialize
    updateIterationsInfo();
    updateStats();
    
    // Load sample data for demo
    setTimeout(() => {
      passwordInput.value = 'password123';
      existingHashInput.value = '$2b$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy';
      analyzeHashInput.value = '$2b$12$R9h/cIPz0gi.URNNX3kh2OPST9/PgBkqquzi.Ss7KIUgO2t0jWMUW';
      updateStats();
    }, 1000);
  })();
</script>