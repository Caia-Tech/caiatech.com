---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Binary Converter - Caiatech">
  <CaiatechToolLayout 
    title="Binary Converter" 
    description="Convert between binary, hex, and text"
    icon="01">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="binary-tool">
      <!-- Number System Converter Panel -->
      <div class="terminal-panel converter-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">CONVERTER://number.systems</span>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">convert</span>
            <span class="prompt-arrow">→</span>
          </div>
          
          <div class="input-grid">
            <div class="input-group decimal-group">
              <label for="decimal-input">
                <span class="base-label">Decimal (Base 10)</span>
                <span class="format-hint">0-9</span>
              </label>
              <div class="input-wrapper">
                <input 
                  type="text" 
                  id="decimal-input" 
                  class="base-input"
                  placeholder="Enter decimal number..."
                  pattern="[0-9]+"
                  autocomplete="off">
                <button class="clear-btn" data-input="decimal-input">×</button>
              </div>
            </div>

            <div class="input-group binary-group">
              <label for="binary-input">
                <span class="base-label">Binary (Base 2)</span>
                <span class="format-hint">0-1</span>
              </label>
              <div class="input-wrapper">
                <input 
                  type="text" 
                  id="binary-input" 
                  class="base-input"
                  placeholder="Enter binary number..."
                  pattern="[01]+"
                  autocomplete="off">
                <button class="clear-btn" data-input="binary-input">×</button>
              </div>
            </div>

            <div class="input-group hex-group">
              <label for="hex-input">
                <span class="base-label">Hexadecimal (Base 16)</span>
                <span class="format-hint">0-9, A-F</span>
              </label>
              <div class="input-wrapper">
                <input 
                  type="text" 
                  id="hex-input" 
                  class="base-input"
                  placeholder="Enter hex number..."
                  pattern="[0-9A-Fa-f]+"
                  autocomplete="off">
                <button class="clear-btn" data-input="hex-input">×</button>
              </div>
            </div>

            <div class="input-group octal-group">
              <label for="octal-input">
                <span class="base-label">Octal (Base 8)</span>
                <span class="format-hint">0-7</span>
              </label>
              <div class="input-wrapper">
                <input 
                  type="text" 
                  id="octal-input" 
                  class="base-input"
                  placeholder="Enter octal number..."
                  pattern="[0-7]+"
                  autocomplete="off">
                <button class="clear-btn" data-input="octal-input">×</button>
              </div>
            </div>
          </div>

          <div class="conversion-info">
            <div class="info-item">
              <span class="info-label">Bits:</span>
              <span id="bit-count" class="info-value">0</span>
            </div>
            <div class="info-item">
              <span class="info-label">Bytes:</span>
              <span id="byte-count" class="info-value">0</span>
            </div>
            <div class="info-item">
              <span class="info-label">Max Value (n-bit):</span>
              <span id="max-value" class="info-value">-</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Binary Visualization Panel -->
      <div class="terminal-panel visualization-panel" id="binary-viz" style="display: none;">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">VISUAL://binary.bits</span>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">bits</span>
          </div>
          <div class="bit-display" id="bit-display"></div>
          <div class="byte-groups" id="byte-groups"></div>
        </div>
      </div>

      <!-- Bitwise Operations Panel -->
      <div class="terminal-panel bitwise-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">BITWISE://operations</span>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">bitwise</span>
            <span class="prompt-arrow">→</span>
          </div>
          
          <div class="operation-inputs">
            <div class="operand-group">
              <label for="operand-a">Operand A (Decimal)</label>
              <input 
                type="number" 
                id="operand-a" 
                class="operand-input"
                placeholder="Enter first number..."
                min="0">
            </div>
            
            <div class="operator-select">
              <label for="operator">Operation</label>
              <select id="operator" class="operator-dropdown">
                <option value="and">AND (&)</option>
                <option value="or">OR (|)</option>
                <option value="xor">XOR (^)</option>
                <option value="not">NOT (~)</option>
                <option value="lshift">Left Shift (<<)</option>
                <option value="rshift">Right Shift (>>)</option>
              </select>
            </div>
            
            <div class="operand-group" id="operand-b-group">
              <label for="operand-b">Operand B / Shift Amount</label>
              <input 
                type="number" 
                id="operand-b" 
                class="operand-input"
                placeholder="Enter second number..."
                min="0">
            </div>
          </div>

          <button id="calculate-btn" class="cyber-btn primary full-width">
            <span class="btn-glow"></span>
            <span class="btn-text">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="5" y1="9" x2="19" y2="9"/>
                <line x1="5" y1="15" x2="19" y2="15"/>
              </svg>
              Calculate
            </span>
          </button>

          <div class="operation-result" id="operation-result" style="display: none;">
            <h4>Result</h4>
            <div class="result-grid">
              <div class="result-item">
                <span class="result-label">Decimal:</span>
                <span id="result-decimal" class="result-value">-</span>
              </div>
              <div class="result-item">
                <span class="result-label">Binary:</span>
                <span id="result-binary" class="result-value">-</span>
              </div>
              <div class="result-item">
                <span class="result-label">Hex:</span>
                <span id="result-hex" class="result-value">-</span>
              </div>
            </div>
            
            <div class="operation-steps" id="operation-steps">
              <h5>Operation Breakdown</h5>
              <div id="steps-content"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Binary Converter" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .binary-tool {
    display: grid;
    gap: 1.5rem;
  }

  .input-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .input-group {
    position: relative;
  }

  .input-group label {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .base-label {
    font-weight: 600;
  }

  .format-hint {
    font-size: 0.75rem;
    opacity: 0.6;
    font-weight: normal;
  }

  .input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .base-input {
    width: 100%;
    padding: 0.75rem;
    padding-right: 2.5rem;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    transition: all 0.3s;
  }

  .base-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
  }

  .decimal-group .base-input:focus { border-color: #28ca42; box-shadow: 0 0 10px rgba(40, 202, 66, 0.3); }
  .binary-group .base-input:focus { border-color: var(--color-accent); box-shadow: 0 0 10px rgba(0, 212, 255, 0.3); }
  .hex-group .base-input:focus { border-color: #ffbd2e; box-shadow: 0 0 10px rgba(255, 189, 46, 0.3); }
  .octal-group .base-input:focus { border-color: #ff5f57; box-shadow: 0 0 10px rgba(255, 95, 87, 0.3); }

  .clear-btn {
    position: absolute;
    right: 0.5rem;
    width: 28px;
    height: 28px;
    border: none;
    background: rgba(0, 212, 255, 0.1);
    color: var(--color-accent);
    border-radius: 50%;
    cursor: pointer;
    font-size: 1.1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    opacity: 0;
  }

  .input-wrapper:hover .clear-btn {
    opacity: 1;
  }

  .clear-btn:hover {
    background: rgba(0, 212, 255, 0.2);
    transform: scale(1.1);
  }

  .conversion-info {
    display: flex;
    gap: 2rem;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 8px;
    margin-top: 1rem;
  }

  .info-item {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .info-label {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .info-value {
    color: var(--color-accent);
    font-family: var(--font-mono);
    font-weight: 600;
  }

  .bit-display {
    display: flex;
    gap: 0.25rem;
    flex-wrap: wrap;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 8px;
  }

  .bit {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid rgba(0, 212, 255, 0.3);
    border-radius: 4px;
    font-family: var(--font-mono);
    font-weight: bold;
    transition: all 0.3s;
  }

  .bit.zero {
    background: rgba(0, 0, 0, 0.3);
    color: var(--color-text-secondary);
    border-color: rgba(255, 255, 255, 0.1);
  }

  .bit.one {
    background: linear-gradient(135deg, var(--color-accent) 0%, rgba(0, 212, 255, 0.8) 100%);
    color: var(--color-bg);
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
  }

  .bit.separator {
    width: 2px;
    background: rgba(0, 212, 255, 0.3);
    margin: 0 4px;
    border: none;
  }

  .byte-groups {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
  }

  .byte-group {
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    padding: 1rem;
    text-align: center;
  }

  .byte-label {
    font-family: var(--font-mono);
    font-size: 0.75rem;
    color: var(--color-text-secondary);
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .byte-value {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    color: var(--color-text);
    font-weight: bold;
  }

  .operation-inputs {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    gap: 1rem;
    align-items: end;
    margin-bottom: 1.5rem;
  }

  .operand-group,
  .operator-select {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .operand-group label,
  .operator-select label {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin: 0;
  }

  .operand-input,
  .operator-dropdown {
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    transition: all 0.3s;
  }

  .operand-input:focus,
  .operator-dropdown:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
  }

  .full-width {
    width: 100%;
  }

  .operation-result {
    margin-top: 1.5rem;
    padding: 1.5rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
  }

  .operation-result h4 {
    margin: 0 0 1rem 0;
    color: var(--color-accent);
    font-family: var(--font-mono);
    font-size: 1rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .result-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .result-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    padding: 1rem;
    background: rgba(0, 212, 255, 0.05);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 6px;
  }

  .result-label {
    font-family: var(--font-mono);
    font-size: 0.75rem;
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .result-value {
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 1.1rem;
    font-weight: 600;
    word-break: break-all;
  }

  .operation-steps {
    border-top: 1px solid rgba(0, 212, 255, 0.2);
    padding-top: 1rem;
  }

  .operation-steps h5 {
    margin: 0 0 1rem 0;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  #steps-content {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    line-height: 1.6;
    color: var(--color-text-secondary);
    background: rgba(0, 0, 0, 0.3);
    padding: 1rem;
    border-radius: 6px;
    white-space: pre-wrap;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .input-grid {
      grid-template-columns: 1fr;
    }

    .operation-inputs {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .conversion-info {
      flex-direction: column;
      gap: 1rem;
    }

    .result-grid {
      grid-template-columns: 1fr;
    }

    .bit-display {
      justify-content: center;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // Binary Converter - JavaScript Implementation
  const decimalInput = document.getElementById('decimal-input');
  const binaryInput = document.getElementById('binary-input');
  const hexInput = document.getElementById('hex-input');
  const octalInput = document.getElementById('octal-input');

  const bitCount = document.getElementById('bit-count');
  const byteCount = document.getElementById('byte-count');
  const maxValue = document.getElementById('max-value');

  const binaryViz = document.getElementById('binary-viz');
  const bitDisplay = document.getElementById('bit-display');
  const byteGroups = document.getElementById('byte-groups');

  const operandA = document.getElementById('operand-a');
  const operandB = document.getElementById('operand-b');
  const operator = document.getElementById('operator');
  const operandBGroup = document.getElementById('operand-b-group');

  const operationResult = document.getElementById('operation-result');
  const resultDecimal = document.getElementById('result-decimal');
  const resultBinary = document.getElementById('result-binary');
  const resultHex = document.getElementById('result-hex');
  const stepsContent = document.getElementById('steps-content');

  let isUpdating = false;

  function updateAllFields(value) {
    if (isUpdating) return;
    isUpdating = true;

    try {
      const bigIntValue = BigInt(value);
      
      // Update all input fields
      decimalInput.value = bigIntValue.toString();
      binaryInput.value = bigIntValue.toString(2);
      hexInput.value = bigIntValue.toString(16).toUpperCase();
      octalInput.value = bigIntValue.toString(8);

      // Update info
      const binaryStr = bigIntValue.toString(2);
      const bits = binaryStr.length;
      const bytes = Math.ceil(bits / 8);
      
      bitCount.textContent = bits.toString();
      byteCount.textContent = bytes.toString();
      
      if (bits > 0 && bits <= 64) { // Limit to reasonable bit size for display
        const maxVal = (BigInt(1) << BigInt(bits)) - BigInt(1);
        maxValue.textContent = `2^${bits} - 1 = ${maxVal}`;
      } else {
        maxValue.textContent = bits > 64 ? 'Too large to display' : '-';
      }

      // Update visualization
      updateVisualization(binaryStr);
    } catch (e) {
      console.error('Error updating fields:', e);
    }

    isUpdating = false;
  }

  function updateVisualization(binaryStr) {
    if (binaryStr.length === 0 || binaryStr.length > 64) {
      binaryViz.style.display = 'none';
      return;
    }

    binaryViz.style.display = 'block';

    // Clear existing visualization
    bitDisplay.innerHTML = '';
    byteGroups.innerHTML = '';

    // Pad to multiple of 8 for byte alignment
    const paddedLength = Math.ceil(binaryStr.length / 8) * 8;
    const paddedBinary = binaryStr.padStart(paddedLength, '0');

    // Create bit display with byte separators
    for (let i = 0; i < paddedBinary.length; i++) {
      if (i > 0 && i % 8 === 0) {
        const separator = document.createElement('div');
        separator.className = 'bit separator';
        bitDisplay.appendChild(separator);
      }

      const bit = document.createElement('div');
      bit.className = `bit ${paddedBinary[i] === '1' ? 'one' : 'zero'}`;
      bit.textContent = paddedBinary[i];
      bitDisplay.appendChild(bit);
    }

    // Create byte groups
    for (let i = 0; i < paddedBinary.length; i += 8) {
      const byteStr = paddedBinary.slice(i, i + 8);
      const byteValue = parseInt(byteStr, 2);
      
      const byteGroup = document.createElement('div');
      byteGroup.className = 'byte-group';
      byteGroup.innerHTML = `
        <div class="byte-label">Byte ${i / 8 + 1}</div>
        <div class="byte-value">${byteStr} = ${byteValue}</div>
      `;
      byteGroups.appendChild(byteGroup);
    }
  }

  function performBitwiseOperation() {
    const a = parseInt(operandA.value) || 0;
    const b = parseInt(operandB.value) || 0;
    const op = operator.value;

    let result = 0;
    let steps = '';

    switch (op) {
      case 'and':
        result = a & b;
        steps = `${a.toString(2).padStart(8, '0')}\n& ${b.toString(2).padStart(8, '0')}\n= ${result.toString(2).padStart(8, '0')}`;
        break;
      case 'or':
        result = a | b;
        steps = `${a.toString(2).padStart(8, '0')}\n| ${b.toString(2).padStart(8, '0')}\n= ${result.toString(2).padStart(8, '0')}`;
        break;
      case 'xor':
        result = a ^ b;
        steps = `${a.toString(2).padStart(8, '0')}\n^ ${b.toString(2).padStart(8, '0')}\n= ${result.toString(2).padStart(8, '0')}`;
        break;
      case 'not':
        // For NOT, we'll use 32-bit representation
        result = ~a >>> 0;
        steps = `~${a.toString(2).padStart(32, '0')}\n= ${result.toString(2).padStart(32, '0')}`;
        break;
      case 'lshift':
        result = a << b;
        steps = `${a.toString(2)} << ${b}\n= ${result.toString(2)}`;
        break;
      case 'rshift':
        result = a >> b;
        steps = `${a.toString(2)} >> ${b}\n= ${result.toString(2)}`;
        break;
    }

    resultDecimal.textContent = result.toString();
    resultBinary.textContent = result.toString(2);
    resultHex.textContent = '0x' + result.toString(16).toUpperCase();
    stepsContent.textContent = steps;
    operationResult.style.display = 'block';
  }

  // Event listeners for number conversion
  if (decimalInput) {
    decimalInput.addEventListener('input', () => {
      const value = decimalInput.value.trim();
      if (value === '') {
        updateAllFields(0);
        return;
      }
      if (!/^\d+$/.test(value)) return;
      
      try {
        updateAllFields(value);
      } catch (e) {
        // Invalid input
      }
    });
  }

  if (binaryInput) {
    binaryInput.addEventListener('input', () => {
      const value = binaryInput.value.trim();
      if (value === '') {
        updateAllFields(0);
        return;
      }
      if (!/^[01]+$/.test(value)) return;
      
      try {
        const num = parseInt(value, 2);
        updateAllFields(num);
      } catch (e) {
        // Invalid input
      }
    });
  }

  if (hexInput) {
    hexInput.addEventListener('input', () => {
      const value = hexInput.value.trim();
      if (value === '') {
        updateAllFields(0);
        return;
      }
      if (!/^[0-9A-Fa-f]+$/.test(value)) return;
      
      try {
        const num = parseInt(value, 16);
        updateAllFields(num);
      } catch (e) {
        // Invalid input
      }
    });
  }

  if (octalInput) {
    octalInput.addEventListener('input', () => {
      const value = octalInput.value.trim();
      if (value === '') {
        updateAllFields(0);
        return;
      }
      if (!/^[0-7]+$/.test(value)) return;
      
      try {
        const num = parseInt(value, 8);
        updateAllFields(num);
      } catch (e) {
        // Invalid input
      }
    });
  }

  // Clear buttons
  document.querySelectorAll('.clear-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const inputId = btn.getAttribute('data-input');
      const input = document.getElementById(inputId);
      if (input) {
        input.value = '';
        updateAllFields(0);
      }
    });
  });

  // Bitwise operations
  if (operator) {
    operator.addEventListener('change', () => {
      if (operator.value === 'not') {
        operandBGroup.style.opacity = '0.5';
        operandBGroup.style.pointerEvents = 'none';
        const label = operandBGroup.querySelector('label');
        if (label) label.textContent = 'Not used for NOT operation';
      } else if (operator.value === 'lshift' || operator.value === 'rshift') {
        operandBGroup.style.opacity = '1';
        operandBGroup.style.pointerEvents = 'auto';
        const label = operandBGroup.querySelector('label');
        if (label) label.textContent = 'Shift Amount';
      } else {
        operandBGroup.style.opacity = '1';
        operandBGroup.style.pointerEvents = 'auto';
        const label = operandBGroup.querySelector('label');
        if (label) label.textContent = 'Operand B / Shift Amount';
      }
    });
  }

  const calculateBtn = document.getElementById('calculate-btn');
  if (calculateBtn) {
    calculateBtn.addEventListener('click', performBitwiseOperation);
  }

  // Keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    if (e.ctrlKey || e.metaKey) {
      if (e.key === 'Enter') {
        e.preventDefault();
        performBitwiseOperation();
      }
    }
  });

  // Initialize
  updateAllFields(0);
</script>