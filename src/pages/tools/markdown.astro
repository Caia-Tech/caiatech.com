---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Markdown Converter - Caiatech">
  <CaiatechToolLayout 
    title="Markdown Converter" 
    description="Convert Markdown to HTML"
    icon="MD">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="markdown-tool">
      <!-- Toolbar -->
      <div class="terminal-panel toolbar-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">TOOLBAR://markdown.editor</span>
          <div class="terminal-actions">
            <div class="view-controls">
              <button id="editor-only-btn" class="view-btn">Editor</button>
              <button id="split-view-btn" class="view-btn active">Split</button>
              <button id="preview-only-btn" class="view-btn">Preview</button>
            </div>
          </div>
        </div>
        <div class="terminal-body">
          <div class="toolbar-sections">
            <div class="toolbar-section">
              <div class="toolbar-buttons">
                <button id="bold-btn" class="toolbar-btn" title="Bold (Ctrl+B)">
                  <strong>B</strong>
                </button>
                <button id="italic-btn" class="toolbar-btn" title="Italic (Ctrl+I)">
                  <em>I</em>
                </button>
                <button id="heading-btn" class="toolbar-btn" title="Heading">
                  H1
                </button>
                <button id="link-btn" class="toolbar-btn" title="Link">
                  üîó
                </button>
                <button id="image-btn" class="toolbar-btn" title="Image">
                  üñºÔ∏è
                </button>
                <button id="code-btn" class="toolbar-btn" title="Code Block">
                  &lt;/&gt;
                </button>
                <button id="list-btn" class="toolbar-btn" title="List">
                  üìã
                </button>
                <button id="table-btn" class="toolbar-btn" title="Table">
                  üìä
                </button>
              </div>
            </div>
            
            <div class="toolbar-section">
              <div class="file-actions">
                <button id="load-sample-btn" class="cyber-btn secondary">
                  <span class="btn-text">Load Sample</span>
                </button>
                <label for="file-input" class="cyber-btn secondary">
                  <span class="btn-text">Load File</span>
                  <input type="file" id="file-input" accept=".md,.txt" style="display: none;">
                </label>
                <button id="download-md-btn" class="cyber-btn secondary">
                  <span class="btn-text">Download MD</span>
                </button>
                <button id="download-html-btn" class="cyber-btn secondary">
                  <span class="btn-text">Download HTML</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Editor Container -->
      <div class="editor-container" id="editor-container">
        <!-- Editor Pane -->
        <div class="terminal-panel editor-pane" id="editor-pane">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">EDITOR://markdown.source</span>
            <div class="terminal-actions">
              <div class="editor-stats">
                <span id="word-count">0 words</span>
                <span class="separator">‚Ä¢</span>
                <span id="char-count">0 chars</span>
                <span class="separator">‚Ä¢</span>
                <span id="line-count">1 lines</span>
              </div>
            </div>
          </div>
          <div class="terminal-body">
            <div class="terminal-prompt">
              <span class="prompt-symbol">$</span>
              <span class="prompt-text">markdown</span>
              <span class="prompt-arrow">‚Üí</span>
            </div>
            <textarea 
              id="markdown-input"
              class="markdown-editor"
              placeholder="Start writing your markdown here..."
              spellcheck="false"
            ></textarea>
          </div>
        </div>

        <!-- Preview Pane -->
        <div class="terminal-panel preview-pane" id="preview-pane">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">PREVIEW://markdown.render</span>
            <div class="terminal-actions">
              <button class="terminal-action" id="copy-html-btn" title="Copy HTML">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
              <button class="terminal-action" id="print-btn" title="Print">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M6 9V2h12v7M6 18H4a2 2 0 01-2-2v-5a2 2 0 012-2h16a2 2 0 012 2v5a2 2 0 01-2 2h-2"/>
                  <path d="M6 14h12v8H6V14z"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="terminal-prompt">
              <span class="prompt-symbol">></span>
              <span class="prompt-text">preview</span>
            </div>
            <div id="markdown-preview" class="markdown-content">
              <div class="preview-placeholder">
                <div class="placeholder-icon">‚úçÔ∏è</div>
                <h4>Start Writing</h4>
                <p>Your markdown will be rendered here in real-time as you type.</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Cheatsheet Panel -->
      <div class="terminal-panel cheatsheet-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">REFERENCE://markdown.cheatsheet</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="toggle-cheatsheet-btn" title="Show/Hide Cheatsheet">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="6 9 12 15 18 9"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div id="cheatsheet-content" class="cheatsheet-content" style="display: none;">
            <div class="cheatsheet-grid">
              <div class="cheat-category">
                <h4>Headers</h4>
                <div class="cheat-items">
                  <div class="cheat-item">
                    <code># H1</code>
                    <span>Main heading</span>
                  </div>
                  <div class="cheat-item">
                    <code>## H2</code>
                    <span>Sub heading</span>
                  </div>
                  <div class="cheat-item">
                    <code>### H3</code>
                    <span>Section heading</span>
                  </div>
                </div>
              </div>
              
              <div class="cheat-category">
                <h4>Text Formatting</h4>
                <div class="cheat-items">
                  <div class="cheat-item">
                    <code>**bold**</code>
                    <span><strong>bold text</strong></span>
                  </div>
                  <div class="cheat-item">
                    <code>*italic*</code>
                    <span><em>italic text</em></span>
                  </div>
                  <div class="cheat-item">
                    <code>`code`</code>
                    <span><code>inline code</code></span>
                  </div>
                </div>
              </div>
              
              <div class="cheat-category">
                <h4>Links & Images</h4>
                <div class="cheat-items">
                  <div class="cheat-item">
                    <code>[text](url)</code>
                    <span>Link</span>
                  </div>
                  <div class="cheat-item">
                    <code>![alt](url)</code>
                    <span>Image</span>
                  </div>
                </div>
              </div>
              
              <div class="cheat-category">
                <h4>Lists</h4>
                <div class="cheat-items">
                  <div class="cheat-item">
                    <code>- item</code>
                    <span>Bullet list</span>
                  </div>
                  <div class="cheat-item">
                    <code>1. item</code>
                    <span>Numbered list</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Markdown Converter" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .markdown-tool {
    display: grid;
    gap: 1.5rem;
  }

  .editor-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
  }

  .editor-container.editor-only .preview-pane {
    display: none;
  }

  .editor-container.editor-only {
    grid-template-columns: 1fr;
  }

  .editor-container.preview-only .editor-pane {
    display: none;
  }

  .editor-container.preview-only {
    grid-template-columns: 1fr;
  }

  @media (max-width: 968px) {
    .editor-container {
      grid-template-columns: 1fr;
    }
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Markdown-specific styles */
  .toolbar-sections {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    align-items: center;
    justify-content: space-between;
  }

  .toolbar-section {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .toolbar-buttons {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .toolbar-btn {
    width: 32px;
    height: 32px;
    border: 1px solid rgba(0, 212, 255, 0.3);
    border-radius: 4px;
    background: transparent;
    color: var(--color-text);
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.9rem;
  }

  .toolbar-btn:hover {
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
    transform: translateY(-1px);
  }

  .file-actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .view-controls {
    display: flex;
    border: 1px solid rgba(0, 212, 255, 0.3);
    border-radius: 6px;
    overflow: hidden;
  }

  .view-btn {
    padding: 0.5rem 1rem;
    border: none;
    background: transparent;
    color: var(--color-text);
    cursor: pointer;
    transition: all 0.2s;
    border-right: 1px solid rgba(0, 212, 255, 0.3);
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .view-btn:last-child {
    border-right: none;
  }

  .view-btn:hover {
    background: rgba(0, 212, 255, 0.1);
  }

  .view-btn.active {
    background: var(--color-accent);
    color: var(--color-bg);
  }

  .editor-stats {
    display: flex;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text-secondary);
  }

  .separator {
    opacity: 0.5;
  }

  .markdown-editor {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 1rem;
    width: 100%;
    min-height: 400px;
    resize: none;
    transition: all 0.3s;
    line-height: 1.6;
  }

  .markdown-editor:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .markdown-content {
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 8px;
    padding: 1rem;
    min-height: 400px;
    overflow-y: auto;
    color: var(--color-text);
    line-height: 1.6;
  }

  .preview-placeholder {
    text-align: center;
    padding: 3rem 1rem;
    color: var(--color-text-secondary);
  }

  .placeholder-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
  }

  .preview-placeholder h4 {
    margin: 0 0 1rem 0;
    color: var(--color-text);
    font-family: var(--font-mono);
  }

  .preview-placeholder p {
    margin: 0;
    font-family: var(--font-mono);
    font-size: 0.9rem;
  }

  /* Markdown content styles */
  .markdown-content h1,
  .markdown-content h2,
  .markdown-content h3,
  .markdown-content h4,
  .markdown-content h5,
  .markdown-content h6 {
    color: var(--color-accent);
    margin: 1.5rem 0 1rem 0;
    font-weight: 600;
  }

  .markdown-content h1 {
    border-bottom: 2px solid rgba(0, 212, 255, 0.3);
    padding-bottom: 0.5rem;
  }

  .markdown-content h2 {
    border-bottom: 1px solid rgba(0, 212, 255, 0.2);
    padding-bottom: 0.3rem;
  }

  .markdown-content p {
    margin: 1rem 0;
  }

  .markdown-content code {
    background: rgba(0, 212, 255, 0.1);
    color: var(--color-accent);
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .markdown-content pre {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    padding: 1rem;
    overflow-x: auto;
    margin: 1rem 0;
  }

  .markdown-content pre code {
    background: none;
    color: var(--color-text);
    padding: 0;
  }

  .markdown-content blockquote {
    border-left: 4px solid var(--color-accent);
    background: rgba(0, 212, 255, 0.05);
    padding: 1rem;
    margin: 1rem 0;
    border-radius: 0 6px 6px 0;
  }

  .markdown-content ul,
  .markdown-content ol {
    margin: 1rem 0;
    padding-left: 2rem;
  }

  .markdown-content li {
    margin: 0.5rem 0;
  }

  .markdown-content table {
    border-collapse: collapse;
    width: 100%;
    margin: 1rem 0;
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    overflow: hidden;
  }

  .markdown-content th,
  .markdown-content td {
    border: 1px solid rgba(0, 212, 255, 0.1);
    padding: 0.75rem;
    text-align: left;
  }

  .markdown-content th {
    background: rgba(0, 212, 255, 0.1);
    color: var(--color-accent);
    font-weight: 600;
  }

  .markdown-content a {
    color: var(--color-accent);
    text-decoration: none;
  }

  .markdown-content a:hover {
    text-decoration: underline;
  }

  .markdown-content hr {
    border: none;
    border-top: 1px solid rgba(0, 212, 255, 0.3);
    margin: 2rem 0;
  }

  .markdown-content img {
    max-width: 100%;
    height: auto;
    border-radius: 6px;
  }

  /* Cheatsheet styles */
  .cheatsheet-content {
    animation: slideDown 0.3s ease;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .cheatsheet-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-top: 1rem;
  }

  .cheat-category h4 {
    margin: 0 0 1rem 0;
    color: var(--color-accent);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    border-bottom: 1px solid rgba(0, 212, 255, 0.2);
    padding-bottom: 0.5rem;
  }

  .cheat-items {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .cheat-item {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 0.5rem;
    border-radius: 4px;
    transition: background 0.2s;
  }

  .cheat-item:hover {
    background: rgba(0, 212, 255, 0.05);
  }

  .cheat-item code {
    background: rgba(0, 212, 255, 0.1);
    padding: 0.25rem 0.5rem;
    border-radius: 3px;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    white-space: pre;
    min-width: 80px;
    color: var(--color-accent);
  }

  .cheat-item span {
    color: var(--color-text-secondary);
    font-size: 0.9rem;
    flex: 1;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .toolbar-sections {
      flex-direction: column;
      align-items: stretch;
      gap: 1rem;
    }

    .toolbar-section {
      justify-content: center;
    }

    .file-actions {
      justify-content: center;
    }

    .view-controls {
      align-self: center;
    }

    .cheatsheet-grid {
      grid-template-columns: 1fr;
    }

    .editor-stats {
      flex-direction: column;
      gap: 0.25rem;
      text-align: center;
    }

    .separator {
      display: none;
    }
  }
</style>

<script>
  // Markdown Editor - JavaScript Implementation
  const markdownInput = document.getElementById('markdown-input');
  const markdownPreview = document.getElementById('markdown-preview');
  const editorContainer = document.getElementById('editor-container');
  const wordCount = document.getElementById('word-count');
  const charCount = document.getElementById('char-count');
  const lineCount = document.getElementById('line-count');
  const cheatsheetContent = document.getElementById('cheatsheet-content');
  
  const sampleMarkdown = `# Caiatech Markdown Editor

Welcome to the **Caiatech Markdown Editor**! This is a powerful, privacy-first markdown editor that runs entirely in your browser.

## Features

- **Live Preview**: See your markdown rendered in real-time
- **Syntax Highlighting**: Code blocks with language support  
- **Privacy First**: All processing happens locally
- **Export Options**: Download as Markdown or HTML

## Code Example

Here's a JavaScript function:

\`\`\`javascript
function greetUser(name) {
    return \`Hello, \${name}! Welcome to Caiatech.\`;
}

console.log(greetUser("Developer"));
\`\`\`

## Table Example

| Feature | Status | Priority |
|---------|--------|---------|
| Live Preview | ‚úÖ Complete | High |
| Export | ‚úÖ Complete | High |
| Themes | üöß Planned | Medium |

## Lists

### Todo List
- [x] Implement live preview
- [x] Add export functionality  
- [ ] Add theme support
- [ ] Mobile optimization

### Technologies Used
1. **Markdown**: For content formatting
2. **JavaScript**: For live preview rendering
3. **CSS**: For beautiful styling
4. **HTML**: For structure

> **Note**: This editor processes everything locally in your browser for maximum privacy and security.

---

**Built with ‚ù§Ô∏è by [Caiatech](https://caiatech.com)**`;
  
  function parseMarkdown(markdown) {
    let html = markdown;
    
    // Headers
    html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');
    html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');
    html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');
    
    // Bold and italic
    html = html.replace(/\*\*\*(.*?)\*\*\*/gim, '<strong><em>$1</em></strong>');
    html = html.replace(/\*\*(.*?)\*\*/gim, '<strong>$1</strong>');
    html = html.replace(/\*(.*?)\*/gim, '<em>$1</em>');
    
    // Code blocks
    html = html.replace(/```(\w+)?\n([\s\S]*?)```/gim, (match, lang, code) => {
      return `<pre><code class="language-${lang || 'text'}">${code.trim()}</code></pre>`;
    });
    
    // Inline code
    html = html.replace(/`([^`]+)`/gim, '<code>$1</code>');
    
    // Links
    html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/gim, '<a href="$2" target="_blank" rel="noopener">$1</a>');
    
    // Images
    html = html.replace(/!\[([^\]]*)\]\(([^)]+)\)/gim, '<img src="$2" alt="$1" />');
    
    // Tables
    html = html.replace(/^\|(.+)\|\s*$/gim, (match, content) => {
      const cells = content.split('|').map(cell => cell.trim());
      return '<tr>' + cells.map(cell => `<td>${cell}</td>`).join('') + '</tr>';
    });
    
    // Wrap table rows in table
    html = html.replace(/(<tr>.*<\/tr>)/gims, (match) => {
      const rows = match.split('\n').filter(row => row.trim());
      if (rows.length > 1 && rows[1].includes('---')) {
        // Has header separator
        const headerRow = rows[0].replace(/<td>/g, '<th>').replace(/<\/td>/g, '</th>');
        const bodyRows = rows.slice(2);
        return `<table>${headerRow}${bodyRows.join('')}</table>`;
      }
      return `<table>${match}</table>`;
    });
    
    // Lists
    html = html.replace(/^\* (.+)$/gim, '<li>$1</li>');
    html = html.replace(/^- (.+)$/gim, '<li>$1</li>');
    html = html.replace(/^(\d+)\. (.+)$/gim, '<li>$2</li>');
    
    // Checkboxes
    html = html.replace(/- \[x\] (.+)$/gim, '<li><input type="checkbox" checked disabled> $1</li>');
    html = html.replace(/- \[ \] (.+)$/gim, '<li><input type="checkbox" disabled> $1</li>');
    
    // Wrap consecutive list items
    html = html.replace(/(<li>.*<\/li>)/gims, (match) => {
      if (!match.includes('<ul>') && !match.includes('<ol>')) {
        return '<ul>' + match + '</ul>';
      }
      return match;
    });
    
    // Blockquotes
    html = html.replace(/^> (.+)$/gim, '<blockquote>$1</blockquote>');
    
    // Horizontal rules
    html = html.replace(/^---$/gim, '<hr>');
    
    // Line breaks and paragraphs
    html = html.replace(/\n\n/gim, '</p><p>');
    html = html.replace(/\n/gim, '<br>');
    
    // Wrap in paragraph tags if not already wrapped
    if (!html.includes('<p>') && !html.includes('<h') && !html.includes('<ul>') && !html.includes('<table>')) {
      html = '<p>' + html + '</p>';
    }
    
    return html;
  }
  
  function updatePreview() {
    const markdown = markdownInput.value;
    
    if (!markdown.trim()) {
      markdownPreview.innerHTML = `
        <div class="preview-placeholder">
          <div class="placeholder-icon">‚úçÔ∏è</div>
          <h4>Start Writing</h4>
          <p>Your markdown will be rendered here in real-time as you type.</p>
        </div>
      `;
      return;
    }
    
    const html = parseMarkdown(markdown);
    markdownPreview.innerHTML = html;
  }
  
  function updateStats() {
    const text = markdownInput.value;
    const words = text.trim() ? text.trim().split(/\s+/).length : 0;
    const chars = text.length;
    const lines = text.split('\n').length;
    
    if (wordCount) wordCount.textContent = `${words} word${words === 1 ? '' : 's'}`;
    if (charCount) charCount.textContent = `${chars} char${chars === 1 ? '' : 's'}`;
    if (lineCount) lineCount.textContent = `${lines} line${lines === 1 ? '' : 's'}`;
  }
  
  function insertMarkdown(before, after = '') {
    const start = markdownInput.selectionStart;
    const end = markdownInput.selectionEnd;
    const selectedText = markdownInput.value.substring(start, end);
    const replacement = before + selectedText + after;
    
    markdownInput.value = markdownInput.value.substring(0, start) + replacement + markdownInput.value.substring(end);
    markdownInput.focus();
    
    const newPos = start + before.length + selectedText.length;
    markdownInput.setSelectionRange(newPos, newPos);
    
    updatePreview();
    updateStats();
  }
  
  // Event listeners
  markdownInput.addEventListener('input', () => {
    updatePreview();
    updateStats();
  });
  
  // Toolbar buttons
  document.getElementById('bold-btn')?.addEventListener('click', () => {
    insertMarkdown('**', '**');
  });
  
  document.getElementById('italic-btn')?.addEventListener('click', () => {
    insertMarkdown('*', '*');
  });
  
  document.getElementById('heading-btn')?.addEventListener('click', () => {
    insertMarkdown('# ', '');
  });
  
  document.getElementById('link-btn')?.addEventListener('click', () => {
    insertMarkdown('[', '](url)');
  });
  
  document.getElementById('image-btn')?.addEventListener('click', () => {
    insertMarkdown('![alt text](', ')');
  });
  
  document.getElementById('code-btn')?.addEventListener('click', () => {
    insertMarkdown('```\n', '\n```');
  });
  
  document.getElementById('list-btn')?.addEventListener('click', () => {
    insertMarkdown('- ', '');
  });
  
  document.getElementById('table-btn')?.addEventListener('click', () => {
    const table = '| Header 1 | Header 2 |\n|----------|----------|\n| Cell 1   | Cell 2   |';
    insertMarkdown(table, '');
  });
  
  // View controls
  document.getElementById('editor-only-btn')?.addEventListener('click', (e) => {
    editorContainer?.setAttribute('class', 'editor-container editor-only');
    document.querySelectorAll('.view-btn').forEach(btn => btn.classList.remove('active'));
    e.target.classList.add('active');
  });
  
  document.getElementById('split-view-btn')?.addEventListener('click', (e) => {
    editorContainer?.setAttribute('class', 'editor-container');
    document.querySelectorAll('.view-btn').forEach(btn => btn.classList.remove('active'));
    e.target.classList.add('active');
  });
  
  document.getElementById('preview-only-btn')?.addEventListener('click', (e) => {
    editorContainer?.setAttribute('class', 'editor-container preview-only');
    document.querySelectorAll('.view-btn').forEach(btn => btn.classList.remove('active'));
    e.target.classList.add('active');
  });
  
  // File operations
  document.getElementById('file-input')?.addEventListener('change', async (e) => {
    const file = e.target.files?.[0];
    if (file) {
      const text = await file.text();
      markdownInput.value = text;
      updatePreview();
      updateStats();
    }
  });
  
  document.getElementById('load-sample-btn')?.addEventListener('click', () => {
    markdownInput.value = sampleMarkdown;
    updatePreview();
    updateStats();
  });
  
  document.getElementById('download-md-btn')?.addEventListener('click', () => {
    const blob = new Blob([markdownInput.value], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'document.md';
    a.click();
    URL.revokeObjectURL(url);
  });
  
  document.getElementById('download-html-btn')?.addEventListener('click', () => {
    const html = `<!DOCTYPE html>
<html>
<head>
    <title>Markdown Document</title>
    <meta charset="utf-8">
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; max-width: 800px; margin: 0 auto; padding: 2rem; line-height: 1.6; }
        h1, h2 { border-bottom: 1px solid #eee; padding-bottom: 0.3rem; }
        code { background: #f4f4f4; padding: 0.2rem 0.4rem; border-radius: 3px; }
        pre { background: #f8f8f8; padding: 1rem; border-radius: 6px; overflow-x: auto; }
        blockquote { border-left: 4px solid #667eea; background: #f8f9fa; padding: 1rem; margin: 1rem 0; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #ddd; padding: 0.75rem; text-align: left; }
        th { background: #f8f9fa; }
    </style>
</head>
<body>
${markdownPreview.innerHTML}
<hr>
<p><em>Generated by <a href="https://caiatech.com/tools/markdown">Caiatech Markdown Editor</a></em></p>
</body>
</html>`;
    
    const blob = new Blob([html], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'document.html';
    a.click();
    URL.revokeObjectURL(url);
  });
  
  document.getElementById('copy-html-btn')?.addEventListener('click', async () => {
    try {
      await navigator.clipboard.writeText(markdownPreview.innerHTML);
      const btn = document.getElementById('copy-html-btn');
      if (btn) {
        const originalContent = btn.innerHTML;
        btn.innerHTML = '‚úì';
        btn.style.color = '#28ca42';
        setTimeout(() => {
          btn.innerHTML = originalContent;
          btn.style.color = '';
        }, 2000);
      }
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  });
  
  document.getElementById('print-btn')?.addEventListener('click', () => {
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>Markdown Document</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; max-width: 800px; margin: 0 auto; padding: 2rem; line-height: 1.6; }
                h1, h2 { border-bottom: 1px solid #eee; padding-bottom: 0.3rem; }
                code { background: #f4f4f4; padding: 0.2rem 0.4rem; border-radius: 3px; }
                pre { background: #f8f8f8; padding: 1rem; border-radius: 6px; }
                table { border-collapse: collapse; width: 100%; }
                th, td { border: 1px solid #ddd; padding: 0.75rem; text-align: left; }
                th { background: #f8f9fa; }
            </style>
        </head>
        <body>${markdownPreview.innerHTML}</body>
        </html>
      `);
      printWindow.document.close();
      printWindow.print();
    }
  });
  
  document.getElementById('toggle-cheatsheet-btn')?.addEventListener('click', () => {
    if (cheatsheetContent) {
      const isVisible = cheatsheetContent.style.display !== 'none';
      cheatsheetContent.style.display = isVisible ? 'none' : 'block';
    }
  });
  
  // Keyboard shortcuts
  markdownInput?.addEventListener('keydown', (e) => {
    if (e.ctrlKey || e.metaKey) {
      if (e.key === 'b') {
        e.preventDefault();
        insertMarkdown('**', '**');
      } else if (e.key === 'i') {
        e.preventDefault();
        insertMarkdown('*', '*');
      }
    }
  });
  
  // Initialize
  updatePreview();
  updateStats();
</script>