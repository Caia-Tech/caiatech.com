---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="YAML Formatter - Caiatech">
  <CaiatechToolLayout 
    title="YAML ‚Üî JSON Converter" 
    description="Convert between YAML and JSON, validate and format YAML"
    icon="YAML">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Mode selector -->
      <div class="mode-selector">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">MODE://conversion.type</span>
        </div>
        <div class="mode-container">
          <h3 class="mode-title">üîÑ CONVERSION MODE</h3>
          <div class="mode-options">
            <label class="radio-option">
              <input type="radio" name="mode" value="yaml-to-json" checked>
              <span class="radio-custom"></span>
              <span class="radio-label">YAML ‚Üí JSON</span>
            </label>
            <label class="radio-option">
              <input type="radio" name="mode" value="json-to-yaml">
              <span class="radio-custom"></span>
              <span class="radio-label">JSON ‚Üí YAML</span>
            </label>
            <label class="radio-option">
              <input type="radio" name="mode" value="format-yaml">
              <span class="radio-custom"></span>
              <span class="radio-label">Format YAML</span>
            </label>
          </div>
        </div>
      </div>

      <!-- YAML Options -->
      <div class="options-panel">
        <h3 class="options-title">‚öôÔ∏è YAML OPTIONS</h3>
        <div class="options-grid">
          <div class="option-group">
            <label>Indentation</label>
            <select id="indent-size">
              <option value="2" selected>2 spaces</option>
              <option value="4">4 spaces</option>
              <option value="tab">Tab</option>
            </select>
          </div>
          <div class="option-group checkbox-group">
            <label class="checkbox-option">
              <input type="checkbox" id="sort-keys">
              <span class="checkbox-custom"></span>
              <span>Sort keys alphabetically</span>
            </label>
            <label class="checkbox-option">
              <input type="checkbox" id="preserve-quotes">
              <span class="checkbox-custom"></span>
              <span>Preserve quotes</span>
            </label>
          </div>
        </div>
      </div>
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title" id="input-title">INPUT://yaml</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">yaml</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Paste your YAML here...\nname: John Doe\nage: 30\naddress:\n  street: 123 Main St\n  city: New York"
            spellcheck="false"
            rows="12"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="process-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">Process</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title" id="output-title">OUTPUT://json</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="YAML ‚Üî JSON Converter" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Mode selector */
  .mode-selector {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
  }

  .mode-container {
    padding: 1rem;
  }

  .mode-title {
    margin: 0 0 1rem 0;
    font-size: 0.9rem;
    color: var(--color-accent);
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .mode-options {
    display: flex;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .radio-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-size: 0.9rem;
    color: var(--color-text-secondary);
  }

  .radio-option input[type="radio"] {
    display: none;
  }

  .radio-custom {
    width: 18px;
    height: 18px;
    border: 2px solid rgba(0, 212, 255, 0.3);
    border-radius: 50%;
    position: relative;
    transition: all 0.3s;
  }

  .radio-option input[type="radio"]:checked + .radio-custom {
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
  }

  .radio-option input[type="radio"]:checked + .radio-custom::after {
    content: '';
    position: absolute;
    top: 4px;
    left: 4px;
    width: 6px;
    height: 6px;
    background: var(--color-accent);
    border-radius: 50%;
    box-shadow: 0 0 10px var(--color-accent);
  }

  .radio-label {
    font-family: var(--font-mono);
  }

  /* Options panel */
  .options-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    padding: 1rem;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
  }

  .options-title {
    margin: 0 0 1rem 0;
    font-size: 0.9rem;
    color: var(--color-accent);
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .options-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .option-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .option-group label {
    font-size: 0.85rem;
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
  }

  .option-group select {
    padding: 0.5rem;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.3s;
  }

  .option-group select:hover,
  .option-group select:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.2);
  }

  .checkbox-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .checkbox-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .checkbox-option input[type="checkbox"] {
    display: none;
  }

  .checkbox-custom {
    width: 16px;
    height: 16px;
    border: 2px solid rgba(0, 212, 255, 0.3);
    border-radius: 3px;
    position: relative;
    transition: all 0.3s;
    flex-shrink: 0;
  }

  .checkbox-option input[type="checkbox"]:checked + .checkbox-custom {
    background: var(--color-accent);
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
  }

  .checkbox-option input[type="checkbox"]:checked + .checkbox-custom::after {
    content: '‚úì';
    position: absolute;
    top: -2px;
    left: 2px;
    color: var(--color-background);
    font-size: 12px;
    font-weight: bold;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .mode-options {
      flex-direction: column;
      gap: 1rem;
    }
    
    .options-grid {
      grid-template-columns: 1fr;
    }
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // YAML ‚Üî JSON Converter - Complete Implementation
  (function() {
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    const inputTitle = document.getElementById('input-title');
    const outputTitle = document.getElementById('output-title');
    
    const processBtn = document.getElementById('process-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    // Simple YAML parser (basic implementation)
    function parseYAML(yamlString) {
      const lines = yamlString.split('\n');
      const result = {};
      const stack = [result];
      const indentStack = [-1];
      
      for (let line of lines) {
        const trimmed = line.trim();
        if (!trimmed || trimmed.startsWith('#')) continue;
        
        const indent = line.search(/\S/);
        
        // Pop stack for dedent
        while (indentStack.length > 1 && indent <= indentStack[indentStack.length - 1]) {
          stack.pop();
          indentStack.pop();
        }
        
        // Handle list items
        if (trimmed.startsWith('- ')) {
          const current = stack[stack.length - 1];
          const value = trimmed.substring(2).trim();
          
          if (!Array.isArray(current)) {
            throw new Error('List item in non-list context');
          }
          
          // Try to parse as nested object
          if (value.includes(':')) {
            const obj = {};
            const [k, v] = value.split(':').map(s => s.trim());
            obj[k] = parseValue(v);
            current.push(obj);
          } else {
            current.push(parseValue(value));
          }
        }
        // Handle key-value pairs
        else if (trimmed.includes(':')) {
          const colonIndex = trimmed.indexOf(':');
          const key = trimmed.substring(0, colonIndex).trim();
          const value = trimmed.substring(colonIndex + 1).trim();
          
          const current = stack[stack.length - 1];
          
          if (!value) {
            // Next line is the value (object or array)
            const nextLine = lines[lines.indexOf(line) + 1];
            if (nextLine) {
              const nextTrimmed = nextLine.trim();
              if (nextTrimmed.startsWith('- ')) {
                // It's an array
                current[key] = [];
                stack.push(current[key]);
                indentStack.push(indent);
              } else {
                // It's an object
                current[key] = {};
                stack.push(current[key]);
                indentStack.push(indent);
              }
            } else {
              current[key] = null;
            }
          } else {
            // Direct value
            current[key] = parseValue(value);
          }
        }
      }
      
      return result;
    }
    
    function parseValue(value) {
      if (!value || value === 'null') return null;
      if (value === 'true') return true;
      if (value === 'false') return false;
      
      // Remove quotes if present
      if ((value.startsWith('"') && value.endsWith('"')) || 
          (value.startsWith("'") && value.endsWith("'"))) {
        return value.slice(1, -1);
      }
      
      // Try to parse as number
      const num = Number(value);
      if (!isNaN(num)) return num;
      
      return value;
    }
    
    // Convert JSON to YAML
    function jsonToYAML(obj, indent = 0, indentSize = 2) {
      const indentStr = typeof indentSize === 'number' ? ' '.repeat(indent * indentSize) : '\t'.repeat(indent);
      const nextIndentStr = typeof indentSize === 'number' ? ' '.repeat((indent + 1) * indentSize) : '\t'.repeat(indent + 1);
      
      if (obj === null) return 'null';
      if (typeof obj === 'boolean') return obj.toString();
      if (typeof obj === 'number') return obj.toString();
      if (typeof obj === 'string') {
        // Quote if contains special characters
        if (obj.includes(':') || obj.includes('#') || obj.includes('"') || obj.includes("'") || 
            obj.includes('\n') || obj.startsWith(' ') || obj.endsWith(' ')) {
          return '"' + obj.replace(/"/g, '\\"') + '"';
        }
        return obj;
      }
      
      if (Array.isArray(obj)) {
        if (obj.length === 0) return '[]';
        
        let yaml = '';
        for (let item of obj) {
          yaml += '\n' + indentStr + '- ';
          if (typeof item === 'object' && item !== null) {
            const itemYaml = jsonToYAML(item, indent + 1, indentSize);
            if (Array.isArray(item) || Object.keys(item).length > 1) {
              yaml += itemYaml.substring(nextIndentStr.length);
            } else {
              const lines = itemYaml.trim().split('\n');
              yaml += lines[0];
              for (let i = 1; i < lines.length; i++) {
                yaml += '\n' + nextIndentStr + lines[i];
              }
            }
          } else {
            yaml += jsonToYAML(item, 0, indentSize);
          }
        }
        return yaml;
      }
      
      if (typeof obj === 'object') {
        let yaml = '';
        const keys = document.getElementById('sort-keys').checked ? 
                    Object.keys(obj).sort() : Object.keys(obj);
        
        for (let key of keys) {
          if (yaml) yaml += '\n' + indentStr;
          yaml += key + ':';
          
          const value = obj[key];
          if (value === null || value === undefined) {
            yaml += ' null';
          } else if (typeof value === 'object') {
            if (Array.isArray(value) && value.length === 0) {
              yaml += ' []';
            } else if (!Array.isArray(value) && Object.keys(value).length === 0) {
              yaml += ' {}';
            } else {
              yaml += jsonToYAML(value, indent + 1, indentSize);
            }
          } else {
            yaml += ' ' + jsonToYAML(value, 0, indentSize);
          }
        }
        return yaml;
      }
      
      return String(obj);
    }
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function processInput() {
      const text = input.value.trim();
      if (!text) {
        setStatus('Please enter some input', 'error');
        return;
      }
      
      const mode = document.querySelector('input[name="mode"]:checked').value;
      const indentSelect = document.getElementById('indent-size');
      const indentSize = indentSelect.value === 'tab' ? 'tab' : parseInt(indentSelect.value);
      
      try {
        let result;
        
        if (mode === 'yaml-to-json') {
          // Parse YAML to JSON
          const parsed = parseYAML(text);
          result = JSON.stringify(parsed, null, 2);
          setStatus('YAML converted to JSON', 'success');
        } else if (mode === 'json-to-yaml') {
          // Parse JSON to YAML
          const parsed = JSON.parse(text);
          result = jsonToYAML(parsed, 0, indentSize);
          setStatus('JSON converted to YAML', 'success');
        } else if (mode === 'format-yaml') {
          // Format YAML (parse and regenerate)
          const parsed = parseYAML(text);
          result = jsonToYAML(parsed, 0, indentSize);
          setStatus('YAML formatted', 'success');
        }
        
        output.textContent = result;
        
      } catch (error) {
        setStatus('Error: ' + error.message, 'error');
        output.textContent = '';
      }
      
      updateStats();
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const mode = document.querySelector('input[name="mode"]:checked').value;
      const extension = mode === 'yaml-to-json' ? '.json' : '.yaml';
      const mimeType = mode === 'yaml-to-json' ? 'application/json' : 'text/yaml';
      
      const blob = new Blob([text], { type: mimeType });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'converted' + extension;
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      const mode = document.querySelector('input[name="mode"]:checked').value;
      
      if (mode === 'yaml-to-json' || mode === 'format-yaml') {
        input.value = `# Employee Information
name: John Doe
age: 30
position: Senior Developer
department: Engineering
address:
  street: 123 Main Street
  city: San Francisco
  state: CA
  zip: 94105
skills:
  - JavaScript
  - Python
  - Docker
  - Kubernetes
projects:
  - name: API Gateway
    role: Lead Developer
    duration: 6 months
  - name: Data Pipeline
    role: Architect
    duration: 3 months`;
      } else {
        input.value = `{
  "name": "John Doe",
  "age": 30,
  "position": "Senior Developer",
  "department": "Engineering",
  "address": {
    "street": "123 Main Street",
    "city": "San Francisco",
    "state": "CA",
    "zip": "94105"
  },
  "skills": [
    "JavaScript",
    "Python",
    "Docker",
    "Kubernetes"
  ],
  "projects": [
    {
      "name": "API Gateway",
      "role": "Lead Developer",
      "duration": "6 months"
    },
    {
      "name": "Data Pipeline",
      "role": "Architect",
      "duration": "3 months"
    }
  ]
}`;
      }
      
      processInput();
    }
    
    function updateUI() {
      const mode = document.querySelector('input[name="mode"]:checked').value;
      
      if (mode === 'yaml-to-json') {
        inputTitle.textContent = 'INPUT://yaml';
        outputTitle.textContent = 'OUTPUT://json';
        input.placeholder = 'Paste your YAML here...\nname: John Doe\nage: 30\naddress:\n  street: 123 Main St\n  city: New York';
      } else if (mode === 'json-to-yaml') {
        inputTitle.textContent = 'INPUT://json';
        outputTitle.textContent = 'OUTPUT://yaml';
        input.placeholder = 'Paste your JSON here...\n{\n  "name": "John Doe",\n  "age": 30\n}';
      } else {
        inputTitle.textContent = 'INPUT://yaml';
        outputTitle.textContent = 'OUTPUT://yaml.formatted';
        input.placeholder = 'Paste your YAML to format...';
      }
    }
    
    // Event listeners
    processBtn.addEventListener('click', processInput);
    clearBtn.addEventListener('click', clearAll);
    clearInputBtn.addEventListener('click', clearInput);
    sampleBtn.addEventListener('click', loadSample);
    copyBtn.addEventListener('click', copyOutput);
    copyOutputBtn.addEventListener('click', copyOutput);
    downloadBtn.addEventListener('click', downloadOutput);
    pasteBtn.addEventListener('click', pasteInput);
    
    // Mode change listener
    document.querySelectorAll('input[name="mode"]').forEach(radio => {
      radio.addEventListener('change', () => {
        updateUI();
        output.textContent = '';
        updateStats();
      });
    });
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          processInput();
        }
      }
    });
    
    // Initial setup
    updateUI();
    updateStats();
  })();
</script>