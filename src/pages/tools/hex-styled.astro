---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Hex Encoder/Decoder - Caiatech">
  <CaiatechToolLayout 
    title="Hex Encoder/Decoder" 
    description="Convert between hexadecimal and text/binary with cyberpunk style"
    icon="0x">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://hex.encode</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">hexify</span>
            <span class="prompt-arrow">→</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Enter text to encode or hex to decode..."
            spellcheck="false"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="encode-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
              Encode
            </span>
          </button>
          <button id="decode-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="11" cy="11" r="8"/>
                <path d="m21 21-4.35-4.35"/>
              </svg>
              Decode
            </span>
          </button>
          <button id="auto-detect-btn" class="cyber-btn secondary">
            <span class="btn-text">Auto Detect</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">•</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://hex.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Hex Encoder/Decoder" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // Hex Encoder/Decoder with Styled Output
  (function() {
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const encodeBtn = document.getElementById('encode-btn');
    const decodeBtn = document.getElementById('decode-btn');
    const autoDetectBtn = document.getElementById('auto-detect-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function encodeToHex() {
      const text = input.value;
      if (!text) {
        setStatus('Please enter text to encode', 'error');
        return;
      }
      
      try {
        // Convert string to hex with styled output
        const hexArray = [];
        for (let i = 0; i < text.length; i++) {
          const hex = text.charCodeAt(i).toString(16).padStart(2, '0').toUpperCase();
          hexArray.push(hex);
        }
        
        // Generate styled output
        let result = generateStyledHexOutput('ENCODING', text, hexArray);
        
        output.textContent = result;
        setStatus('Encoded to hexadecimal!', 'success');
        updateStats();
      } catch (error) {
        setStatus('Encoding failed: ' + error.message, 'error');
        output.textContent = 'ERROR: ' + error.message;
      }
    }
    
    function decodeFromHex() {
      const text = input.value.trim();
      if (!text) {
        setStatus('Please enter hex to decode', 'error');
        return;
      }
      
      try {
        // Clean and validate hex input
        const cleanHex = text.replace(/[^0-9A-Fa-f]/g, '');
        
        if (cleanHex.length % 2 !== 0) {
          throw new Error('Invalid hex string (odd length)');
        }
        
        // Decode hex to string
        let decoded = '';
        for (let i = 0; i < cleanHex.length; i += 2) {
          const hexByte = cleanHex.substr(i, 2);
          decoded += String.fromCharCode(parseInt(hexByte, 16));
        }
        
        // Generate styled output
        let result = generateStyledDecodeOutput('DECODING', cleanHex, decoded);
        
        output.textContent = result;
        setStatus('Decoded from hexadecimal!', 'success');
        updateStats();
      } catch (error) {
        setStatus('Decoding failed: ' + error.message, 'error');
        output.textContent = 'ERROR: ' + error.message;
      }
    }
    
    function autoDetectAndProcess() {
      const text = input.value.trim();
      if (!text) {
        setStatus('Please enter input to auto-detect', 'error');
        return;
      }
      
      // Check if input looks like hex
      const cleanedText = text.replace(/[\s\-:]/g, '');
      const isHex = /^[0-9A-Fa-f]+$/.test(cleanedText) && cleanedText.length % 2 === 0;
      
      if (isHex) {
        setStatus('Detected: Hexadecimal - Decoding...', 'success');
        decodeFromHex();
      } else {
        setStatus('Detected: Plain text - Encoding...', 'success');
        encodeToHex();
      }
    }
    
    function generateStyledHexOutput(operation, original, hexArray) {
      let result = '';
      result += '╔═══════════════════════════════════════╗\n';
      result += '║     HEX ' + operation + ' RESULT     ║\n';
      result += '╚═══════════════════════════════════════╝\n\n';
      
      result += '▓▓▓ ORIGINAL INPUT ▓▓▓\n';
      result += '─'.repeat(40) + '\n';
      result += original + '\n\n';
      
      result += '▓▓▓ HEXADECIMAL OUTPUT ▓▓▓\n';
      result += '─'.repeat(40) + '\n';
      
      // Format hex in different styles
      result += '◆ CONTINUOUS:\n';
      result += hexArray.join('') + '\n\n';
      
      result += '◆ SPACED:\n';
      result += hexArray.join(' ') + '\n\n';
      
      result += '◆ WITH PREFIX:\n';
      result += '0x' + hexArray.join('') + '\n\n';
      
      result += '◆ BYTE ARRAY:\n';
      result += '[' + hexArray.map(h => '0x' + h).join(', ') + ']\n\n';
      
      result += '◆ FORMATTED (16 BYTES/ROW):\n';
      for (let i = 0; i < hexArray.length; i += 16) {
        const offset = i.toString(16).padStart(8, '0').toUpperCase();
        const bytes = hexArray.slice(i, i + 16);
        const ascii = original.substr(i, 16).replace(/[\x00-\x1F\x7F-\xFF]/g, '.');
        
        result += offset + '  ';
        result += bytes.join(' ').padEnd(48, ' ') + '  ';
        result += '|' + ascii.padEnd(16, ' ') + '|\n';
      }
      result += '\n';
      
      result += '▓▓▓ STATISTICS ▓▓▓\n';
      result += '─'.repeat(40) + '\n';
      result += '• Input Length: ' + original.length + ' characters\n';
      result += '• Output Length: ' + hexArray.length + ' bytes\n';
      result += '• Hex String Length: ' + (hexArray.length * 2) + ' characters\n';
      
      return result;
    }
    
    function generateStyledDecodeOutput(operation, hexInput, decoded) {
      let result = '';
      result += '╔═══════════════════════════════════════╗\n';
      result += '║     HEX ' + operation + ' RESULT     ║\n';
      result += '╚═══════════════════════════════════════╝\n\n';
      
      result += '▓▓▓ HEXADECIMAL INPUT ▓▓▓\n';
      result += '─'.repeat(40) + '\n';
      result += hexInput.match(/.{1,2}/g).join(' ') + '\n\n';
      
      result += '▓▓▓ DECODED OUTPUT ▓▓▓\n';
      result += '─'.repeat(40) + '\n';
      result += decoded + '\n\n';
      
      result += '▓▓▓ CHARACTER BREAKDOWN ▓▓▓\n';
      result += '─'.repeat(40) + '\n';
      
      const hexPairs = hexInput.match(/.{1,2}/g);
      for (let i = 0; i < hexPairs.length && i < 20; i++) {
        const hex = hexPairs[i];
        const decimal = parseInt(hex, 16);
        const char = String.fromCharCode(decimal);
        const displayChar = (decimal >= 32 && decimal <= 126) ? char : '·';
        
        result += '0x' + hex.toUpperCase() + ' → ' + 
                  decimal.toString().padStart(3, ' ') + ' → "' + 
                  displayChar + '"';
        
        if (decimal < 32) result += ' (control)';
        else if (decimal > 126) result += ' (extended)';
        
        result += '\n';
      }
      
      if (hexPairs.length > 20) {
        result += '... and ' + (hexPairs.length - 20) + ' more bytes\n';
      }
      
      result += '\n▓▓▓ STATISTICS ▓▓▓\n';
      result += '─'.repeat(40) + '\n';
      result += '• Hex Input: ' + hexInput.length + ' characters\n';
      result += '• Bytes Decoded: ' + hexPairs.length + '\n';
      result += '• Output Length: ' + decoded.length + ' characters\n';
      
      // Check for common formats
      result += '\n▓▓▓ FORMAT DETECTION ▓▓▓\n';
      result += '─'.repeat(40) + '\n';
      if (/^[a-zA-Z0-9+/=]+$/.test(decoded)) {
        result += '• Possibly Base64 encoded\n';
      }
      if (/^[\x20-\x7E\s]+$/.test(decoded)) {
        result += '• Valid ASCII text\n';
      }
      if (/^{.*}$/.test(decoded) || /^\[.*\]$/.test(decoded)) {
        result += '• Possibly JSON data\n';
      }
      
      return result;
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const toolName = document.title.split(' - ')[0].toLowerCase().replace(/\s+/g, '-');
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = toolName + '-output.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      // Load sample with both text and hex examples
      const samples = [
        {
          text: 'Hello, Cyberpunk World! 🤖',
          description: 'Text with emoji'
        },
        {
          text: '48656c6c6f20576f726c6421',
          description: 'Hex encoded string'
        },
        {
          text: '54 68 65 20 71 75 69 63 6b 20 62 72 6f 77 6e 20 66 6f 78',
          description: 'Spaced hex'
        }
      ];
      
      const sample = samples[Math.floor(Math.random() * samples.length)];
      input.value = sample.text;
      setStatus('Sample loaded: ' + sample.description, 'success');
      autoDetectAndProcess();
    }
    
    // Event listeners
    if (encodeBtn) encodeBtn.addEventListener('click', encodeToHex);
    if (decodeBtn) decodeBtn.addEventListener('click', decodeFromHex);
    if (autoDetectBtn) autoDetectBtn.addEventListener('click', autoDetectAndProcess);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          processInput();
        }
      }
    });
    
    // Initial stats
    updateStats();
  })();
</script>