---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Dockerfile Generator - Caiatech">
  <CaiatechToolLayout 
    title="Docker Compose Validator" 
    description="Validate Docker Compose files with syntax checking"
    icon="üê≥">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://docker</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">docker</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Paste your docker-compose.yml content here...

Example:
version: '3.8'
services:
  web:
    image: nginx:alpine
    ports:
      - '80:80'
  db:
    image: postgres:13
    environment:
      POSTGRES_PASSWORD: password"
            spellcheck="false"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="process-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">üê≥ Validate Compose</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Example</span>
          </button>
          <button id="template-btn" class="cyber-btn secondary" data-template="webapp">
            <span class="btn-text">Web App Template</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://docker.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Dockerfile Generator" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // Basic tool functionality
  (function() {
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const processBtn = document.getElementById('process-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    const templates = {
      webapp: `version: '3.8'
services:
  web:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./html:/usr/share/nginx/html
    depends_on:
      - app
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/myapp
    depends_on:
      - db
    restart: unless-stopped

  db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped

volumes:
  db_data:

networks:
  default:
    driver: bridge`,

      monitoring: `version: '3.8'
services:
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped`,

      database: `version: '3.8'
services:
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: myapp
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    restart: unless-stopped

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped

volumes:
  mysql_data:`
    };
    
    function processInput() {
      const composeContent = input.value.trim();
      if (!composeContent) {
        setStatus('Please enter Docker Compose content', 'error');
        return;
      }
      
      try {
        const result = validateDockerCompose(composeContent);
        const formattedResult = formatValidationResult(result);
        output.textContent = formattedResult;
        
        if (result.valid) {
          setStatus('‚úÖ Docker Compose file is valid!', 'success');
        } else {
          const errorCount = result.issues.filter(i => i.type === 'error').length;
          setStatus(`‚ùå Found ${errorCount} error${errorCount !== 1 ? 's' : ''}`, 'error');
        }
        updateStats();
      } catch (error) {
        setStatus('Validation failed: ' + error.message, 'error');
      }
    }
    
    function validateDockerCompose(content) {
      const issues = [];
      let parsedYaml;
      let services = 0;
      let networks = 0;
      let volumes = 0;
      
      // Parse YAML (simplified)
      try {
        parsedYaml = parseSimpleYaml(content);
      } catch (error) {
        return {
          valid: false,
          issues: [{
            type: 'error',
            title: 'YAML Syntax Error',
            description: 'Invalid YAML syntax. Check your indentation and formatting.'
          }],
          services: 0,
          networks: 0,
          volumes: 0
        };
      }
      
      // Version validation
      if (!parsedYaml.version) {
        issues.push({
          type: 'error',
          title: 'Missing version',
          description: 'Docker Compose file must specify a version.'
        });
      } else if (!parsedYaml.version.match(/^[2-3]\.\d+$/)) {
        issues.push({
          type: 'warning',
          title: 'Invalid version format',
          description: 'Version should be in format "3.x" or "2.x".'
        });
      }
      
      // Services validation
      if (!parsedYaml.services) {
        issues.push({
          type: 'error',
          title: 'No services defined',
          description: 'Docker Compose file must define at least one service.'
        });
      } else {
        services = Object.keys(parsedYaml.services).length;
        
        Object.entries(parsedYaml.services).forEach(([serviceName, serviceConfig]) => {
          // Check if service has image or build
          if (!serviceConfig.image && !serviceConfig.build) {
            issues.push({
              type: 'error',
              title: `Service "${serviceName}" missing image or build`,
              description: 'Each service must specify either an image or build context.'
            });
          }
          
          // Check for hardcoded passwords
          if (serviceConfig.environment) {
            const envCheck = JSON.stringify(serviceConfig.environment).toLowerCase();
            if (envCheck.includes('password') && envCheck.includes('=')) {
              issues.push({
                type: 'warning',
                title: `Hardcoded password in service "${serviceName}"`,
                description: 'Consider using environment files for sensitive data.'
              });
            }
          }
          
          // Check for latest tag
          if (serviceConfig.image && serviceConfig.image.includes(':latest')) {
            issues.push({
              type: 'suggestion',
              title: `Service "${serviceName}" uses "latest" tag`,
              description: 'Consider using specific version tags for reproducibility.'
            });
          }
          
          // Check for restart policy
          if (!serviceConfig.restart) {
            issues.push({
              type: 'suggestion',
              title: `Service "${serviceName}" missing restart policy`,
              description: 'Consider adding restart policy (e.g., "unless-stopped").'
            });
          }
        });
      }
      
      // Count networks and volumes
      if (parsedYaml.networks) {
        networks = Object.keys(parsedYaml.networks).length;
      }
      if (parsedYaml.volumes) {
        volumes = Object.keys(parsedYaml.volumes).length;
      }
      
      return {
        valid: issues.filter(i => i.type === 'error').length === 0,
        issues,
        services,
        networks,
        volumes
      };
    }
    
    function parseSimpleYaml(content) {
      // Simplified YAML parser for Docker Compose
      const result = {};
      const lines = content.split('\n');
      let currentPath = [];
      let currentObject = result;
      
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const trimmed = line.trim();
        
        if (!trimmed || trimmed.startsWith('#')) continue;
        
        const indent = line.length - line.trimStart().length;
        const colonIndex = trimmed.indexOf(':');
        
        if (colonIndex === -1) continue;
        
        const key = trimmed.substring(0, colonIndex).trim();
        const value = trimmed.substring(colonIndex + 1).trim();
        
        // Update current path based on indentation
        const depth = Math.floor(indent / 2);
        currentPath = currentPath.slice(0, depth);
        currentPath.push(key);
        
        // Navigate to correct object
        currentObject = result;
        for (let j = 0; j < currentPath.length - 1; j++) {
          if (!currentObject[currentPath[j]]) {
            currentObject[currentPath[j]] = {};
          }
          currentObject = currentObject[currentPath[j]];
        }
        
        // Set value
        if (value) {
          currentObject[key] = value.replace(/^['"]|['"]$/g, '');
        } else {
          currentObject[key] = {};
        }
      }
      
      return result;
    }
    
    function formatValidationResult(result) {
      let output = '';
      output += '\u250c\u2500\u2500\u2500 DOCKER COMPOSE VALIDATION \u2500\u2500\u2500\u2510\n';
      output += '\u2502                                          \u2502\n';
      
      if (result.valid) {
        output += '\u2502 \u2705 STATUS: VALID                        \u2502\n';
      } else {
        output += '\u2502 \ud83d\udeab STATUS: INVALID                      \u2502\n';
      }
      
      output += `\u2502 Services: ${result.services.toString().padEnd(27)}\u2502\n`;
      output += `\u2502 Networks: ${result.networks.toString().padEnd(27)}\u2502\n`;
      output += `\u2502 Volumes: ${result.volumes.toString().padEnd(28)}\u2502\n`;
      output += `\u2502 Issues: ${result.issues.length.toString().padEnd(29)}\u2502\n`;
      output += '\u2502                                          \u2502\n';
      output += '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n';
      
      if (result.issues.length === 0) {
        output += '\ud83c\udf89 NO ISSUES FOUND!\n';
        output += '\u2500'.repeat(40) + '\n';
        output += 'Your Docker Compose file looks great!\n';
        return output;
      }
      
      // Group issues by type
      const errors = result.issues.filter(i => i.type === 'error');
      const warnings = result.issues.filter(i => i.type === 'warning');
      const suggestions = result.issues.filter(i => i.type === 'suggestion');
      
      if (errors.length > 0) {
        output += '\ud83d\udd34 ERRORS (Must Fix):\n';
        output += '\u2500'.repeat(40) + '\n';
        errors.forEach((issue, index) => {
          output += `[${(index + 1).toString().padStart(2, '0')}] ${issue.title}\n`;
          output += `     ${issue.description}\n\n`;
        });
      }
      
      if (warnings.length > 0) {
        output += '\ud83d\udfe1 WARNINGS (Should Fix):\n';
        output += '\u2500'.repeat(40) + '\n';
        warnings.forEach((issue, index) => {
          output += `[${(index + 1).toString().padStart(2, '0')}] ${issue.title}\n`;
          output += `     ${issue.description}\n\n`;
        });
      }
      
      if (suggestions.length > 0) {
        output += '\ud83d\udfe2 SUGGESTIONS (Consider):\n';
        output += '\u2500'.repeat(40) + '\n';
        suggestions.forEach((issue, index) => {
          output += `[${(index + 1).toString().padStart(2, '0')}] ${issue.title}\n`;
          output += `     ${issue.description}\n\n`;
        });
      }
      
      // Add best practices
      output += 'BEST PRACTICES REMINDER:\n';
      output += '\u2500'.repeat(40) + '\n';
      output += '‚Ä¢ Use specific image versions (not :latest)\n';
      output += '‚Ä¢ Add restart policies to services\n';
      output += '‚Ä¢ Use environment files for secrets\n';
      output += '‚Ä¢ Define health checks for web services\n';
      output += '‚Ä¢ Use named volumes for persistent data\n';
      
      return output;
    }
    
    function loadTemplate(templateName) {
      if (templates[templateName]) {
        input.value = templates[templateName];
        setStatus(`Loaded ${templateName} template`, 'success');
        updateStats();
      }
    }
    
    function cycleTemplate() {
      const templateNames = Object.keys(templates);
      const currentTemplate = document.getElementById('template-btn').dataset.template;
      const currentIndex = templateNames.indexOf(currentTemplate);
      const nextTemplate = templateNames[(currentIndex + 1) % templateNames.length];
      
      document.getElementById('template-btn').dataset.template = nextTemplate;
      document.getElementById('template-btn').querySelector('.btn-text').textContent = 
        nextTemplate.charAt(0).toUpperCase() + nextTemplate.slice(1) + ' Template';
      
      loadTemplate(nextTemplate);
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const toolName = document.title.split(' - ')[0].toLowerCase().replace(/\s+/g, '-');
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = toolName + '-output.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      input.value = templates.webapp;
      processInput();
    }
    
    // Event listeners
    if (processBtn) processBtn.addEventListener('click', processInput);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Template cycling button
    const templateBtn = document.getElementById('template-btn');
    if (templateBtn) templateBtn.addEventListener('click', cycleTemplate);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          processInput();
        }
      }
    });
    
    // Initial stats
    updateStats();
  })();
</script>