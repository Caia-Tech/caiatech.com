---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="HTML Entity Encoder - Caiatech">
  <CaiatechToolLayout 
    title="HTML Entity Encoder" 
    description="Encode and decode HTML entities"
    icon="&">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Mode Selector -->
      <div class="mode-selector">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">MODE://conversion</span>
        </div>
        <div class="mode-container">
          <div class="mode-options">
            <label class="radio-option">
              <input type="radio" name="mode" value="encode" checked>
              <span class="radio-custom"></span>
              <span class="radio-label">Text ‚Üí HTML Entities</span>
            </label>
            <label class="radio-option">
              <input type="radio" name="mode" value="decode">
              <span class="radio-custom"></span>
              <span class="radio-label">HTML Entities ‚Üí Text</span>
            </label>
          </div>
        </div>
      </div>

      <!-- Encoding Options -->
      <div class="encoding-options">
        <h3 class="options-title">‚öôÔ∏è ENCODING OPTIONS</h3>
        <div class="option-grid">
          <label class="checkbox-option">
            <input type="checkbox" id="encode-ascii" checked>
            <span class="checkbox-custom"></span>
            <span>ASCII characters only</span>
          </label>
          <label class="checkbox-option">
            <input type="checkbox" id="use-named" checked>
            <span class="checkbox-custom"></span>
            <span>Use named entities</span>
          </label>
          <label class="checkbox-option">
            <input type="checkbox" id="encode-quotes">
            <span class="checkbox-custom"></span>
            <span>Encode quotes</span>
          </label>
          <label class="checkbox-option">
            <input type="checkbox" id="use-hex">
            <span class="checkbox-custom"></span>
            <span>Use hex format (&#x...)</span>
          </label>
        </div>
      </div>

      <!-- Input Section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title" id="input-title">INPUT://text</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <textarea 
            id="input-text" 
            class="terminal-input"
            placeholder="Enter text to encode as HTML entities..."
            spellcheck="false"
            rows="8"
          ></textarea>
          <div class="text-stats">
            <span>Chars: <span id="input-chars">0</span></span>
            <span class="stat-separator">‚Ä¢</span>
            <span>Lines: <span id="input-lines">0</span></span>
            <span class="stat-separator">‚Ä¢</span>
            <span>Entities: <span id="input-entities">0</span></span>
          </div>
        </div>
      </div>

      <!-- Convert Button -->
      <div class="conversion-arrow">
        <button id="convert-btn" class="convert-button">
          <span class="btn-glow"></span>
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M7 7l10 10M17 7v10H7"/>
          </svg>
          <span id="convert-text">ENCODE</span>
        </button>
      </div>

      <!-- Output Section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title" id="output-title">OUTPUT://entities</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <textarea 
            id="output-text" 
            class="terminal-output"
            placeholder="Converted text will appear here..."
            readonly
            rows="8"
          ></textarea>
          <div class="text-stats">
            <span>Chars: <span id="output-chars">0</span></span>
            <span class="stat-separator">‚Ä¢</span>
            <span>Lines: <span id="output-lines">0</span></span>
            <span class="stat-separator">‚Ä¢</span>
            <span>Entities: <span id="output-entities">0</span></span>
          </div>
        </div>
      </div>

      <!-- Reference Section -->
      <div class="reference-section">
        <h3 class="reference-title">üìñ HTML ENTITY REFERENCE</h3>
        <div class="entity-grid">
          <div class="entity-item" data-char="<" data-entity="&lt;">
            <span class="entity-char">&lt;</span>
            <span class="entity-code">&amp;lt;</span>
            <span class="entity-desc">Less than</span>
          </div>
          <div class="entity-item" data-char=">" data-entity="&gt;">
            <span class="entity-char">&gt;</span>
            <span class="entity-code">&amp;gt;</span>
            <span class="entity-desc">Greater than</span>
          </div>
          <div class="entity-item" data-char="&" data-entity="&amp;">
            <span class="entity-char">&amp;</span>
            <span class="entity-code">&amp;amp;</span>
            <span class="entity-desc">Ampersand</span>
          </div>
          <div class="entity-item" data-char='"' data-entity="&quot;">
            <span class="entity-char">"</span>
            <span class="entity-code">&amp;quot;</span>
            <span class="entity-desc">Quote</span>
          </div>
          <div class="entity-item" data-char="'" data-entity="&apos;">
            <span class="entity-char">'</span>
            <span class="entity-code">&amp;apos;</span>
            <span class="entity-desc">Apostrophe</span>
          </div>
          <div class="entity-item" data-char=" " data-entity="&nbsp;">
            <span class="entity-char">[space]</span>
            <span class="entity-code">&amp;nbsp;</span>
            <span class="entity-desc">Non-breaking</span>
          </div>
          <div class="entity-item" data-char="¬©" data-entity="&copy;">
            <span class="entity-char">¬©</span>
            <span class="entity-code">&amp;copy;</span>
            <span class="entity-desc">Copyright</span>
          </div>
          <div class="entity-item" data-char="¬Æ" data-entity="&reg;">
            <span class="entity-char">¬Æ</span>
            <span class="entity-code">&amp;reg;</span>
            <span class="entity-desc">Registered</span>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="HTML Entity Encoder" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
  /* Mode Selector */
  .mode-selector {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
  }

  .mode-container {
    padding: 1.5rem;
  }

  .mode-options {
    display: flex;
    gap: 1.5rem;
    flex-wrap: wrap;
  }

  .radio-option {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    cursor: pointer;
    font-family: var(--font-mono);
    color: var(--color-text);
  }

  .radio-option input[type="radio"] {
    accent-color: var(--color-accent);
  }

  .radio-custom {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(0, 212, 255, 0.3);
    border-radius: 50%;
    position: relative;
    transition: all 0.3s;
  }

  .radio-option input[type="radio"]:checked + .radio-custom {
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
  }

  .radio-option input[type="radio"]:checked + .radio-custom::after {
    content: '';
    width: 8px;
    height: 8px;
    background: var(--color-accent);
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .radio-label {
    font-size: 0.9rem;
  }

  /* Encoding Options */
  .encoding-options {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .options-title {
    margin: 0 0 1rem 0;
    color: var(--color-accent);
    font-size: 1rem;
    font-family: var(--font-mono);
    font-weight: 600;
    letter-spacing: 1px;
  }

  .option-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .checkbox-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .checkbox-option input[type="checkbox"] {
    accent-color: var(--color-accent);
  }

  .checkbox-custom {
    width: 18px;
    height: 18px;
    border: 2px solid rgba(0, 212, 255, 0.3);
    border-radius: 4px;
    position: relative;
    transition: all 0.3s;
  }

  .checkbox-option input[type="checkbox"]:checked + .checkbox-custom {
    background: var(--color-accent);
    border-color: var(--color-accent);
  }

  .checkbox-option input[type="checkbox"]:disabled ~ * {
    opacity: 0.3;
    cursor: not-allowed;
  }

  /* Text Stats */
  .text-stats {
    display: flex;
    gap: 1rem;
    margin-top: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text-secondary);
  }

  /* Convert Button */
  .conversion-arrow {
    text-align: center;
    margin: 1rem 0;
  }

  .convert-button {
    padding: 1rem 2rem;
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
    border: 2px solid var(--color-accent);
    border-radius: 8px;
    color: var(--color-accent);
    font-family: var(--font-mono);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    position: relative;
    overflow: hidden;
    transition: all 0.3s;
  }

  .convert-button:hover {
    transform: translateY(-2px);
    box-shadow: 
      0 10px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .convert-button svg {
    transition: transform 0.3s;
  }

  .convert-button:hover svg {
    transform: rotate(90deg);
  }

  /* Reference Section */
  .reference-section {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    padding: 1.5rem;
    margin-top: 2rem;
  }

  .reference-title {
    margin: 0 0 1rem 0;
    color: var(--color-accent);
    font-size: 1rem;
    font-family: var(--font-mono);
    font-weight: 600;
  }

  .entity-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 0.75rem;
  }

  .entity-item {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 6px;
    padding: 0.75rem;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.2s;
  }

  .entity-item:hover {
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
    transform: translateY(-2px);
  }

  .entity-char {
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--color-text);
  }

  .entity-code {
    color: var(--color-accent);
    font-size: 0.9rem;
  }

  .entity-desc {
    color: var(--color-text-secondary);
    font-size: 0.75rem;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .option-grid {
      grid-template-columns: 1fr;
    }

    .entity-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .mode-options {
      flex-direction: column;
    }
  }
</style>

<script>
  // HTML Entity Encoder/Decoder Implementation
  (function() {
    const inputText = document.getElementById('input-text');
    const outputText = document.getElementById('output-text');
    const modeRadios = document.querySelectorAll('input[name="mode"]');
    const encodeAsciiCheckbox = document.getElementById('encode-ascii');
    const useNamedCheckbox = document.getElementById('use-named');
    const encodeQuotesCheckbox = document.getElementById('encode-quotes');
    const useHexCheckbox = document.getElementById('use-hex');

    const inputTitle = document.getElementById('input-title');
    const outputTitle = document.getElementById('output-title');
    const convertText = document.getElementById('convert-text');
    const convertBtn = document.getElementById('convert-btn');

    const inputChars = document.getElementById('input-chars');
    const inputLines = document.getElementById('input-lines');
    const inputEntities = document.getElementById('input-entities');
    const outputChars = document.getElementById('output-chars');
    const outputLines = document.getElementById('output-lines');
    const outputEntities = document.getElementById('output-entities');

    // Common HTML entities mapping
    const namedEntities = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&apos;',
      '\u00A0': '&nbsp;',
      '\u00A9': '&copy;',
      '\u00AE': '&reg;',
      '\u2122': '&trade;',
      '\u00C0': '&Agrave;',
      '\u00C1': '&Aacute;',
      '\u00C2': '&Acirc;',
      '\u00C3': '&Atilde;',
      '\u00C4': '&Auml;',
      '\u00C5': '&Aring;',
      '\u00C6': '&AElig;',
      '\u00C7': '&Ccedil;',
      '\u00C8': '&Egrave;',
      '\u00C9': '&Eacute;',
      '\u00CA': '&Ecirc;',
      '\u00CB': '&Euml;',
      '\u00CC': '&Igrave;',
      '\u00CD': '&Iacute;',
      '\u00CE': '&Icirc;',
      '\u00CF': '&Iuml;',
      '\u00D1': '&Ntilde;',
      '\u00D2': '&Ograve;',
      '\u00D3': '&Oacute;',
      '\u00D4': '&Ocirc;',
      '\u00D5': '&Otilde;',
      '\u00D6': '&Ouml;',
      '\u00D8': '&Oslash;',
      '\u00D9': '&Ugrave;',
      '\u00DA': '&Uacute;',
      '\u00DB': '&Ucirc;',
      '\u00DC': '&Uuml;',
      '\u00DD': '&Yacute;',
      '\u00DF': '&szlig;',
      '\u00E0': '&agrave;',
      '\u00E1': '&aacute;',
      '\u00E2': '&acirc;',
      '\u00E3': '&atilde;',
      '\u00E4': '&auml;',
      '\u00E5': '&aring;',
      '\u00E6': '&aelig;',
      '\u00E7': '&ccedil;',
      '\u00E8': '&egrave;',
      '\u00E9': '&eacute;',
      '\u00EA': '&ecirc;',
      '\u00EB': '&euml;',
      '\u00EC': '&igrave;',
      '\u00ED': '&iacute;',
      '\u00EE': '&icirc;',
      '\u00EF': '&iuml;',
      '\u00F1': '&ntilde;',
      '\u00F2': '&ograve;',
      '\u00F3': '&oacute;',
      '\u00F4': '&ocirc;',
      '\u00F5': '&otilde;',
      '\u00F6': '&ouml;',
      '\u00F8': '&oslash;',
      '\u00F9': '&ugrave;',
      '\u00FA': '&uacute;',
      '\u00FB': '&ucirc;',
      '\u00FC': '&uuml;',
      '\u00FD': '&yacute;',
      '\u00FF': '&yuml;',
      '\u2013': '&ndash;',
      '\u2014': '&mdash;',
      '\u2018': '&lsquo;',
      '\u2019': '&rsquo;',
      '\u201C': '&ldquo;',
      '\u201D': '&rdquo;',
      '\u2026': '&hellip;',
      '\u20AC': '&euro;',
      '\u00A2': '&cent;',
      '\u00A3': '&pound;',
      '\u00A5': '&yen;'
    };

    // Reverse mapping for decoding
    const reverseNamedEntities = {};
    Object.entries(namedEntities).forEach(([char, entity]) => {
      reverseNamedEntities[entity] = char;
    });

    function encodeHtmlEntities(text) {
      const encodeAscii = encodeAsciiCheckbox.checked;
      const useNamed = useNamedCheckbox.checked;
      const encodeQuotes = encodeQuotesCheckbox.checked;
      const useHex = useHexCheckbox.checked;

      return text.replace(/./g, (char) => {
        const code = char.charCodeAt(0);

        // Always encode basic HTML characters
        if (char === '&') return '&amp;';
        if (char === '<') return '&lt;';
        if (char === '>') return '&gt;';

        // Conditionally encode quotes
        if (encodeQuotes) {
          if (char === '"') return '&quot;';
          if (char === "'") return '&apos;';
        }

        // Check if character needs encoding
        if (encodeAscii && code > 127) {
          // Try named entity first if enabled
          if (useNamed && namedEntities[char]) {
            return namedEntities[char];
          }
          // Use numeric entity
          if (useHex) {
            return `&#x${code.toString(16)};`;
          } else {
            return `&#${code};`;
          }
        } else if (!encodeAscii && useNamed && namedEntities[char]) {
          return namedEntities[char];
        }

        return char;
      });
    }

    function decodeHtmlEntities(text) {
      return text
        .replace(/&([a-zA-Z][a-zA-Z0-9]*);/g, (match, name) => {
          const entity = `&${name};`;
          return reverseNamedEntities[entity] || match;
        })
        .replace(/&#x([0-9a-fA-F]+);/g, (match, hex) => {
          const code = parseInt(hex, 16);
          return isNaN(code) ? match : String.fromCharCode(code);
        })
        .replace(/&#(\d+);/g, (match, decimal) => {
          const code = parseInt(decimal, 10);
          return isNaN(code) ? match : String.fromCharCode(code);
        });
    }

    function countEntities(text) {
      const namedEntityCount = (text.match(/&[a-zA-Z][a-zA-Z0-9]*;/g) || []).length;
      const hexEntityCount = (text.match(/&#x[0-9a-fA-F]+;/g) || []).length;
      const decimalEntityCount = (text.match(/&#\d+;/g) || []).length;
      return namedEntityCount + hexEntityCount + decimalEntityCount;
    }

    function updateStats(textArea, charsEl, linesEl, entitiesEl) {
      const text = textArea.value;
      const chars = text.length;
      const lines = text ? text.split('\n').length : 0;
      const entities = countEntities(text);

      charsEl.textContent = chars;
      linesEl.textContent = lines;
      entitiesEl.textContent = entities;
    }

    function updateUI() {
      const mode = document.querySelector('input[name="mode"]:checked');
      const isEncode = mode?.value === 'encode';

      inputTitle.textContent = isEncode ? 'INPUT://text' : 'INPUT://entities';
      outputTitle.textContent = isEncode ? 'OUTPUT://entities' : 'OUTPUT://text';
      convertText.textContent = isEncode ? 'ENCODE' : 'DECODE';

      inputText.placeholder = isEncode 
        ? 'Enter text to encode as HTML entities...'
        : 'Enter HTML entities to decode...';

      outputText.placeholder = isEncode
        ? 'Encoded HTML entities will appear here...'
        : 'Decoded text will appear here...';

      // Enable/disable encoding options based on mode
      const encodingInputs = document.querySelectorAll('.encoding-options input');
      encodingInputs.forEach(input => {
        input.disabled = !isEncode;
      });
    }

    function performConversion() {
      const mode = document.querySelector('input[name="mode"]:checked');
      const isEncode = mode?.value === 'encode';
      const input = inputText.value;

      if (!input.trim()) {
        outputText.value = '';
        updateStats(outputText, outputChars, outputLines, outputEntities);
        return;
      }

      let result;
      if (isEncode) {
        result = encodeHtmlEntities(input);
      } else {
        result = decodeHtmlEntities(input);
      }

      outputText.value = result;
      updateStats(outputText, outputChars, outputLines, outputEntities);
    }

    // Event listeners
    inputText?.addEventListener('input', () => {
      updateStats(inputText, inputChars, inputLines, inputEntities);
      performConversion();
    });

    modeRadios.forEach(radio => {
      radio.addEventListener('change', () => {
        updateUI();
        performConversion();
      });
    });

    [encodeAsciiCheckbox, useNamedCheckbox, encodeQuotesCheckbox, useHexCheckbox].forEach(checkbox => {
      checkbox?.addEventListener('change', performConversion);
    });

    convertBtn?.addEventListener('click', performConversion);

    document.getElementById('clear-input-btn')?.addEventListener('click', () => {
      inputText.value = '';
      outputText.value = '';
      updateStats(inputText, inputChars, inputLines, inputEntities);
      updateStats(outputText, outputChars, outputLines, outputEntities);
      inputText.focus();
    });

    document.getElementById('paste-btn')?.addEventListener('click', async () => {
      try {
        const text = await navigator.clipboard.readText();
        inputText.value = text;
        updateStats(inputText, inputChars, inputLines, inputEntities);
        performConversion();
      } catch (err) {
        console.error('Failed to paste:', err);
      }
    });

    document.getElementById('copy-output-btn')?.addEventListener('click', async () => {
      const text = outputText.value;
      if (text) {
        try {
          await navigator.clipboard.writeText(text);
        } catch (err) {
          console.error('Failed to copy:', err);
        }
      }
    });

    document.getElementById('download-btn')?.addEventListener('click', () => {
      const text = outputText.value;
      if (text) {
        const blob = new Blob([text], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'entities-output.txt';
        a.click();
        URL.revokeObjectURL(url);
      }
    });

    // Entity reference click to insert
    document.querySelectorAll('.entity-item').forEach(item => {
      item.addEventListener('click', () => {
        const mode = document.querySelector('input[name="mode"]:checked');
        const isEncode = mode?.value === 'encode';
        
        const char = item.getAttribute('data-char');
        const entity = item.getAttribute('data-entity');
        
        const textToInsert = isEncode ? char : entity;
        const cursorPos = inputText.selectionStart;
        const currentValue = inputText.value;
        const newValue = currentValue.slice(0, cursorPos) + textToInsert + currentValue.slice(cursorPos);
        
        inputText.value = newValue;
        inputText.focus();
        inputText.setSelectionRange(cursorPos + textToInsert.length, cursorPos + textToInsert.length);
        
        updateStats(inputText, inputChars, inputLines, inputEntities);
        performConversion();
      });
    });

    // Initialize
    updateUI();
    updateStats(inputText, inputChars, inputLines, inputEntities);
    updateStats(outputText, outputChars, outputLines, outputEntities);
  })();
</script>