---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Password Generator - Caiatech">
  <CaiatechToolLayout 
    title="Password Generator" 
    description="Create strong, secure passwords"
    icon="🔐">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="password-tool">
      <!-- Options Panel -->
      <div class="terminal-panel options-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">CONFIG://password_settings</span>
        </div>
        <div class="terminal-body">
          <!-- Length Section -->
          <div class="option-group">
            <label>Length: <span id="length-value">16</span></label>
            <input type="range" id="length-slider" min="4" max="128" value="16" class="length-slider">
            <div class="length-presets">
              <button class="preset-btn" data-length="8">8</button>
              <button class="preset-btn" data-length="12">12</button>
              <button class="preset-btn active" data-length="16">16</button>
              <button class="preset-btn" data-length="20">20</button>
              <button class="preset-btn" data-length="32">32</button>
            </div>
          </div>

          <!-- Character Sets -->
          <div class="option-group">
            <h4>Character Sets</h4>
            <div class="checkbox-grid">
              <label class="checkbox-option">
                <input type="checkbox" id="uppercase" checked>
                <span class="checkmark"></span>
                <span class="label-text">Uppercase (A-Z)</span>
              </label>
              
              <label class="checkbox-option">
                <input type="checkbox" id="lowercase" checked>
                <span class="checkmark"></span>
                <span class="label-text">Lowercase (a-z)</span>
              </label>
              
              <label class="checkbox-option">
                <input type="checkbox" id="numbers" checked>
                <span class="checkmark"></span>
                <span class="label-text">Numbers (0-9)</span>
              </label>
              
              <label class="checkbox-option">
                <input type="checkbox" id="symbols" checked>
                <span class="checkmark"></span>
                <span class="label-text">Symbols (!@#$...)</span>
              </label>
            </div>
          </div>

          <!-- Advanced Options -->
          <div class="option-group">
            <h4>Advanced Options</h4>
            <div class="checkbox-grid">
              <label class="checkbox-option">
                <input type="checkbox" id="exclude-similar">
                <span class="checkmark"></span>
                <span class="label-text">Exclude Similar (0Ol1I)</span>
              </label>
              
              <label class="checkbox-option">
                <input type="checkbox" id="exclude-ambiguous">
                <span class="checkmark"></span>
                <span class="label-text">Exclude Ambiguous</span>
              </label>
            </div>
          </div>
        </div>
      </div>

      <!-- Generator Panel -->
      <div class="terminal-panel generator-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://generated_password</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="toggle-visibility-btn" title="Toggle Visibility">
              <svg id="eye-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                <circle cx="12" cy="12" r="3"/>
              </svg>
              <svg id="eye-off-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;">
                <path d="M17.94 17.94A10.07 10.07 0 0112 20c-7 0-11-8-11-8a18.45 18.45 0 015.06-5.94M9.9 4.24A9.12 9.12 0 0112 4c7 0 11 8 11 8a18.5 18.5 0 01-2.16 3.19m-6.72-1.07a3 3 0 11-4.24-4.24"/>
                <line x1="1" y1="1" x2="23" y2="23"/>
              </svg>
            </button>
            <button class="terminal-action" id="copy-password-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="password-section">
            <input type="password" id="generated-password" class="password-output" readonly>
            <button id="generate-btn" class="cyber-btn primary">
              <span class="btn-glow"></span>
              <span class="btn-text">Generate Password</span>
            </button>
          </div>

          <!-- Strength Meter -->
          <div class="strength-section">
            <div class="strength-header">
              <span class="strength-label" id="strength-label">Weak</span>
              <span class="strength-score" id="strength-score">Score: 0/100</span>
            </div>
            <div class="strength-bar-container">
              <div class="strength-bar" id="strength-bar"></div>
            </div>
            <div class="strength-feedback" id="strength-feedback"></div>
          </div>

          <!-- Multiple Passwords -->
          <div class="multiple-section">
            <div class="multiple-actions">
              <button id="generate-multiple-btn" class="cyber-btn secondary">Generate 5</button>
              <button id="copy-all-passwords-btn" class="cyber-btn secondary">Copy All</button>
            </div>
            <div id="multiple-passwords" class="multiple-passwords"></div>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Password Generator" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .password-tool {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
  }
  
  @media (max-width: 768px) {
    .password-tool {
      grid-template-columns: 1fr;
    }
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Password-specific styles */
  .option-group {
    margin-bottom: 1.5rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid rgba(0, 212, 255, 0.1);
  }
  
  .option-group:last-child {
    border-bottom: none;
    margin-bottom: 0;
  }
  
  .option-group label:first-child {
    display: block;
    margin-bottom: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 1px;
  }
  
  .option-group h4 {
    margin: 0 0 1rem 0;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 1px;
  }
  
  /* Length Slider */
  .length-slider {
    width: 100%;
    margin-bottom: 1rem;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 4px;
    appearance: none;
    height: 6px;
  }
  
  .length-slider::-webkit-slider-thumb {
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--color-accent);
    cursor: pointer;
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
  }
  
  .length-presets {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
  }
  
  .preset-btn {
    padding: 0.5rem 1rem;
    border: 1px solid rgba(0, 212, 255, 0.3);
    border-radius: 4px;
    background: transparent;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .preset-btn:hover {
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }
  
  .preset-btn.active {
    background: var(--color-accent);
    color: var(--color-bg);
    border-color: var(--color-accent);
  }
  
  /* Checkboxes */
  .checkbox-grid {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .checkbox-option {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    cursor: pointer;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text);
    transition: all 0.2s;
  }
  
  .checkbox-option:hover {
    color: var(--color-accent);
  }
  
  .checkbox-option input[type="checkbox"] {
    display: none;
  }
  
  .checkmark {
    width: 18px;
    height: 18px;
    border: 2px solid rgba(0, 212, 255, 0.3);
    border-radius: 3px;
    background: transparent;
    transition: all 0.2s;
    position: relative;
    flex-shrink: 0;
  }
  
  .checkbox-option input[type="checkbox"]:checked + .checkmark {
    background: var(--color-accent);
    border-color: var(--color-accent);
  }
  
  .checkbox-option input[type="checkbox"]:checked + .checkmark::after {
    content: '✓';
    position: absolute;
    top: -2px;
    left: 2px;
    color: var(--color-bg);
    font-size: 14px;
    font-weight: bold;
  }
  
  /* Password Output */
  .password-section {
    margin-bottom: 1.5rem;
  }
  
  .password-output {
    width: 100%;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 1.1rem;
    padding: 1rem;
    margin-bottom: 1rem;
    text-align: center;
    letter-spacing: 2px;
    transition: all 0.3s;
  }
  
  .password-output:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
  }
  
  /* Strength Meter */
  .strength-section {
    margin-bottom: 1.5rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 6px;
    padding: 1rem;
  }
  
  .strength-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
  }
  
  .strength-label {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    font-weight: bold;
    text-transform: uppercase;
  }
  
  .strength-score {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text-secondary);
  }
  
  .strength-bar-container {
    width: 100%;
    height: 8px;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 4px;
    margin-bottom: 0.75rem;
    overflow: hidden;
  }
  
  .strength-bar {
    height: 100%;
    width: 0%;
    background: #f44336;
    transition: all 0.3s;
    border-radius: 4px;
  }
  
  .strength-feedback {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    font-size: 0.75rem;
    font-family: var(--font-mono);
  }
  
  .feedback-item.positive {
    color: #4caf50;
  }
  
  .feedback-item.negative {
    color: #f44336;
  }
  
  /* Multiple Passwords */
  .multiple-section {
    margin-top: 1.5rem;
  }
  
  .multiple-actions {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
  }
  
  .multiple-passwords {
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 6px;
    padding: 1rem;
    min-height: 150px;
    max-height: 300px;
    overflow-y: auto;
  }
  
  .password-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.5rem;
    margin-bottom: 0.5rem;
    background: rgba(0, 212, 255, 0.05);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 4px;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    letter-spacing: 1px;
  }
  
  .password-text {
    color: var(--color-text);
    flex: 1;
    word-break: break-all;
  }
  
  .copy-single-btn {
    background: transparent;
    border: 1px solid rgba(0, 212, 255, 0.3);
    color: var(--color-accent);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
    margin-left: 1rem;
  }
  
  .copy-single-btn:hover {
    background: rgba(0, 212, 255, 0.1);
    border-color: var(--color-accent);
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
    
    .length-presets {
      flex-wrap: wrap;
    }
    
    .multiple-actions {
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .password-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
    
    .copy-single-btn {
      margin-left: 0;
    }
  }
</style>

<script>
  // Password Generator - JavaScript Implementation
  const lengthSlider = document.getElementById('length-slider');
  const lengthValue = document.getElementById('length-value');
  const uppercaseCheck = document.getElementById('uppercase');
  const lowercaseCheck = document.getElementById('lowercase');
  const numbersCheck = document.getElementById('numbers');
  const symbolsCheck = document.getElementById('symbols');
  const excludeSimilarCheck = document.getElementById('exclude-similar');
  const excludeAmbiguousCheck = document.getElementById('exclude-ambiguous');
  
  const generatedPassword = document.getElementById('generated-password');
  const strengthBar = document.getElementById('strength-bar');
  const strengthLabel = document.getElementById('strength-label');
  const strengthScore = document.getElementById('strength-score');
  const strengthFeedback = document.getElementById('strength-feedback');
  const multiplePasswords = document.getElementById('multiple-passwords');

  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const lowercase = 'abcdefghijklmnopqrstuvwxyz';
  const numbers = '0123456789';
  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';
  const similarChars = '0Ol1I';
  const ambiguousSymbols = '{}[]()\/~,;.<>';

  let isPasswordVisible = false;

  function updateLengthDisplay() {
    if (lengthValue) lengthValue.textContent = lengthSlider.value;
  }

  function getCharacterSet() {
    let charset = '';
    
    if (uppercaseCheck && uppercaseCheck.checked) charset += uppercase;
    if (lowercaseCheck && lowercaseCheck.checked) charset += lowercase;
    if (numbersCheck && numbersCheck.checked) charset += numbers;
    if (symbolsCheck && symbolsCheck.checked) charset += symbols;
    
    if (excludeSimilarCheck && excludeSimilarCheck.checked) {
      charset = charset.split('').filter(char => !similarChars.includes(char)).join('');
    }
    
    if (excludeAmbiguousCheck && excludeAmbiguousCheck.checked) {
      charset = charset.split('').filter(char => !ambiguousSymbols.includes(char)).join('');
    }
    
    return charset;
  }

  function generateSecurePassword(length, charset) {
    if (charset.length === 0) return '';
    
    const array = new Uint32Array(length);
    crypto.getRandomValues(array);
    
    let password = '';
    for (let i = 0; i < length; i++) {
      password += charset[array[i] % charset.length];
    }
    
    return password;
  }

  function calculatePasswordStrength(password) {
    let score = 0;
    const feedback = [];
    
    // Length scoring
    if (password.length >= 8) {
      score += 20;
      feedback.push('✓ Sufficient length');
    } else {
      feedback.push('✗ Too short (minimum 8 characters recommended)');
    }
    
    if (password.length >= 12) score += 10;
    if (password.length >= 16) score += 10;
    if (password.length >= 20) score += 5;
    
    // Character type scoring
    if (/[a-z]/.test(password)) {
      score += 15;
      feedback.push('✓ Contains lowercase letters');
    } else {
      feedback.push('✗ Missing lowercase letters');
    }
    
    if (/[A-Z]/.test(password)) {
      score += 15;
      feedback.push('✓ Contains uppercase letters');
    } else {
      feedback.push('✗ Missing uppercase letters');
    }
    
    if (/[0-9]/.test(password)) {
      score += 15;
      feedback.push('✓ Contains numbers');
    } else {
      feedback.push('✗ Missing numbers');
    }
    
    if (/[^A-Za-z0-9]/.test(password)) {
      score += 15;
      feedback.push('✓ Contains symbols');
    } else {
      feedback.push('✗ Missing symbols');
    }
    
    // Diversity bonus
    const uniqueChars = new Set(password).size;
    const diversity = uniqueChars / password.length;
    if (diversity > 0.7) score += 10;
    
    return { score: Math.min(score, 100), feedback };
  }

  function updateStrengthMeter(password) {
    const { score, feedback } = calculatePasswordStrength(password);
    
    // Update strength bar
    if (strengthBar) {
      strengthBar.style.width = `${score}%`;
      
      if (score <= 40) {
        strengthBar.style.background = '#f44336';
        if (strengthLabel) {
          strengthLabel.textContent = 'Weak';
          strengthLabel.style.color = '#f44336';
        }
      } else if (score <= 60) {
        strengthBar.style.background = '#ff9800';
        if (strengthLabel) {
          strengthLabel.textContent = 'Fair';
          strengthLabel.style.color = '#ff9800';
        }
      } else if (score <= 80) {
        strengthBar.style.background = '#4caf50';
        if (strengthLabel) {
          strengthLabel.textContent = 'Good';
          strengthLabel.style.color = '#4caf50';
        }
      } else {
        strengthBar.style.background = '#2196f3';
        if (strengthLabel) {
          strengthLabel.textContent = 'Very Strong';
          strengthLabel.style.color = '#2196f3';
        }
      }
    }
    
    if (strengthScore) strengthScore.textContent = `Score: ${score}/100`;
    
    if (strengthFeedback) {
      strengthFeedback.innerHTML = feedback.map(item => 
        `<div class="feedback-item ${item.startsWith('✓') ? 'positive' : 'negative'}">${item}</div>`
      ).join('');
    }
  }

  function generatePassword() {
    const length = parseInt(lengthSlider.value);
    const charset = getCharacterSet();
    
    if (charset.length === 0) {
      alert('Please select at least one character type.');
      return;
    }
    
    const password = generateSecurePassword(length, charset);
    if (generatedPassword) {
      generatedPassword.value = password;
      generatedPassword.type = isPasswordVisible ? 'text' : 'password';
    }
    
    updateStrengthMeter(password);
  }

  function generateMultiplePasswords() {
    const passwords = [];
    const charset = getCharacterSet();
    const length = parseInt(lengthSlider.value);
    
    if (charset.length === 0) {
      alert('Please select at least one character type.');
      return;
    }
    
    for (let i = 0; i < 5; i++) {
      passwords.push(generateSecurePassword(length, charset));
    }
    
    if (multiplePasswords) {
      const html = passwords.map((pwd, index) => `
        <div class="password-item">
          <span class="password-text">${pwd}</span>
          <button class="copy-single-btn" data-password="${pwd}">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
              <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
            </svg>
          </button>
        </div>
      `).join('');
      
      multiplePasswords.innerHTML = html;
      
      // Add event listeners to copy buttons
      multiplePasswords.querySelectorAll('.copy-single-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          const password = e.target.closest('.copy-single-btn').getAttribute('data-password');
          if (password) {
            try {
              await navigator.clipboard.writeText(password);
              e.target.innerHTML = '✓';
              setTimeout(() => {
                e.target.innerHTML = `
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                  </svg>
                `;
              }, 2000);
            } catch (err) {
              console.error('Failed to copy:', err);
            }
          }
        });
      });
    }
  }

  // Event listeners
  if (lengthSlider) lengthSlider.addEventListener('input', updateLengthDisplay);
  
  [uppercaseCheck, lowercaseCheck, numbersCheck, symbolsCheck, 
   excludeSimilarCheck, excludeAmbiguousCheck].forEach(checkbox => {
    if (checkbox) checkbox.addEventListener('change', generatePassword);
  });

  const generateBtn = document.getElementById('generate-btn');
  if (generateBtn) generateBtn.addEventListener('click', generatePassword);
  
  const generateMultipleBtn = document.getElementById('generate-multiple-btn');
  if (generateMultipleBtn) generateMultipleBtn.addEventListener('click', generateMultiplePasswords);

  // Length presets
  document.querySelectorAll('.preset-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      document.querySelectorAll('.preset-btn').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      const length = e.target.getAttribute('data-length');
      if (lengthSlider) lengthSlider.value = length;
      updateLengthDisplay();
      generatePassword();
    });
  });

  // Copy password
  const copyPasswordBtn = document.getElementById('copy-password-btn');
  if (copyPasswordBtn) {
    copyPasswordBtn.addEventListener('click', async () => {
      const password = generatedPassword.value;
      if (password) {
        try {
          await navigator.clipboard.writeText(password);
          copyPasswordBtn.innerHTML = '✓';
          setTimeout(() => {
            copyPasswordBtn.innerHTML = `
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            `;
          }, 2000);
        } catch (err) {
          console.error('Failed to copy:', err);
        }
      }
    });
  }

  // Toggle visibility
  const toggleVisibilityBtn = document.getElementById('toggle-visibility-btn');
  if (toggleVisibilityBtn) {
    toggleVisibilityBtn.addEventListener('click', () => {
      isPasswordVisible = !isPasswordVisible;
      const eyeIcon = document.getElementById('eye-icon');
      const eyeOffIcon = document.getElementById('eye-off-icon');
      
      if (generatedPassword) {
        generatedPassword.type = isPasswordVisible ? 'text' : 'password';
      }
      
      if (eyeIcon && eyeOffIcon) {
        eyeIcon.style.display = isPasswordVisible ? 'none' : 'block';
        eyeOffIcon.style.display = isPasswordVisible ? 'block' : 'none';
      }
    });
  }

  // Copy all passwords
  const copyAllPasswordsBtn = document.getElementById('copy-all-passwords-btn');
  if (copyAllPasswordsBtn) {
    copyAllPasswordsBtn.addEventListener('click', async () => {
      const passwords = Array.from(multiplePasswords.querySelectorAll('.password-text') || [])
        .map(el => el.textContent)
        .filter(Boolean)
        .join('\n');
      
      if (passwords) {
        try {
          await navigator.clipboard.writeText(passwords);
          const originalText = copyAllPasswordsBtn.textContent;
          copyAllPasswordsBtn.textContent = 'Copied!';
          setTimeout(() => {
            copyAllPasswordsBtn.textContent = originalText;
          }, 2000);
        } catch (err) {
          console.error('Failed to copy:', err);
        }
      }
    });
  }

  // Initialize
  updateLengthDisplay();
  generatePassword();
  if (multiplePasswords) {
    multiplePasswords.innerHTML = '<div style="text-align: center; color: #666; padding: 2rem; font-family: var(--font-mono);">Click "Generate 5" to create multiple passwords</div>';
  }
</script>