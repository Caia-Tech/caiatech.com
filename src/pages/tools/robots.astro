---
/**
 * @fileoverview Robots.txt Generator - Caiatech Developer Tools
 * @author Caiatech (https://caiatech.com)
 * @copyright 2024 Caiatech. All rights reserved.
 * @website https://caiatech.com/tools/robots
 * @description Professional robots.txt file generator with templates and validation.
 *              Create SEO-optimized robots.txt files for your website.
 * @company Caiatech - Enterprise Developer Tools & Solutions
 * @version 1.0.0
 */

import BaseLayout from '../../layouts/BaseLayout.astro';
import ToolLayout from '../../components/tools/ToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';

const seoDescription = "Free Robots.txt Generator by Caiatech. Create SEO-optimized robots.txt files with templates. Control web crawler access to your site. Professional developer tool from caiatech.com.";
const seoKeywords = "robots.txt generator, robots file creator, SEO tools, web crawler control, sitemap reference, Caiatech, caiatech.com, developer tools, web development";
---

<BaseLayout 
  title="Robots.txt Generator - Caiatech Developer Tools"
  description={seoDescription}
  keywords={seoKeywords}
  author="Caiatech"
  canonical="https://caiatech.com/tools/robots">
  <ToolLayout 
    title="Robots.txt Generator"
    description="Generate robots.txt files to control web crawler access to your website. Create SEO-optimized directives with templates and best practices.">
    
    <PrivacyBadge />
    
    <div class="robots-generator">
      <div class="template-section">
        <h3>üéØ Quick Templates</h3>
        <div class="template-grid">
          <button class="template-btn" data-template="allow-all">
            <span class="template-icon">‚úÖ</span>
            <span class="template-name">Allow All</span>
            <span class="template-desc">Allow all crawlers</span>
          </button>
          <button class="template-btn" data-template="block-all">
            <span class="template-icon">üö´</span>
            <span class="template-name">Block All</span>
            <span class="template-desc">Block all crawlers</span>
          </button>
          <button class="template-btn" data-template="wordpress">
            <span class="template-icon">üìù</span>
            <span class="template-name">WordPress</span>
            <span class="template-desc">WordPress sites</span>
          </button>
          <button class="template-btn" data-template="ecommerce">
            <span class="template-icon">üõí</span>
            <span class="template-name">E-commerce</span>
            <span class="template-desc">Online stores</span>
          </button>
          <button class="template-btn" data-template="privacy">
            <span class="template-icon">üîí</span>
            <span class="template-name">Privacy Focus</span>
            <span class="template-desc">Block sensitive areas</span>
          </button>
          <button class="template-btn" data-template="custom">
            <span class="template-icon">‚öôÔ∏è</span>
            <span class="template-name">Custom</span>
            <span class="template-desc">Start from scratch</span>
          </button>
        </div>
      </div>

      <div class="builder-section">
        <h3>ü§ñ User Agents (Crawlers)</h3>
        <div class="agents-container">
          <div class="agent-group" id="agent-groups">
            <div class="agent-item">
              <select class="agent-select">
                <option value="*">All crawlers (*)</option>
                <option value="Googlebot">Googlebot</option>
                <option value="Googlebot-Image">Googlebot Images</option>
                <option value="Googlebot-News">Googlebot News</option>
                <option value="Googlebot-Video">Googlebot Video</option>
                <option value="Bingbot">Bingbot (Microsoft)</option>
                <option value="Slurp">Yahoo Slurp</option>
                <option value="DuckDuckBot">DuckDuckBot</option>
                <option value="Baiduspider">Baiduspider (Baidu)</option>
                <option value="YandexBot">YandexBot (Yandex)</option>
                <option value="facebookexternalhit">Facebook</option>
                <option value="Twitterbot">Twitter</option>
                <option value="LinkedInBot">LinkedIn</option>
                <option value="WhatsApp">WhatsApp</option>
                <option value="Applebot">Applebot (Apple)</option>
                <option value="AhrefsBot">AhrefsBot</option>
                <option value="SemrushBot">SemrushBot</option>
                <option value="DotBot">DotBot (Moz)</option>
                <option value="MJ12bot">MJ12bot (Majestic)</option>
                <option value="ChatGPT-User">ChatGPT</option>
                <option value="GPTBot">GPTBot (OpenAI)</option>
                <option value="CCBot">CCBot (Common Crawl)</option>
                <option value="custom">Custom...</option>
              </select>
              <input type="text" class="custom-agent" placeholder="Enter custom user-agent" style="display: none;">
              <button class="remove-agent" style="display: none;">Remove</button>
            </div>
          </div>
          <button id="add-agent" class="btn-secondary">+ Add Another Crawler</button>
        </div>

        <div class="rules-section">
          <h3>üìã Rules for Selected Crawler</h3>
          <div class="rules-container">
            <div class="rule-type">
              <h4>Disallow Paths (Block Access)</h4>
              <div class="paths-list" id="disallow-paths">
                <div class="path-item">
                  <input type="text" placeholder="/admin/" class="path-input">
                  <button class="remove-path">√ó</button>
                </div>
              </div>
              <button class="add-path btn-small" data-type="disallow">+ Add Path</button>
            </div>

            <div class="rule-type">
              <h4>Allow Paths (Explicitly Allow)</h4>
              <div class="paths-list" id="allow-paths">
                <div class="path-item">
                  <input type="text" placeholder="/public/" class="path-input">
                  <button class="remove-path">√ó</button>
                </div>
              </div>
              <button class="add-path btn-small" data-type="allow">+ Add Path</button>
            </div>

            <div class="rule-type">
              <h4>Crawl Delay (seconds)</h4>
              <input type="number" id="crawl-delay" min="0" max="86400" placeholder="10" class="delay-input">
              <span class="hint">Time between requests (not all crawlers respect this)</span>
            </div>
          </div>
        </div>

        <div class="sitemap-section">
          <h3>üó∫Ô∏è Sitemaps</h3>
          <div class="sitemaps-list" id="sitemaps">
            <div class="sitemap-item">
              <input type="text" placeholder="https://example.com/sitemap.xml" class="sitemap-input">
              <button class="remove-sitemap">√ó</button>
            </div>
          </div>
          <button id="add-sitemap" class="btn-small">+ Add Sitemap</button>
        </div>

        <div class="host-section">
          <h3>üåê Host Directive (Optional)</h3>
          <input type="text" id="host-input" placeholder="https://www.example.com" class="host-input">
          <span class="hint">Preferred host for Yandex (deprecated by Google)</span>
        </div>
      </div>

      <div class="output-section">
        <div class="output-header">
          <h3>üìÑ Generated robots.txt</h3>
          <div class="output-actions">
            <button id="validate-btn" class="btn-secondary">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="9 11 12 14 22 4"/>
                <path d="M21 12v7a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h11"/>
              </svg>
              Validate
            </button>
            <button id="copy-btn" class="btn-secondary">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
              </svg>
              Copy
            </button>
            <button id="download-btn" class="btn-primary">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
              Download
            </button>
          </div>
        </div>
        <textarea id="output" readonly class="output-text" placeholder="Your robots.txt will appear here..."></textarea>
        <div class="validation-result" id="validation-result" style="display: none;"></div>
      </div>

      <div class="common-paths">
        <h3>üí° Common Paths to Consider</h3>
        <div class="paths-grid">
          <div class="path-category">
            <h4>üîí Security & Privacy</h4>
            <ul>
              <li><code>/admin/</code> - Admin area</li>
              <li><code>/wp-admin/</code> - WordPress admin</li>
              <li><code>/private/</code> - Private files</li>
              <li><code>/config/</code> - Configuration</li>
              <li><code>/.git/</code> - Git repository</li>
              <li><code>/.env</code> - Environment files</li>
            </ul>
          </div>
          <div class="path-category">
            <h4>üõí E-commerce</h4>
            <ul>
              <li><code>/cart/</code> - Shopping cart</li>
              <li><code>/checkout/</code> - Checkout pages</li>
              <li><code>/account/</code> - User accounts</li>
              <li><code>/order/</code> - Order pages</li>
              <li><code>/search?</code> - Search results</li>
              <li><code>/*?sort=</code> - Sorted pages</li>
            </ul>
          </div>
          <div class="path-category">
            <h4>‚öôÔ∏è Technical</h4>
            <ul>
              <li><code>/api/</code> - API endpoints</li>
              <li><code>/cgi-bin/</code> - CGI scripts</li>
              <li><code>/tmp/</code> - Temporary files</li>
              <li><code>/backup/</code> - Backup files</li>
              <li><code>*.sql</code> - Database dumps</li>
              <li><code>*.log</code> - Log files</li>
            </ul>
          </div>
          <div class="path-category">
            <h4>üìÑ Content</h4>
            <ul>
              <li><code>/tag/</code> - Tag pages</li>
              <li><code>/category/</code> - Categories</li>
              <li><code>/page/</code> - Pagination</li>
              <li><code>/feed/</code> - RSS feeds</li>
              <li><code>/*?print</code> - Print versions</li>
              <li><code>/*?replytocom</code> - Comments</li>
            </ul>
          </div>
        </div>
      </div>

      <div class="best-practices">
        <h3>üìö Best Practices</h3>
        <div class="practices-grid">
          <div class="practice-card">
            <h4>‚úÖ Do's</h4>
            <ul>
              <li>Test with Google Search Console</li>
              <li>Include sitemap reference</li>
              <li>Use specific paths over wildcards</li>
              <li>Place robots.txt in root directory</li>
              <li>Keep file under 500KB</li>
              <li>Use UTF-8 encoding</li>
            </ul>
          </div>
          <div class="practice-card">
            <h4>‚ùå Don'ts</h4>
            <ul>
              <li>Don't block CSS/JS files needed for rendering</li>
              <li>Don't use robots.txt for security</li>
              <li>Don't list sensitive URLs</li>
              <li>Don't use multiple wildcards</li>
              <li>Don't forget trailing slashes for directories</li>
              <li>Don't block important pages accidentally</li>
            </ul>
          </div>
        </div>
      </div>
    </div>

    <ToolAttribution toolName="Robots.txt Generator" version="1.0.0" />
  </ToolLayout>
</BaseLayout>

<style>
  .robots-generator {
    margin-bottom: 2rem;
  }

  .template-section {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 2rem;
  }

  .template-section h3 {
    margin: 0 0 1.5rem 0;
    color: #333;
  }

  .template-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
  }

  .template-btn {
    background: white;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    padding: 1.5rem 1rem;
    cursor: pointer;
    transition: all 0.3s;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    text-align: center;
  }

  .template-btn:hover {
    border-color: #667eea;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }

  .template-icon {
    font-size: 2rem;
  }

  .template-name {
    font-weight: 600;
    color: #333;
  }

  .template-desc {
    font-size: 0.85rem;
    color: #666;
  }

  .builder-section {
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 2rem;
  }

  .builder-section h3 {
    margin: 0 0 1rem 0;
    color: #333;
  }

  .agents-container {
    margin-bottom: 2rem;
  }

  .agent-group {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .agent-item {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .agent-select {
    flex: 1;
    padding: 0.5rem;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    font-size: 0.95rem;
  }

  .custom-agent {
    flex: 1;
    padding: 0.5rem;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    font-size: 0.95rem;
  }

  .remove-agent {
    padding: 0.5rem 1rem;
    background: #ff4444;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
  }

  .remove-agent:hover {
    background: #cc0000;
  }

  .rules-section {
    padding-top: 2rem;
    border-top: 1px solid #e0e0e0;
    margin-bottom: 2rem;
  }

  .rules-section h3 {
    margin: 0 0 1rem 0;
    color: #333;
  }

  .rules-container {
    display: grid;
    gap: 2rem;
  }

  .rule-type h4 {
    margin: 0 0 0.75rem 0;
    color: #667eea;
    font-size: 1rem;
  }

  .paths-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
  }

  .path-item,
  .sitemap-item {
    display: flex;
    gap: 0.5rem;
  }

  .path-input,
  .sitemap-input {
    flex: 1;
    padding: 0.5rem;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    font-family: 'Monaco', 'Consolas', monospace;
    font-size: 0.9rem;
  }

  .remove-path,
  .remove-sitemap {
    padding: 0.5rem 0.75rem;
    background: #f0f0f0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1.2rem;
    color: #666;
    transition: background 0.2s;
  }

  .remove-path:hover,
  .remove-sitemap:hover {
    background: #ff4444;
    color: white;
  }

  .btn-small {
    padding: 0.5rem 1rem;
    background: #f0f0f0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    color: #333;
    transition: background 0.2s;
  }

  .btn-small:hover {
    background: #e0e0e0;
  }

  .delay-input {
    width: 100px;
    padding: 0.5rem;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    font-size: 0.95rem;
  }

  .hint {
    display: block;
    margin-top: 0.5rem;
    font-size: 0.85rem;
    color: #666;
  }

  .sitemap-section,
  .host-section {
    padding-top: 2rem;
    border-top: 1px solid #e0e0e0;
    margin-bottom: 2rem;
  }

  .sitemap-section h3,
  .host-section h3 {
    margin: 0 0 1rem 0;
    color: #333;
  }

  .sitemaps-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
  }

  .host-input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    font-size: 0.95rem;
  }

  .output-section {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 2rem;
  }

  .output-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .output-header h3 {
    margin: 0;
    color: #333;
  }

  .output-actions {
    display: flex;
    gap: 0.5rem;
  }

  .btn-primary,
  .btn-secondary {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: opacity 0.2s;
  }

  .btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }

  .btn-secondary {
    background: #f0f0f0;
    color: #333;
  }

  .btn-primary:hover,
  .btn-secondary:hover {
    opacity: 0.9;
  }

  .output-text {
    width: 100%;
    min-height: 400px;
    padding: 1rem;
    background: #1e1e1e;
    color: #d4d4d4;
    border: none;
    border-radius: 6px;
    font-family: 'Monaco', 'Consolas', 'Courier New', monospace;
    font-size: 0.9rem;
    line-height: 1.5;
    resize: vertical;
  }

  .validation-result {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 6px;
    font-size: 0.9rem;
  }

  .validation-result.success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .validation-result.error {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  .validation-result.warning {
    background: #fff3cd;
    color: #856404;
    border: 1px solid #ffeeba;
  }

  .common-paths {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 2rem;
  }

  .common-paths h3 {
    margin: 0 0 1.5rem 0;
    color: #333;
  }

  .paths-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
  }

  .path-category h4 {
    margin: 0 0 1rem 0;
    color: #667eea;
    font-size: 1rem;
  }

  .path-category ul {
    margin: 0;
    padding-left: 0;
    list-style: none;
  }

  .path-category li {
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    color: #333;
  }

  .path-category code {
    background: white;
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
    font-family: 'Monaco', 'Consolas', monospace;
    font-size: 0.85rem;
    color: #e83e8c;
  }

  .best-practices {
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 2rem;
  }

  .best-practices h3 {
    margin: 0 0 1.5rem 0;
    color: #333;
  }

  .practices-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .practice-card {
    background: #f8f9fa;
    border-radius: 6px;
    padding: 1.5rem;
  }

  .practice-card h4 {
    margin: 0 0 1rem 0;
    font-size: 1.1rem;
  }

  .practice-card ul {
    margin: 0;
    padding-left: 1.5rem;
  }

  .practice-card li {
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    color: #333;
    line-height: 1.4;
  }

  @media (max-width: 768px) {
    .template-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .output-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .output-actions {
      width: 100%;
    }

    .output-actions button {
      flex: 1;
    }

    .paths-grid,
    .practices-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  /**
   * Caiatech Robots.txt Generator - Client-side Implementation
   * ¬© 2024 Caiatech (https://caiatech.com). All rights reserved.
   * Professional developer tools by Caiatech - caiatech.com
   */

  interface RobotRule {
    userAgent: string;
    disallow: string[];
    allow: string[];
    crawlDelay?: number;
  }

  let rules: RobotRule[] = [
    {
      userAgent: '*',
      disallow: [],
      allow: [],
    }
  ];

  let sitemaps: string[] = [];
  let host: string = '';
  let currentAgentIndex = 0;

  const templates = {
    'allow-all': {
      rules: [{ userAgent: '*', disallow: [], allow: ['/'] }],
      sitemaps: ['https://example.com/sitemap.xml']
    },
    'block-all': {
      rules: [{ userAgent: '*', disallow: ['/'], allow: [] }],
      sitemaps: []
    },
    'wordpress': {
      rules: [{
        userAgent: '*',
        disallow: ['/wp-admin/', '/wp-includes/', '/wp-content/plugins/', '/wp-content/cache/', '/wp-content/themes/', '/trackback/', '/comments/', '*/trackback/', '*/comments/', '/*?replytocom=*', '/?s=*', '/search/', '*/feed/', '*/rss/', '*/embed/', '/xmlrpc.php', '/wp-*.php'],
        allow: ['/wp-admin/admin-ajax.php', '/wp-content/uploads/']
      }],
      sitemaps: ['https://example.com/sitemap_index.xml']
    },
    'ecommerce': {
      rules: [{
        userAgent: '*',
        disallow: ['/cart/', '/checkout/', '/my-account/', '/account/', '/order/', '/orders/', '/customer/', '/search?', '/*?sort=', '/*?filter=', '/*?price=', '/*?size=', '/*?color=', '/wishlist/', '/compare/', '/*?add-to-cart=', '/affiliate/', '/ref/', '/out/'],
        allow: ['/products/', '/categories/', '/brands/'],
        crawlDelay: 1
      }],
      sitemaps: ['https://example.com/sitemap.xml', 'https://example.com/product-sitemap.xml']
    },
    'privacy': {
      rules: [{
        userAgent: '*',
        disallow: ['/admin/', '/private/', '/user/', '/users/', '/account/', '/accounts/', '/profile/', '/profiles/', '/member/', '/members/', '/customer/', '/client/', '/tmp/', '/temp/', '/cache/', '/backup/', '/backups/', '/config/', '/includes/', '/library/', '/src/', '/.git/', '/.env', '/*.sql', '/*.log', '/*.bak', '/api/private/', '/api/internal/'],
        allow: ['/public/', '/api/public/']
      }],
      sitemaps: ['https://example.com/sitemap.xml']
    },
    'custom': {
      rules: [{ userAgent: '*', disallow: [], allow: [] }],
      sitemaps: []
    }
  };

  // Template buttons
  document.querySelectorAll('.template-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const templateName = btn.getAttribute('data-template');
      if (templateName && templates[templateName as keyof typeof templates]) {
        loadTemplate(templateName as keyof typeof templates);
      }
    });
  });

  function loadTemplate(templateName: keyof typeof templates) {
    const template = templates[templateName];
    rules = JSON.parse(JSON.stringify(template.rules));
    sitemaps = [...template.sitemaps];
    currentAgentIndex = 0;
    
    updateUI();
    generateRobotsTxt();
  }

  function updateUI() {
    // Update agent groups
    const agentGroups = document.getElementById('agent-groups')!;
    agentGroups.innerHTML = '';
    
    rules.forEach((rule, index) => {
      const agentItem = document.createElement('div');
      agentItem.className = 'agent-item';
      agentItem.innerHTML = `
        <select class="agent-select" data-index="${index}">
          <option value="*" ${rule.userAgent === '*' ? 'selected' : ''}>All crawlers (*)</option>
          <option value="Googlebot" ${rule.userAgent === 'Googlebot' ? 'selected' : ''}>Googlebot</option>
          <option value="Googlebot-Image" ${rule.userAgent === 'Googlebot-Image' ? 'selected' : ''}>Googlebot Images</option>
          <option value="Googlebot-News" ${rule.userAgent === 'Googlebot-News' ? 'selected' : ''}>Googlebot News</option>
          <option value="Googlebot-Video" ${rule.userAgent === 'Googlebot-Video' ? 'selected' : ''}>Googlebot Video</option>
          <option value="Bingbot" ${rule.userAgent === 'Bingbot' ? 'selected' : ''}>Bingbot (Microsoft)</option>
          <option value="Slurp" ${rule.userAgent === 'Slurp' ? 'selected' : ''}>Yahoo Slurp</option>
          <option value="DuckDuckBot" ${rule.userAgent === 'DuckDuckBot' ? 'selected' : ''}>DuckDuckBot</option>
          <option value="Baiduspider" ${rule.userAgent === 'Baiduspider' ? 'selected' : ''}>Baiduspider (Baidu)</option>
          <option value="YandexBot" ${rule.userAgent === 'YandexBot' ? 'selected' : ''}>YandexBot (Yandex)</option>
          <option value="facebookexternalhit" ${rule.userAgent === 'facebookexternalhit' ? 'selected' : ''}>Facebook</option>
          <option value="Twitterbot" ${rule.userAgent === 'Twitterbot' ? 'selected' : ''}>Twitter</option>
          <option value="LinkedInBot" ${rule.userAgent === 'LinkedInBot' ? 'selected' : ''}>LinkedIn</option>
          <option value="WhatsApp" ${rule.userAgent === 'WhatsApp' ? 'selected' : ''}>WhatsApp</option>
          <option value="Applebot" ${rule.userAgent === 'Applebot' ? 'selected' : ''}>Applebot (Apple)</option>
          <option value="AhrefsBot" ${rule.userAgent === 'AhrefsBot' ? 'selected' : ''}>AhrefsBot</option>
          <option value="SemrushBot" ${rule.userAgent === 'SemrushBot' ? 'selected' : ''}>SemrushBot</option>
          <option value="DotBot" ${rule.userAgent === 'DotBot' ? 'selected' : ''}>DotBot (Moz)</option>
          <option value="MJ12bot" ${rule.userAgent === 'MJ12bot' ? 'selected' : ''}>MJ12bot (Majestic)</option>
          <option value="ChatGPT-User" ${rule.userAgent === 'ChatGPT-User' ? 'selected' : ''}>ChatGPT</option>
          <option value="GPTBot" ${rule.userAgent === 'GPTBot' ? 'selected' : ''}>GPTBot (OpenAI)</option>
          <option value="CCBot" ${rule.userAgent === 'CCBot' ? 'selected' : ''}>CCBot (Common Crawl)</option>
          <option value="custom" ${!isStandardAgent(rule.userAgent) ? 'selected' : ''}>Custom...</option>
        </select>
        <input type="text" class="custom-agent" placeholder="Enter custom user-agent" value="${!isStandardAgent(rule.userAgent) ? rule.userAgent : ''}" style="display: ${!isStandardAgent(rule.userAgent) ? 'block' : 'none'};">
        ${index > 0 ? '<button class="remove-agent">Remove</button>' : '<button class="remove-agent" style="display: none;">Remove</button>'}
      `;
      agentGroups.appendChild(agentItem);
    });
    
    // Update paths for current agent
    updatePathsUI();
    
    // Update sitemaps
    const sitemapsList = document.getElementById('sitemaps')!;
    sitemapsList.innerHTML = '';
    if (sitemaps.length === 0) {
      sitemaps.push('');
    }
    sitemaps.forEach((sitemap, index) => {
      const sitemapItem = document.createElement('div');
      sitemapItem.className = 'sitemap-item';
      sitemapItem.innerHTML = `
        <input type="text" placeholder="https://example.com/sitemap.xml" class="sitemap-input" value="${sitemap}">
        ${index > 0 || sitemaps.length > 1 ? '<button class="remove-sitemap">√ó</button>' : '<button class="remove-sitemap" style="display: none;">√ó</button>'}
      `;
      sitemapsList.appendChild(sitemapItem);
    });
  }

  function isStandardAgent(agent: string): boolean {
    const standardAgents = ['*', 'Googlebot', 'Googlebot-Image', 'Googlebot-News', 'Googlebot-Video', 
      'Bingbot', 'Slurp', 'DuckDuckBot', 'Baiduspider', 'YandexBot', 'facebookexternalhit', 
      'Twitterbot', 'LinkedInBot', 'WhatsApp', 'Applebot', 'AhrefsBot', 'SemrushBot', 
      'DotBot', 'MJ12bot', 'ChatGPT-User', 'GPTBot', 'CCBot'];
    return standardAgents.includes(agent);
  }

  function updatePathsUI() {
    const currentRule = rules[currentAgentIndex];
    
    // Update disallow paths
    const disallowPaths = document.getElementById('disallow-paths')!;
    disallowPaths.innerHTML = '';
    if (currentRule.disallow.length === 0) {
      currentRule.disallow.push('');
    }
    currentRule.disallow.forEach((path, index) => {
      const pathItem = document.createElement('div');
      pathItem.className = 'path-item';
      pathItem.innerHTML = `
        <input type="text" placeholder="/admin/" class="path-input" value="${path}">
        ${index > 0 || currentRule.disallow.length > 1 ? '<button class="remove-path">√ó</button>' : '<button class="remove-path" style="display: none;">√ó</button>'}
      `;
      disallowPaths.appendChild(pathItem);
    });
    
    // Update allow paths
    const allowPaths = document.getElementById('allow-paths')!;
    allowPaths.innerHTML = '';
    if (currentRule.allow.length === 0) {
      currentRule.allow.push('');
    }
    currentRule.allow.forEach((path, index) => {
      const pathItem = document.createElement('div');
      pathItem.className = 'path-item';
      pathItem.innerHTML = `
        <input type="text" placeholder="/public/" class="path-input" value="${path}">
        ${index > 0 || currentRule.allow.length > 1 ? '<button class="remove-path">√ó</button>' : '<button class="remove-path" style="display: none;">√ó</button>'}
      `;
      allowPaths.appendChild(pathItem);
    });
    
    // Update crawl delay
    const crawlDelayInput = document.getElementById('crawl-delay') as HTMLInputElement;
    crawlDelayInput.value = currentRule.crawlDelay?.toString() || '';
  }

  function generateRobotsTxt() {
    let content = '';
    
    // Add rules for each user agent
    rules.forEach(rule => {
      if (!rule.userAgent) return;
      
      content += `User-agent: ${rule.userAgent}\n`;
      
      // Add Allow directives
      rule.allow.forEach(path => {
        if (path) content += `Allow: ${path}\n`;
      });
      
      // Add Disallow directives
      if (rule.disallow.length === 0 || (rule.disallow.length === 1 && rule.disallow[0] === '')) {
        content += `Disallow:\n`;
      } else {
        rule.disallow.forEach(path => {
          if (path) content += `Disallow: ${path}\n`;
        });
      }
      
      // Add Crawl-delay if specified
      if (rule.crawlDelay && rule.crawlDelay > 0) {
        content += `Crawl-delay: ${rule.crawlDelay}\n`;
      }
      
      content += '\n';
    });
    
    // Add Host directive if specified
    if (host) {
      content += `Host: ${host}\n\n`;
    }
    
    // Add Sitemaps
    sitemaps.forEach(sitemap => {
      if (sitemap) content += `Sitemap: ${sitemap}\n`;
    });
    
    const output = document.getElementById('output') as HTMLTextAreaElement;
    output.value = content.trim();
  }

  // Event listeners for agent selection
  document.addEventListener('change', (e) => {
    const target = e.target as HTMLElement;
    
    if (target.classList.contains('agent-select')) {
      const index = parseInt(target.getAttribute('data-index')!);
      const value = (target as HTMLSelectElement).value;
      const customInput = target.nextElementSibling as HTMLInputElement;
      
      if (value === 'custom') {
        customInput.style.display = 'block';
        rules[index].userAgent = customInput.value || '';
      } else {
        customInput.style.display = 'none';
        rules[index].userAgent = value;
      }
      
      currentAgentIndex = index;
      updatePathsUI();
      generateRobotsTxt();
    }
  });

  // Custom agent input
  document.addEventListener('input', (e) => {
    const target = e.target as HTMLElement;
    
    if (target.classList.contains('custom-agent')) {
      const select = target.previousElementSibling as HTMLSelectElement;
      const index = parseInt(select.getAttribute('data-index')!);
      rules[index].userAgent = (target as HTMLInputElement).value;
      generateRobotsTxt();
    }
    
    if (target.classList.contains('path-input')) {
      updatePathsFromUI();
      generateRobotsTxt();
    }
    
    if (target.classList.contains('sitemap-input')) {
      updateSitemapsFromUI();
      generateRobotsTxt();
    }
    
    if (target.id === 'crawl-delay') {
      const value = parseInt((target as HTMLInputElement).value) || 0;
      rules[currentAgentIndex].crawlDelay = value > 0 ? value : undefined;
      generateRobotsTxt();
    }
    
    if (target.id === 'host-input') {
      host = (target as HTMLInputElement).value;
      generateRobotsTxt();
    }
  });

  function updatePathsFromUI() {
    // Update disallow paths
    const disallowInputs = document.querySelectorAll('#disallow-paths .path-input');
    rules[currentAgentIndex].disallow = Array.from(disallowInputs).map(input => (input as HTMLInputElement).value).filter(v => v);
    
    // Update allow paths
    const allowInputs = document.querySelectorAll('#allow-paths .path-input');
    rules[currentAgentIndex].allow = Array.from(allowInputs).map(input => (input as HTMLInputElement).value).filter(v => v);
  }

  function updateSitemapsFromUI() {
    const sitemapInputs = document.querySelectorAll('.sitemap-input');
    sitemaps = Array.from(sitemapInputs).map(input => (input as HTMLInputElement).value).filter(v => v);
  }

  // Add agent
  document.getElementById('add-agent')?.addEventListener('click', () => {
    rules.push({
      userAgent: '*',
      disallow: [],
      allow: []
    });
    currentAgentIndex = rules.length - 1;
    updateUI();
    generateRobotsTxt();
  });

  // Remove agent
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    
    if (target.classList.contains('remove-agent')) {
      const agentItem = target.parentElement!;
      const select = agentItem.querySelector('.agent-select') as HTMLSelectElement;
      const index = parseInt(select.getAttribute('data-index')!);
      
      rules.splice(index, 1);
      if (rules.length === 0) {
        rules.push({ userAgent: '*', disallow: [], allow: [] });
      }
      currentAgentIndex = Math.min(currentAgentIndex, rules.length - 1);
      updateUI();
      generateRobotsTxt();
    }
    
    if (target.classList.contains('remove-path')) {
      updatePathsFromUI();
      const pathItem = target.parentElement!;
      const pathsList = pathItem.parentElement!;
      const isDisallow = pathsList.id === 'disallow-paths';
      const paths = isDisallow ? rules[currentAgentIndex].disallow : rules[currentAgentIndex].allow;
      const index = Array.from(pathsList.children).indexOf(pathItem);
      
      if (paths.length > 1) {
        paths.splice(index, 1);
        if (isDisallow) {
          rules[currentAgentIndex].disallow = paths;
        } else {
          rules[currentAgentIndex].allow = paths;
        }
        updatePathsUI();
        generateRobotsTxt();
      }
    }
    
    if (target.classList.contains('remove-sitemap')) {
      updateSitemapsFromUI();
      const sitemapItem = target.parentElement!;
      const sitemapsList = sitemapItem.parentElement!;
      const index = Array.from(sitemapsList.children).indexOf(sitemapItem);
      
      if (sitemaps.length > 1) {
        sitemaps.splice(index, 1);
        updateUI();
        generateRobotsTxt();
      }
    }
  });

  // Add path
  document.querySelectorAll('.add-path').forEach(btn => {
    btn.addEventListener('click', () => {
      const type = btn.getAttribute('data-type');
      if (type === 'disallow') {
        rules[currentAgentIndex].disallow.push('');
      } else {
        rules[currentAgentIndex].allow.push('');
      }
      updatePathsUI();
    });
  });

  // Add sitemap
  document.getElementById('add-sitemap')?.addEventListener('click', () => {
    sitemaps.push('');
    updateUI();
  });

  // Agent selection click
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    const agentItem = target.closest('.agent-item');
    if (agentItem) {
      const select = agentItem.querySelector('.agent-select') as HTMLSelectElement;
      if (select) {
        currentAgentIndex = parseInt(select.getAttribute('data-index')!);
        updatePathsUI();
      }
    }
  });

  // Validate robots.txt
  document.getElementById('validate-btn')?.addEventListener('click', () => {
    const output = (document.getElementById('output') as HTMLTextAreaElement).value;
    const validationResult = document.getElementById('validation-result')!;
    
    let issues: string[] = [];
    let warnings: string[] = [];
    
    // Check if empty
    if (!output.trim()) {
      issues.push('Robots.txt is empty');
    }
    
    // Check file size (should be under 500KB)
    const sizeKB = new Blob([output]).size / 1024;
    if (sizeKB > 500) {
      issues.push(`File size is ${sizeKB.toFixed(2)}KB (should be under 500KB)`);
    }
    
    // Check for common mistakes
    if (output.includes('Disallow: /')) {
      const lines = output.split('\n');
      const disallowAll = lines.some(line => line.trim() === 'Disallow: /');
      if (disallowAll) {
        warnings.push('You are blocking all crawlers from your entire site');
      }
    }
    
    // Check for blocking important resources
    const blockedResources = ['/css/', '/js/', '/images/'];
    blockedResources.forEach(resource => {
      if (output.includes(`Disallow: ${resource}`)) {
        warnings.push(`You are blocking ${resource} which might affect page rendering`);
      }
    });
    
    // Check for duplicate user agents
    const userAgents = output.match(/User-agent: .+/g) || [];
    const uniqueAgents = new Set(userAgents);
    if (userAgents.length !== uniqueAgents.size) {
      warnings.push('Duplicate User-agent declarations found');
    }
    
    // Display results
    validationResult.style.display = 'block';
    if (issues.length > 0) {
      validationResult.className = 'validation-result error';
      validationResult.innerHTML = `<strong>‚ùå Validation Failed:</strong><br>${issues.join('<br>')}`;
    } else if (warnings.length > 0) {
      validationResult.className = 'validation-result warning';
      validationResult.innerHTML = `<strong>‚ö†Ô∏è Validation Passed with Warnings:</strong><br>${warnings.join('<br>')}`;
    } else {
      validationResult.className = 'validation-result success';
      validationResult.innerHTML = '<strong>‚úÖ Valid robots.txt!</strong><br>Your robots.txt file follows best practices.';
    }
  });

  // Copy to clipboard
  document.getElementById('copy-btn')?.addEventListener('click', async () => {
    const output = (document.getElementById('output') as HTMLTextAreaElement).value;
    try {
      await navigator.clipboard.writeText(output);
      const btn = document.getElementById('copy-btn');
      const originalContent = btn?.innerHTML;
      if (btn) btn.textContent = 'Copied!';
      setTimeout(() => {
        if (btn && originalContent) btn.innerHTML = originalContent;
      }, 2000);
    } catch (error) {
      alert('Unable to copy to clipboard');
    }
  });

  // Download robots.txt
  document.getElementById('download-btn')?.addEventListener('click', () => {
    const output = (document.getElementById('output') as HTMLTextAreaElement).value;
    const blob = new Blob([output], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'robots.txt';
    a.click();
    URL.revokeObjectURL(url);
  });

  // Initialize with default template
  loadTemplate('custom');
</script>

<!-- Structured Data -->
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "WebApplication",
  "name": "Robots.txt Generator by Caiatech",
  "url": "https://caiatech.com/tools/robots",
  "description": "Professional robots.txt generator with templates and validation. Control web crawler access to your website.",
  "applicationCategory": "DeveloperApplication",
  "operatingSystem": "Web Browser",
  "offers": {
    "@type": "Offer",
    "price": "0",
    "priceCurrency": "USD"
  },
  "featureList": [
    "Multiple crawler support",
    "Template library",
    "Path validation",
    "Sitemap integration",
    "Crawl delay settings",
    "Best practices guide",
    "Real-time preview",
    "Export functionality"
  ],
  "author": {
    "@type": "Organization",
    "name": "Caiatech",
    "url": "https://caiatech.com"
  }
}
</script>