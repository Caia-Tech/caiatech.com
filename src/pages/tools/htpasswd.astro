---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Htpasswd Generator - Caiatech">
  <CaiatechToolLayout 
    title="Htpasswd Generator" 
    description="Generate htpasswd entries"
    icon=".ht">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://htpasswd</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">htpasswd</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <div class="htpasswd-input-section">
            <div class="input-group">
              <label for="username-input">Username:</label>
              <input 
                id="username-input" 
                class="terminal-input text-input"
                type="text"
                placeholder="e.g., admin, user123"
                spellcheck="false"
              />
            </div>
            
            <div class="input-group">
              <label for="password-input">Password:</label>
              <input 
                id="password-input" 
                class="terminal-input text-input"
                type="password"
                placeholder="Enter password"
                spellcheck="false"
              />
            </div>
            
            <div class="input-group">
              <label for="users-input">Multiple Users (optional):</label>
              <textarea 
                id="users-input" 
                class="terminal-input details-input"
                placeholder="Format: username:password (one per line)
admin:secretpass123
user1:mypassword456
guest:guestpass789"
                spellcheck="false"
                rows="4"
              ></textarea>
            </div>
          </div>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="generate-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">üîê Generate</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="hash-type-btn" class="cyber-btn secondary" data-type="bcrypt">
            <span class="btn-text">Hash: bcrypt</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy .htpasswd</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://htpasswd.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Htpasswd Generator" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .htpasswd-input-section {
    display: grid;
    gap: 1rem;
  }

  .input-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .input-group label {
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
    font-size: 0.9rem;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .text-input {
    min-height: auto;
    height: auto;
    padding: 0.75rem;
  }

  .details-input {
    min-height: 120px;
    resize: vertical;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // Htpasswd Generator Tool
  (function() {
    const usernameInput = document.getElementById('username-input');
    const passwordInput = document.getElementById('password-input');
    const usersInput = document.getElementById('users-input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const generateBtn = document.getElementById('generate-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const hashTypeBtn = document.getElementById('hash-type-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    let currentHashType = 'bcrypt';
    
    function updateStats() {
      const totalInput = usernameInput.value.length + passwordInput.value.length + usersInput.value.length;
      inputLength.textContent = totalInput;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function generateHtpasswd() {
      const username = usernameInput.value.trim();
      const password = passwordInput.value.trim();
      const usersText = usersInput.value.trim();
      
      if (!username && !usersText) {
        setStatus('Please enter a username or multiple users', 'error');
        return;
      }
      
      try {
        let htpasswdContent = '';
        
        // Handle single user input
        if (username) {
          if (!password) {
            setStatus('Please enter a password for the username', 'error');
            return;
          }
          htpasswdContent += generateUserEntry(username, password, currentHashType);
        }
        
        // Handle multiple users input
        if (usersText) {
          const userLines = usersText.split('\\n').filter(line => line.trim());
          for (const line of userLines) {
            const parts = line.split(':');
            if (parts.length >= 2) {
              const user = parts[0].trim();
              const pass = parts.slice(1).join(':').trim(); // Handle passwords with colons
              if (user && pass) {
                htpasswdContent += generateUserEntry(user, pass, currentHashType);
              }
            }
          }
        }
        
        const formattedResult = formatHtpasswdResult(htpasswdContent, currentHashType);
        output.textContent = formattedResult;
        setStatus('Htpasswd entries generated successfully!', 'success');
        updateStats();
      } catch (error) {
        setStatus('Generation failed: ' + error.message, 'error');
      }
    }
    
    function generateUserEntry(username, password, hashType) {
      let hashedPassword;
      
      switch (hashType) {
        case 'bcrypt':
          hashedPassword = generateBcryptHash(password);
          break;
        case 'md5':
          hashedPassword = generateMD5Hash(password);
          break;
        case 'sha1':
          hashedPassword = generateSHA1Hash(password);
          break;
        case 'plain':
          hashedPassword = password;
          break;
        default:
          hashedPassword = generateBcryptHash(password);
      }
      
      return `${username}:${hashedPassword}\\n`;
    }
    
    function generateBcryptHash(password) {
      // Simulated bcrypt hash - in real implementation, you'd use bcrypt library
      const salt = generateRandomString(22);
      const hash = btoa(password + salt).substring(0, 31);
      return `$2y$10$${salt}${hash}`;
    }
    
    function generateMD5Hash(password) {
      // Simulated MD5 hash - Apache's modified MD5
      const salt = generateRandomString(8);
      const hash = btoa(password + salt).substring(0, 22);
      return `$apr1$${salt}$${hash}`;
    }
    
    function generateSHA1Hash(password) {
      // Simulated SHA1 hash
      const hash = btoa(password + 'salt').substring(0, 28);
      return `{SHA}${hash}`;
    }
    
    function generateRandomString(length) {
      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./';
      let result = '';
      for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      return result;
    }
    
    function formatHtpasswdResult(htpasswdContent, hashType) {
      let result = '';
      
      result += '‚îå‚îÄ‚îÄ‚îÄ HTPASSWD GENERATOR ‚îÄ‚îÄ‚îÄ‚îê\\n';
      result += '‚îÇ                          ‚îÇ\\n';
      result += `‚îÇ Hash Type: ${hashType.toUpperCase().padEnd(13)}‚îÇ\\n`;
      result += `‚îÇ Users: ${htpasswdContent.split('\\n').filter(line => line.trim()).length.toString().padEnd(17)}‚îÇ\\n`;
      result += '‚îÇ                          ‚îÇ\\n';
      result += '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\\n\\n';
      
      result += '.HTPASSWD CONTENT:\\n';
      result += '‚îÄ'.repeat(50) + '\\n';
      result += htpasswdContent + '\\n';
      
      result += 'APACHE CONFIGURATION EXAMPLE:\\n';
      result += '‚îÄ'.repeat(50) + '\\n';
      result += '<Directory "/var/www/html/protected">\\n';
      result += '    AuthType Basic\\n';
      result += '    AuthName "Restricted Area"\\n';
      result += '    AuthUserFile /path/to/.htpasswd\\n';
      result += '    Require valid-user\\n';
      result += '</Directory>\\n\\n';
      
      result += 'NGINX CONFIGURATION EXAMPLE:\\n';
      result += '‚îÄ'.repeat(50) + '\\n';
      result += 'location /protected/ {\\n';
      result += '    auth_basic "Restricted Area";\\n';
      result += '    auth_basic_user_file /path/to/.htpasswd;\\n';
      result += '}\\n\\n';
      
      result += 'SETUP INSTRUCTIONS:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      result += '1. Copy the .htpasswd content above\\n';
      result += '2. Save it to a file named .htpasswd\\n';
      result += '3. Place the file outside your web root\\n';
      result += '4. Set proper file permissions (644)\\n';
      result += '5. Configure your web server (Apache/Nginx)\\n';
      result += '6. Test the authentication\\n\\n';
      
      result += 'SECURITY NOTES:\\n';
      result += '‚îÄ'.repeat(30) + '\\n';
      result += '‚Ä¢ Store .htpasswd outside document root\\n';
      result += '‚Ä¢ Use strong passwords (12+ characters)\\n';
      result += '‚Ä¢ bcrypt is the most secure hash type\\n';
      result += '‚Ä¢ Avoid plain text passwords in production\\n';
      result += '‚Ä¢ Consider using SSL/TLS for transmission\\n';
      result += '‚Ä¢ Regularly update passwords\\n\\n';
      
      result += 'HASH TYPE COMPARISON:\\n';
      result += '‚îÄ'.repeat(35) + '\\n';
      result += '‚Ä¢ bcrypt: Most secure, slow (recommended)\\n';
      result += '‚Ä¢ MD5: Legacy, faster, less secure\\n';
      result += '‚Ä¢ SHA1: Better than MD5, still not ideal\\n';
      result += '‚Ä¢ Plain: Not recommended for production\\n';
      
      return result;
    }
    
    function cycleHashType() {
      const hashTypes = ['bcrypt', 'md5', 'sha1', 'plain'];
      const currentIndex = hashTypes.indexOf(currentHashType);
      currentHashType = hashTypes[(currentIndex + 1) % hashTypes.length];
      
      const hashNames = {
        'bcrypt': 'bcrypt',
        'md5': 'MD5',
        'sha1': 'SHA1',
        'plain': 'Plain'
      };
      
      hashTypeBtn.querySelector('.btn-text').textContent = `Hash: ${hashNames[currentHashType]}`;
      setStatus(`Hash type set to ${hashNames[currentHashType]}`, 'success');
    }
    
    function clearAll() {
      usernameInput.value = '';
      passwordInput.value = '';
      usersInput.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      usernameInput.value = '';
      passwordInput.value = '';
      usersInput.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      // Extract just the .htpasswd content for copying
      const lines = text.split('\\n');
      let htpasswdContent = '';
      let inHtpasswdSection = false;
      
      for (const line of lines) {
        if (line.includes('.HTPASSWD CONTENT:')) {
          inHtpasswdSection = true;
          continue;
        }
        if (inHtpasswdSection && line.includes('APACHE CONFIGURATION')) {
          break;
        }
        if (inHtpasswdSection && !line.startsWith('‚îÄ')) {
          htpasswdContent += line + '\\n';
        }
      }
      
      try {
        await navigator.clipboard.writeText(htpasswdContent.trim());
        setStatus('.htpasswd content copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      // Extract just the .htpasswd content for download
      const lines = text.split('\\n');
      let htpasswdContent = '';
      let inHtpasswdSection = false;
      
      for (const line of lines) {
        if (line.includes('.HTPASSWD CONTENT:')) {
          inHtpasswdSection = true;
          continue;
        }
        if (inHtpasswdSection && line.includes('APACHE CONFIGURATION')) {
          break;
        }
        if (inHtpasswdSection && !line.startsWith('‚îÄ')) {
          htpasswdContent += line + '\\n';
        }
      }
      
      const blob = new Blob([htpasswdContent.trim()], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = '.htpasswd';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded .htpasswd file', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        if (text.includes(':')) {
          usersInput.value = text;
        } else {
          usernameInput.value = text;
        }
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      usernameInput.value = 'admin';
      passwordInput.value = 'securePassword123';
      usersInput.value = `webmaster:mypassword456
guest:guestpass789
moderator:modPass2024`;
      generateHtpasswd();
    }
    
    // Event listeners
    if (generateBtn) generateBtn.addEventListener('click', generateHtpasswd);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (hashTypeBtn) hashTypeBtn.addEventListener('click', cycleHashType);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    [usernameInput, passwordInput, usersInput].forEach(input => {
      input.addEventListener('input', updateStats);
    });
    
    // Keyboard shortcuts
    [usernameInput, passwordInput, usersInput].forEach(input => {
      input.addEventListener('keydown', function(e) {
        if (e.ctrlKey || e.metaKey) {
          if (e.key === 'Enter') {
            generateHtpasswd();
          }
        }
      });
    });
    
    // Initial stats
    updateStats();
  })();
</script>