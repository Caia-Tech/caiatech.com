---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Word Counter - Caiatech">
  <CaiatechToolLayout 
    title="Word Counter" 
    description="Count words and characters"
    icon="📝">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://word-counter</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">word-counter</span>
            <span class="prompt-arrow">→</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Enter text to analyze...

Paste your text here to get:
• Word count
• Character count (with/without spaces)
• Sentence count
• Paragraph count
• Reading time estimate
• Most frequent words
• Average word length"
            spellcheck="false"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="analyze-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">📊 Analyze</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Stats</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Words: <span id="live-word-count">0</span></span>
            <span class="stat-separator">•</span>
            <span class="stat-item">Chars: <span id="live-char-count">0</span></span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://word-counter.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Word Counter" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // Word Counter Tool
  (function() {
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const liveWordCount = document.getElementById('live-word-count');
    const liveCharCount = document.getElementById('live-char-count');
    
    const analyzeBtn = document.getElementById('analyze-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    function updateLiveStats() {
      const text = input.value;
      const words = text.trim() ? text.trim().split(/\s+/).length : 0;
      const chars = text.length;
      
      liveWordCount.textContent = words;
      liveCharCount.textContent = chars;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function analyzeText() {
      const text = input.value;
      if (!text) {
        setStatus('Please enter text to analyze', 'error');
        return;
      }
      
      try {
        const analysis = performTextAnalysis(text);
        const result = generateAnalysisResult(analysis);
        output.textContent = result;
        setStatus('Analysis complete!', 'success');
      } catch (error) {
        setStatus('Analysis failed: ' + error.message, 'error');
      }
    }
    
    function performTextAnalysis(text) {
      // Basic counts
      const words = text.trim() ? text.trim().split(/\s+/) : [];
      const wordCount = words.length;
      const charCountWithSpaces = text.length;
      const charCountWithoutSpaces = text.replace(/\s/g, '').length;
      
      // Sentences (simple heuristic)
      const sentences = text.split(/[.!?]+/).filter(s => s.trim()).length;
      
      // Paragraphs
      const paragraphs = text.split(/\n\n+/).filter(p => p.trim()).length;
      
      // Lines
      const lines = text.split('\n').length;
      
      // Average word length
      const totalWordLength = words.reduce((sum, word) => sum + word.replace(/[^\w]/g, '').length, 0);
      const avgWordLength = wordCount > 0 ? (totalWordLength / wordCount).toFixed(1) : 0;
      
      // Reading time (200 words per minute average)
      const readingTimeMinutes = Math.ceil(wordCount / 200);
      const readingTimeSeconds = Math.ceil((wordCount / 200) * 60);
      
      // Most frequent words
      const wordFrequency = {};
      const cleanWords = words.map(w => w.toLowerCase().replace(/[^\w]/g, '')).filter(w => w.length > 0);
      cleanWords.forEach(word => {
        if (word.length > 2) { // Skip very short words
          wordFrequency[word] = (wordFrequency[word] || 0) + 1;
        }
      });
      
      const topWords = Object.entries(wordFrequency)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 10)
        .map(([word, count]) => ({ word, count }));
      
      // Language statistics
      const uniqueWords = new Set(cleanWords).size;
      const lexicalDiversity = wordCount > 0 ? ((uniqueWords / wordCount) * 100).toFixed(1) : 0;
      
      // Character types
      const letters = text.match(/[a-zA-Z]/g) || [];
      const digits = text.match(/\d/g) || [];
      const spaces = text.match(/\s/g) || [];
      const punctuation = text.match(/[^\w\s]/g) || [];
      
      return {
        wordCount,
        charCountWithSpaces,
        charCountWithoutSpaces,
        sentences,
        paragraphs,
        lines,
        avgWordLength,
        readingTimeMinutes,
        readingTimeSeconds,
        topWords,
        uniqueWords,
        lexicalDiversity,
        letters: letters.length,
        digits: digits.length,
        spaces: spaces.length,
        punctuation: punctuation.length
      };
    }
    
    function generateAnalysisResult(analysis) {
      let result = '';
      result += '┌─── TEXT ANALYSIS RESULTS ───┐\n';
      result += '│                             │\n';
      result += '└─────────────────────────────┘\n\n';
      
      result += 'BASIC STATISTICS:\n';
      result += '─'.repeat(40) + '\n';
      result += 'Words:                 ' + analysis.wordCount + '\n';
      result += 'Characters (with spaces): ' + analysis.charCountWithSpaces + '\n';
      result += 'Characters (no spaces):   ' + analysis.charCountWithoutSpaces + '\n';
      result += 'Sentences:             ' + analysis.sentences + '\n';
      result += 'Paragraphs:            ' + analysis.paragraphs + '\n';
      result += 'Lines:                 ' + analysis.lines + '\n\n';
      
      result += 'READABILITY:\n';
      result += '─'.repeat(40) + '\n';
      result += 'Average word length:   ' + analysis.avgWordLength + ' characters\n';
      result += 'Unique words:          ' + analysis.uniqueWords + '\n';
      result += 'Lexical diversity:     ' + analysis.lexicalDiversity + '%\n';
      result += 'Reading time:          ' + analysis.readingTimeMinutes + ' min (' + analysis.readingTimeSeconds + ' seconds)\n\n';
      
      result += 'CHARACTER BREAKDOWN:\n';
      result += '─'.repeat(40) + '\n';
      result += 'Letters:               ' + analysis.letters + '\n';
      result += 'Digits:                ' + analysis.digits + '\n';
      result += 'Spaces:                ' + analysis.spaces + '\n';
      result += 'Punctuation:           ' + analysis.punctuation + '\n\n';
      
      if (analysis.topWords.length > 0) {
        result += 'TOP 10 MOST FREQUENT WORDS:\n';
        result += '─'.repeat(40) + '\n';
        analysis.topWords.forEach((item, index) => {
          result += (index + 1).toString().padStart(2) + '. "' + item.word + '" - ' + item.count + ' times\n';
        });
        result += '\n';
      }
      
      result += 'DOCUMENT METRICS:\n';
      result += '─'.repeat(40) + '\n';
      if (analysis.wordCount > 0) {
        result += 'Words per sentence:    ' + (analysis.wordCount / Math.max(1, analysis.sentences)).toFixed(1) + '\n';
        result += 'Words per paragraph:   ' + (analysis.wordCount / Math.max(1, analysis.paragraphs)).toFixed(1) + '\n';
        result += 'Sentences per paragraph: ' + (analysis.sentences / Math.max(1, analysis.paragraphs)).toFixed(1) + '\n';
      }
      
      return result;
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateLiveStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      updateLiveStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const toolName = document.title.split(' - ')[0].toLowerCase().replace(/\s+/g, '-');
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = toolName + '-output.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateLiveStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      const sampleText = `The quick brown fox jumps over the lazy dog. This pangram contains every letter of the alphabet at least once.

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

In the world of technology, innovation drives progress. Every day brings new challenges and opportunities. Developers work tirelessly to create solutions that make our lives easier and more connected.

This sample text demonstrates various aspects of text analysis:
- Word counting and frequency
- Sentence and paragraph detection
- Reading time estimation
- Character analysis

The tool provides comprehensive statistics about your text, helping writers, editors, and content creators optimize their work for readability and engagement.`;
      
      input.value = sampleText;
      analyzeText();
    }
    
    // Event listeners
    if (analyzeBtn) analyzeBtn.addEventListener('click', analyzeText);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    input.addEventListener('input', updateLiveStats);
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          analyzeText();
        }
      }
    });
    
    // Initial stats
    updateLiveStats();
  })();
</script>