---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Code Prettifier - Caiatech">
  <CaiatechToolLayout 
    title="Code Prettifier" 
    description="Prettify and format code"
    icon="âœ¨">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://prettify</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">prettify</span>
            <span class="prompt-arrow">â†’</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Paste your code here (JavaScript, JSON, HTML, CSS, XML, SQL)..."
            spellcheck="false"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="format-options">
          <label for="code-type">Language:</label>
          <select id="code-type" class="format-select">
            <option value="auto">Auto-detect</option>
            <option value="javascript">JavaScript</option>
            <option value="json">JSON</option>
            <option value="html">HTML</option>
            <option value="css">CSS</option>
            <option value="xml">XML</option>
            <option value="sql">SQL</option>
          </select>
          <label for="indent-size">Indent:</label>
          <select id="indent-size" class="format-select">
            <option value="2">2 spaces</option>
            <option value="4" selected>4 spaces</option>
            <option value="tab">Tab</option>
          </select>
        </div>
        <div class="control-grid">
          <button id="prettify-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">âœ¨ Prettify</span>
          </button>
          <button id="minify-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">ðŸ“¦ Minify</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">â€¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://prettify.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Code Prettifier" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Format options */
  .format-options {
    display: flex;
    gap: 1rem;
    align-items: center;
    margin-bottom: 1rem;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .format-options label {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .format-select {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 4px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    padding: 0.4rem 0.6rem;
    transition: all 0.3s;
    cursor: pointer;
  }

  .format-select:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.2);
  }

  .format-select option {
    background: var(--color-surface);
    color: var(--color-text);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .format-options {
      flex-direction: column;
      align-items: stretch;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // Code Prettifier and Formatter
  (function() {
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    const codeType = document.getElementById('code-type');
    const indentSize = document.getElementById('indent-size');
    
    const prettifyBtn = document.getElementById('prettify-btn');
    const minifyBtn = document.getElementById('minify-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function detectCodeType(code) {
      const trimmed = code.trim();
      
      // JSON detection
      if ((trimmed.startsWith('{') && trimmed.endsWith('}')) || 
          (trimmed.startsWith('[') && trimmed.endsWith(']'))) {
        try {
          JSON.parse(trimmed);
          return 'json';
        } catch (e) {}
      }
      
      // HTML detection
      if (/<[a-z][\s\S]*>/i.test(trimmed)) {
        if (trimmed.includes('<!DOCTYPE') || trimmed.includes('<html')) {
          return 'html';
        }
        if (trimmed.includes('<?xml')) {
          return 'xml';
        }
        return 'html';
      }
      
      // CSS detection
      if (trimmed.includes('{') && trimmed.includes('}') && 
          (trimmed.includes(':') || trimmed.includes(';')) &&
          (trimmed.includes('.') || trimmed.includes('#') || trimmed.includes('@'))) {
        return 'css';
      }
      
      // SQL detection
      const sqlKeywords = /\b(SELECT|FROM|WHERE|INSERT|UPDATE|DELETE|CREATE|DROP|ALTER|TABLE)\b/i;
      if (sqlKeywords.test(trimmed)) {
        return 'sql';
      }
      
      // Default to JavaScript
      return 'javascript';
    }
    
    function getIndent() {
      const size = indentSize.value;
      if (size === 'tab') return '\t';
      return ' '.repeat(parseInt(size));
    }
    
    function prettifyCode() {
      const code = input.value.trim();
      if (!code) {
        setStatus('Please enter code to prettify', 'error');
        return;
      }
      
      setStatus('Prettifying code...', 'working');
      
      const type = codeType.value === 'auto' ? detectCodeType(code) : codeType.value;
      const indent = getIndent();
      
      try {
        let formatted = '';
        
        switch (type) {
          case 'json':
            formatted = formatJSON(code, indent);
            break;
          case 'javascript':
            formatted = formatJavaScript(code, indent);
            break;
          case 'html':
            formatted = formatHTML(code, indent);
            break;
          case 'xml':
            formatted = formatXML(code, indent);
            break;
          case 'css':
            formatted = formatCSS(code, indent);
            break;
          case 'sql':
            formatted = formatSQL(code);
            break;
          default:
            formatted = code;
        }
        
        output.textContent = formatted;
        setStatus(`Code prettified (${type})`, 'success');
        updateStats();
      } catch (error) {
        setStatus('Prettify failed: ' + error.message, 'error');
        output.textContent = 'Error: ' + error.message;
      }
    }
    
    function minifyCode() {
      const code = input.value.trim();
      if (!code) {
        setStatus('Please enter code to minify', 'error');
        return;
      }
      
      setStatus('Minifying code...', 'working');
      
      const type = codeType.value === 'auto' ? detectCodeType(code) : codeType.value;
      
      try {
        let minified = '';
        
        switch (type) {
          case 'json':
            minified = JSON.stringify(JSON.parse(code));
            break;
          case 'javascript':
            minified = code.replace(/\s+/g, ' ').replace(/\s*([{}()\[\];,:<>+\-*\/=!&|?])\s*/g, '$1');
            break;
          case 'html':
          case 'xml':
            minified = code.replace(/>\s+</g, '><').replace(/\s+/g, ' ').trim();
            break;
          case 'css':
            minified = code.replace(/\s*([{}:;,])\s*/g, '$1').replace(/;\}/g, '}').replace(/\s+/g, ' ').trim();
            break;
          case 'sql':
            minified = code.replace(/\s+/g, ' ').trim();
            break;
          default:
            minified = code.replace(/\s+/g, ' ').trim();
        }
        
        output.textContent = minified;
        
        const originalSize = code.length;
        const minifiedSize = minified.length;
        const reduction = Math.round((1 - minifiedSize / originalSize) * 100);
        
        setStatus(`Minified ${reduction}% smaller (${type})`, 'success');
        updateStats();
      } catch (error) {
        setStatus('Minify failed: ' + error.message, 'error');
        output.textContent = 'Error: ' + error.message;
      }
    }
    
    function formatJSON(json, indent) {
      const parsed = JSON.parse(json);
      return JSON.stringify(parsed, null, indent);
    }
    
    function formatJavaScript(code, indent) {
      // Simple JavaScript formatter
      let formatted = code;
      let level = 0;
      let result = [];
      let inString = false;
      let stringChar = null;
      
      for (let i = 0; i < formatted.length; i++) {
        const char = formatted[i];
        const nextChar = formatted[i + 1];
        
        // Handle strings
        if ((char === '"' || char === "'" || char === '`') && formatted[i - 1] !== '\\') {
          if (!inString) {
            inString = true;
            stringChar = char;
          } else if (char === stringChar) {
            inString = false;
            stringChar = null;
          }
        }
        
        if (!inString) {
          if (char === '{' || char === '[' || char === '(') {
            result.push(char);
            if (nextChar !== '}' && nextChar !== ']' && nextChar !== ')') {
              result.push('\n');
              level++;
              result.push(indent.repeat(level));
            }
          } else if (char === '}' || char === ']' || char === ')') {
            if (result[result.length - 1] !== '{' && result[result.length - 1] !== '[' && result[result.length - 1] !== '(') {
              result.push('\n');
              level = Math.max(0, level - 1);
              result.push(indent.repeat(level));
            }
            result.push(char);
          } else if (char === ';') {
            result.push(char);
            if (nextChar !== '}') {
              result.push('\n');
              result.push(indent.repeat(level));
            }
          } else if (char === ',') {
            result.push(char);
            if (nextChar !== ' ') {
              result.push(' ');
            }
          } else if (char === '\n') {
            // Skip existing newlines
          } else {
            result.push(char);
          }
        } else {
          result.push(char);
        }
      }
      
      return result.join('').replace(/\n\s*\n/g, '\n').trim();
    }
    
    function formatHTML(html, indent) {
      let formatted = html;
      let level = 0;
      
      // Add newlines after tags
      formatted = formatted.replace(/>\s*</g, '>\n<');
      
      // Format with indentation
      const lines = formatted.split('\n');
      const result = [];
      
      for (let line of lines) {
        line = line.trim();
        if (!line) continue;
        
        // Decrease level for closing tags
        if (line.startsWith('</') || line.startsWith('/>')) {
          level = Math.max(0, level - 1);
        }
        
        result.push(indent.repeat(level) + line);
        
        // Increase level for opening tags (not self-closing)
        if (line.startsWith('<') && !line.startsWith('</') && 
            !line.endsWith('/>') && !line.includes('</')) {
          level++;
        }
      }
      
      return result.join('\n');
    }
    
    function formatXML(xml, indent) {
      // XML formatting is similar to HTML
      return formatHTML(xml, indent);
    }
    
    function formatCSS(css, indent) {
      let formatted = css;
      
      // Add newlines
      formatted = formatted.replace(/\{/g, ' {\n');
      formatted = formatted.replace(/\}/g, '\n}\n');
      formatted = formatted.replace(/;/g, ';\n');
      
      // Format with indentation
      const lines = formatted.split('\n');
      const result = [];
      let level = 0;
      
      for (let line of lines) {
        line = line.trim();
        if (!line) continue;
        
        if (line.includes('}')) {
          level = Math.max(0, level - 1);
        }
        
        result.push(indent.repeat(level) + line);
        
        if (line.includes('{')) {
          level++;
        }
      }
      
      return result.join('\n').replace(/\n\s*\n/g, '\n');
    }
    
    function formatSQL(sql) {
      // Simple SQL formatter
      let formatted = sql;
      
      // Keywords to uppercase
      const keywords = ['SELECT', 'FROM', 'WHERE', 'AND', 'OR', 'ORDER BY', 'GROUP BY', 
                       'INSERT', 'INTO', 'VALUES', 'UPDATE', 'SET', 'DELETE', 
                       'CREATE', 'TABLE', 'DROP', 'ALTER', 'JOIN', 'LEFT', 'RIGHT', 
                       'INNER', 'OUTER', 'ON', 'AS', 'DISTINCT', 'HAVING', 'LIMIT'];
      
      keywords.forEach(keyword => {
        const regex = new RegExp('\\b' + keyword + '\\b', 'gi');
        formatted = formatted.replace(regex, keyword);
      });
      
      // Add newlines for major clauses
      formatted = formatted.replace(/\b(SELECT|FROM|WHERE|ORDER BY|GROUP BY|HAVING|LIMIT)\b/g, '\n$1');
      formatted = formatted.replace(/,/g, ',\n    ');
      
      return formatted.trim();
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const type = codeType.value === 'auto' ? detectCodeType(input.value) : codeType.value;
      const extensions = {
        'javascript': 'js',
        'json': 'json',
        'html': 'html',
        'xml': 'xml',
        'css': 'css',
        'sql': 'sql'
      };
      
      const extension = extensions[type] || 'txt';
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `prettified.${extension}`;
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      const samples = {
        javascript: `function calculateSum(numbers) {
const total = numbers.reduce((sum, num) => sum + num, 0);
return total;
}\n\nconst result = calculateSum([1, 2, 3, 4, 5]);
console.log('Sum:', result);`,
        json: '{"name":"John Doe","age":30,"email":"john@example.com","hobbies":["reading","coding","gaming"],"address":{"street":"123 Main St","city":"New York","zip":"10001"}}',
        html: '<div class="container"><h1>Hello World</h1><p>This is a sample HTML document.</p><ul><li>Item 1</li><li>Item 2</li><li>Item 3</li></ul></div>',
        css: '.container{max-width:1200px;margin:0 auto;padding:20px}.header{background:#333;color:#fff;padding:10px}.button{background:#007bff;color:white;padding:10px 20px;border:none;border-radius:4px}',
        sql: 'select u.id, u.name, u.email, count(o.id) as order_count from users u left join orders o on u.id = o.user_id where u.created_at > "2023-01-01" group by u.id having order_count > 5 order by order_count desc limit 10'
      };
      
      const type = codeType.value === 'auto' ? 'javascript' : codeType.value;
      input.value = samples[type] || samples.javascript;
      prettifyCode();
    }
    
    // Event listeners
    if (prettifyBtn) prettifyBtn.addEventListener('click', prettifyCode);
    if (minifyBtn) minifyBtn.addEventListener('click', minifyCode);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          prettifyCode();
        }
      }
    });
    
    // Initial stats
    updateStats();
    setStatus('Ready - Paste code to prettify', 'normal');
  })();
</script>