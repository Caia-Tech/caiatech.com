---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Git Command Generator - Caiatech">
  <CaiatechToolLayout 
    title="Git Command Generator" 
    description="Generate Git commands"
    icon="Git">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://git</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">git</span>
            <span class="prompt-arrow">→</span>
          </div>
          <div class="git-input-section">
            <div class="input-group">
              <label for="task-input">What do you want to do?</label>
              <input 
                id="task-input" 
                class="terminal-input text-input"
                type="text"
                placeholder="e.g., commit changes, create branch, merge, rebase, clone repo"
                spellcheck="false"
              />
            </div>
            
            <div class="input-group">
              <label for="details-input">Additional details (optional):</label>
              <textarea 
                id="details-input" 
                class="terminal-input details-input"
                placeholder="Branch name, commit message, remote URL, file names, etc."
                spellcheck="false"
                rows="3"
              ></textarea>
            </div>
          </div>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="generate-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">🔨 Generate</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Example</span>
          </button>
          <button id="scenario-btn" class="cyber-btn secondary" data-scenario="commit">
            <span class="btn-text">Scenario: Commit</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Commands</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">•</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://git.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Git Command Generator" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .git-input-section {
    display: grid;
    gap: 1rem;
  }

  .input-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .input-group label {
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
    font-size: 0.9rem;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .text-input {
    min-height: auto;
    height: auto;
    padding: 0.75rem;
  }

  .details-input {
    min-height: 80px;
    resize: vertical;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // Git Command Helper Tool
  (function() {
    const taskInput = document.getElementById('task-input');
    const detailsInput = document.getElementById('details-input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const generateBtn = document.getElementById('generate-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const scenarioBtn = document.getElementById('scenario-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    let currentScenario = 'commit';
    
    function updateStats() {
      const totalInput = taskInput.value.length + detailsInput.value.length;
      inputLength.textContent = totalInput;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function generateCommands() {
      const task = taskInput.value.trim();
      const details = detailsInput.value.trim();
      
      if (!task) {
        setStatus('Please describe what you want to do', 'error');
        return;
      }
      
      try {
        const commands = generateGitCommands(task, details);
        output.textContent = commands;
        setStatus('Commands generated successfully!', 'success');
        updateStats();
      } catch (error) {
        setStatus('Generation failed: ' + error.message, 'error');
      }
    }
    
    function generateGitCommands(task, details) {
      const taskLower = task.toLowerCase();
      let result = '';
      
      result += '┌─── GIT COMMAND GENERATOR ───┐\\n';
      result += '│                             │\\n';
      result += `│ Task: ${task.substring(0, 21).padEnd(21)}│\\n`;
      result += '│                             │\\n';
      result += '└─────────────────────────────┘\\n\\n';
      
      // Determine command type based on task description
      if (taskLower.includes('commit')) {
        result += generateCommitCommands(details);
      } else if (taskLower.includes('branch')) {
        result += generateBranchCommands(details);
      } else if (taskLower.includes('merge')) {
        result += generateMergeCommands(details);
      } else if (taskLower.includes('rebase')) {
        result += generateRebaseCommands(details);
      } else if (taskLower.includes('clone')) {
        result += generateCloneCommands(details);
      } else if (taskLower.includes('push')) {
        result += generatePushCommands(details);
      } else if (taskLower.includes('pull')) {
        result += generatePullCommands(details);
      } else if (taskLower.includes('stash')) {
        result += generateStashCommands(details);
      } else if (taskLower.includes('tag')) {
        result += generateTagCommands(details);
      } else if (taskLower.includes('reset') || taskLower.includes('undo')) {
        result += generateResetCommands(details);
      } else if (taskLower.includes('remote')) {
        result += generateRemoteCommands(details);
      } else if (taskLower.includes('log') || taskLower.includes('history')) {
        result += generateLogCommands(details);
      } else {
        result += generateGeneralCommands(task, details);
      }
      
      // Add helpful tips
      result += '\\n\\nHELPFUL TIPS:\\n';
      result += '─'.repeat(40) + '\\n';
      result += '• Check status before committing: git status\\n';
      result += '• Review changes before committing: git diff\\n';
      result += '• Use meaningful commit messages\\n';
      result += '• Create branches for new features\\n';
      result += '• Pull before pushing to avoid conflicts\\n';
      result += '• Use git stash for temporary changes\\n\\n';
      
      result += 'SAFETY REMINDERS:\\n';
      result += '─'.repeat(30) + '\\n';
      result += '⚠️  Always backup important changes\\n';
      result += '⚠️  Test commands in a safe environment first\\n';
      result += '⚠️  Be careful with force push (--force)\\n';
      result += '⚠️  Double-check branch names before merging\\n';
      
      return result;
    }
    
    function generateCommitCommands(details) {
      const message = details || 'Your commit message here';
      let result = '';
      
      result += 'COMMIT WORKFLOW:\\n';
      result += '─'.repeat(50) + '\\n';
      result += '# 1. Check current status\\n';
      result += 'git status\\n\\n';
      
      result += '# 2. Add files to staging area\\n';
      result += 'git add .                    # Add all changes\\n';
      result += 'git add <filename>           # Add specific file\\n';
      result += 'git add *.js                 # Add all JS files\\n\\n';
      
      result += '# 3. Review what will be committed\\n';
      result += 'git diff --staged\\n\\n';
      
      result += '# 4. Commit changes\\n';
      result += `git commit -m "${message}"\\n\\n`;
      
      result += '# 5. Push to remote (if needed)\\n';
      result += 'git push origin main         # Push to main branch\\n';
      result += 'git push origin <branch>     # Push to specific branch\\n';
      
      return result;
    }
    
    function generateBranchCommands(details) {
      const branchName = details || 'new-feature';
      let result = '';
      
      result += 'BRANCH MANAGEMENT:\\n';
      result += '─'.repeat(50) + '\\n';
      result += '# Create and switch to new branch\\n';
      result += `git checkout -b ${branchName}\\n\\n`;
      
      result += '# Alternative: Create branch then switch\\n';
      result += `git branch ${branchName}\\n`;
      result += `git checkout ${branchName}\\n\\n`;
      
      result += '# List all branches\\n';
      result += 'git branch                   # Local branches\\n';
      result += 'git branch -r                # Remote branches\\n';
      result += 'git branch -a                # All branches\\n\\n';
      
      result += '# Switch between branches\\n';
      result += 'git checkout main            # Switch to main\\n';
      result += `git checkout ${branchName}     # Switch to feature branch\\n\\n`;
      
      result += '# Delete branch\\n';
      result += `git branch -d ${branchName}     # Delete local branch (safe)\\n`;
      result += `git branch -D ${branchName}     # Delete local branch (force)\\n`;
      result += `git push origin --delete ${branchName}  # Delete remote branch\\n`;
      
      return result;
    }
    
    function generateMergeCommands(details) {
      const branchName = details || 'feature-branch';
      let result = '';
      
      result += 'MERGE WORKFLOW:\\n';
      result += '─'.repeat(50) + '\\n';
      result += '# 1. Switch to target branch (usually main)\\n';
      result += 'git checkout main\\n\\n';
      
      result += '# 2. Pull latest changes\\n';
      result += 'git pull origin main\\n\\n';
      
      result += '# 3. Merge feature branch\\n';
      result += `git merge ${branchName}\\n\\n`;
      
      result += '# 4. Push merged changes\\n';
      result += 'git push origin main\\n\\n';
      
      result += '# Alternative: Squash merge (cleaner history)\\n';
      result += `git merge --squash ${branchName}\\n`;
      result += 'git commit -m "Add feature: description"\\n\\n';
      
      result += '# If there are conflicts:\\n';
      result += '# 1. Fix conflicts in files\\n';
      result += '# 2. git add <resolved-files>\\n';
      result += '# 3. git commit (no message needed)\\n';
      
      return result;
    }
    
    function generateCloneCommands(details) {
      const repoUrl = details || 'https://github.com/user/repo.git';
      let result = '';
      
      result += 'REPOSITORY CLONING:\\n';
      result += '─'.repeat(50) + '\\n';
      result += '# Clone repository\\n';
      result += `git clone ${repoUrl}\\n\\n`;
      
      result += '# Clone to specific directory\\n';
      result += `git clone ${repoUrl} my-project\\n\\n`;
      
      result += '# Clone specific branch\\n';
      result += `git clone -b main ${repoUrl}\\n\\n`;
      
      result += '# Shallow clone (faster, less history)\\n';
      result += `git clone --depth 1 ${repoUrl}\\n\\n`;
      
      result += '# After cloning, navigate to directory:\\n';
      result += 'cd repository-name\\n';
      result += 'ls -la                       # List files\\n';
      result += 'git status                   # Check status\\n';
      
      return result;
    }
    
    function generateStashCommands(details) {
      let result = '';
      
      result += 'STASH MANAGEMENT:\\n';
      result += '─'.repeat(50) + '\\n';
      result += '# Save current changes to stash\\n';
      result += 'git stash\\n';
      result += 'git stash save "Work in progress"\\n\\n';
      
      result += '# List all stashes\\n';
      result += 'git stash list\\n\\n';
      
      result += '# Apply most recent stash\\n';
      result += 'git stash apply\\n';
      result += 'git stash pop                # Apply and remove from stash\\n\\n';
      
      result += '# Apply specific stash\\n';
      result += 'git stash apply stash@{0}\\n\\n';
      
      result += '# Show stash contents\\n';
      result += 'git stash show\\n';
      result += 'git stash show -p stash@{0}  # Show full diff\\n\\n';
      
      result += '# Delete stash\\n';
      result += 'git stash drop stash@{0}     # Delete specific stash\\n';
      result += 'git stash clear              # Delete all stashes\\n';
      
      return result;
    }
    
    function generateLogCommands(details) {
      let result = '';
      
      result += 'GIT HISTORY & LOGS:\\n';
      result += '─'.repeat(50) + '\\n';
      result += '# Basic log\\n';
      result += 'git log\\n';
      result += 'git log --oneline            # Compact format\\n';
      result += 'git log --graph              # Show branch graph\\n\\n';
      
      result += '# Limit results\\n';
      result += 'git log -5                   # Last 5 commits\\n';
      result += 'git log --since="2 weeks ago"\\n';
      result += 'git log --until="2023-01-01"\\n\\n';
      
      result += '# Filter by author or message\\n';
      result += 'git log --author="John Doe"\\n';
      result += 'git log --grep="fix"         # Commits with "fix" in message\\n\\n';
      
      result += '# Show changes in commits\\n';
      result += 'git log -p                   # Show patches\\n';
      result += 'git log --stat               # Show file statistics\\n\\n';
      
      result += '# Beautiful formatting\\n';
      result += 'git log --pretty=format:"%h %an %ar %s"\\n';
      result += 'git log --graph --pretty=format:"%C(yellow)%h%C(reset) %C(blue)%an%C(reset) %C(green)%ar%C(reset) %s"\\n';
      
      return result;
    }
    
    function generateGeneralCommands(task, details) {
      let result = '';
      
      result += 'COMMON GIT COMMANDS:\\n';
      result += '─'.repeat(50) + '\\n';
      result += '# Repository status and info\\n';
      result += 'git status                   # Check working tree status\\n';
      result += 'git log --oneline -5         # Recent commits\\n';
      result += 'git diff                     # See unstaged changes\\n';
      result += 'git diff --staged            # See staged changes\\n\\n';
      
      result += '# Working with changes\\n';
      result += 'git add <file>               # Stage specific file\\n';
      result += 'git add .                    # Stage all changes\\n';
      result += 'git commit -m "message"      # Commit staged changes\\n';
      result += 'git commit -am "message"     # Add and commit (tracked files)\\n\\n';
      
      result += '# Remote operations\\n';
      result += 'git fetch                    # Download remote changes\\n';
      result += 'git pull                     # Fetch and merge\\n';
      result += 'git push                     # Upload local commits\\n\\n';
      
      result += `# Task-specific suggestion for: "${task}"\\n`;
      if (details) {
        result += `# Details: ${details}\\n`;
      }
      result += 'git status                   # Start by checking status\\n';
      result += '# Then use appropriate commands from above\\n';
      
      return result;
    }
    
    function cycleScenario() {
      const scenarios = ['commit', 'branch', 'merge', 'clone', 'stash'];
      const currentIndex = scenarios.indexOf(currentScenario);
      currentScenario = scenarios[(currentIndex + 1) % scenarios.length];
      
      const scenarioNames = {
        'commit': 'Commit',
        'branch': 'Branch',
        'merge': 'Merge',
        'clone': 'Clone',
        'stash': 'Stash'
      };
      
      scenarioBtn.querySelector('.btn-text').textContent = `Scenario: ${scenarioNames[currentScenario]}`;
      
      // Update inputs based on scenario
      const scenarios_data = {
        'commit': {
          task: 'commit changes',
          details: 'Add new feature for user authentication'
        },
        'branch': {
          task: 'create new branch',
          details: 'feature/user-login'
        },
        'merge': {
          task: 'merge branch',
          details: 'feature/user-login'
        },
        'clone': {
          task: 'clone repository',
          details: 'https://github.com/user/project.git'
        },
        'stash': {
          task: 'stash changes',
          details: 'work in progress on login feature'
        }
      };
      
      const scenarioData = scenarios_data[currentScenario];
      taskInput.value = scenarioData.task;
      detailsInput.value = scenarioData.details;
      
      generateCommands();
      setStatus(`Loaded ${scenarioNames[currentScenario]} scenario`, 'success');
    }
    
    function clearAll() {
      taskInput.value = '';
      detailsInput.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      taskInput.value = '';
      detailsInput.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Commands copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'git-commands.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        taskInput.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      taskInput.value = 'commit changes to main branch';
      detailsInput.value = 'Fix bug in user authentication system';
      generateCommands();
    }
    
    // Event listeners
    if (generateBtn) generateBtn.addEventListener('click', generateCommands);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (scenarioBtn) scenarioBtn.addEventListener('click', cycleScenario);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    [taskInput, detailsInput].forEach(input => {
      input.addEventListener('input', updateStats);
    });
    
    // Keyboard shortcuts
    [taskInput, detailsInput].forEach(input => {
      input.addEventListener('keydown', function(e) {
        if (e.ctrlKey || e.metaKey) {
          if (e.key === 'Enter') {
            generateCommands();
          }
        }
      });
    });
    
    // Initial stats
    updateStats();
  })();
</script>