---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="HTTP Status Codes - Caiatech">
  <CaiatechToolLayout 
    title="HTTP Status Codes" 
    description="HTTP status code reference"
    icon="HTTP">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://http</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">http</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <div class="http-input-section">
            <div class="input-group">
              <label for="status-search">Search Status Code or Message:</label>
              <input 
                id="status-search" 
                class="terminal-input text-input"
                type="text"
                placeholder="e.g., 404, 200, 500, or 'not found'"
                spellcheck="false"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="search-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">üîç Search</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="category-btn" class="cyber-btn secondary" data-category="all">
            <span class="btn-text">Show: All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://http.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="HTTP Status Codes" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .http-input-section {
    display: grid;
    gap: 1rem;
  }

  .input-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .input-group label {
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
    font-size: 0.9rem;
  }

  .text-input {
    min-height: auto;
    height: auto;
    padding: 0.75rem;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // HTTP Status Codes Reference Tool
  (function() {
    const statusSearch = document.getElementById('status-search');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const searchBtn = document.getElementById('search-btn');
    const clearBtn = document.getElementById('clear-btn');
    const categoryBtn = document.getElementById('category-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    let currentCategory = 'all';
    
    const httpStatusCodes = {
      // 1xx Informational
      100: { message: "Continue", description: "The server has received the request headers and the client should proceed to send the request body." },
      101: { message: "Switching Protocols", description: "The requester has asked the server to switch protocols and the server has agreed to do so." },
      102: { message: "Processing", description: "The server has received and is processing the request, but no response is available yet." },
      103: { message: "Early Hints", description: "Used to return some response headers before final HTTP message." },
      
      // 2xx Success
      200: { message: "OK", description: "Standard response for successful HTTP requests." },
      201: { message: "Created", description: "The request has been fulfilled, resulting in the creation of a new resource." },
      202: { message: "Accepted", description: "The request has been accepted for processing, but the processing has not been completed." },
      203: { message: "Non-Authoritative Information", description: "The server is a transforming proxy that received a 200 OK from its origin." },
      204: { message: "No Content", description: "The server successfully processed the request and is not returning any content." },
      205: { message: "Reset Content", description: "The server successfully processed the request, but is not returning any content." },
      206: { message: "Partial Content", description: "The server is delivering only part of the resource due to a range header sent by the client." },
      207: { message: "Multi-Status", description: "The message body that follows is by default an XML message and can contain a number of separate response codes." },
      208: { message: "Already Reported", description: "The members of a DAV binding have already been enumerated in a preceding part of the response." },
      226: { message: "IM Used", description: "The server has fulfilled a request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance." },
      
      // 3xx Redirection
      300: { message: "Multiple Choices", description: "Indicates multiple options for the resource from which the client may choose." },
      301: { message: "Moved Permanently", description: "This and all future requests should be directed to the given URI." },
      302: { message: "Found", description: "Tells the client to look at (browse to) another URL." },
      303: { message: "See Other", description: "The response to the request can be found under another URI using the GET method." },
      304: { message: "Not Modified", description: "Indicates that the resource has not been modified since the version specified by the request headers." },
      305: { message: "Use Proxy", description: "The requested resource is available only through a proxy." },
      307: { message: "Temporary Redirect", description: "The request should be repeated with another URI; however, future requests should still use the original URI." },
      308: { message: "Permanent Redirect", description: "The request and all future requests should be repeated using another URI." },
      
      // 4xx Client Error
      400: { message: "Bad Request", description: "The server cannot or will not process the request due to an apparent client error." },
      401: { message: "Unauthorized", description: "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed." },
      402: { message: "Payment Required", description: "Reserved for future use. The original intention was that this code might be used as part of a digital cash system." },
      403: { message: "Forbidden", description: "The request contained valid data and was understood by the server, but the server is refusing action." },
      404: { message: "Not Found", description: "The requested resource could not be found but may be available in the future." },
      405: { message: "Method Not Allowed", description: "A request method is not supported for the requested resource." },
      406: { message: "Not Acceptable", description: "The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request." },
      407: { message: "Proxy Authentication Required", description: "The client must first authenticate itself with the proxy." },
      408: { message: "Request Timeout", description: "The server timed out waiting for the request." },
      409: { message: "Conflict", description: "Indicates that the request could not be processed because of conflict in the current state of the resource." },
      410: { message: "Gone", description: "Indicates that the resource requested is no longer available and will not be available again." },
      411: { message: "Length Required", description: "The request did not specify the length of its content, which is required by the requested resource." },
      412: { message: "Precondition Failed", description: "The server does not meet one of the preconditions that the requester put on the request header fields." },
      413: { message: "Payload Too Large", description: "The request is larger than the server is willing or able to process." },
      414: { message: "URI Too Long", description: "The URI provided was too long for the server to process." },
      415: { message: "Unsupported Media Type", description: "The request entity has a media type which the server or resource does not support." },
      416: { message: "Range Not Satisfiable", description: "The client has asked for a portion of the file, but the server cannot supply that portion." },
      417: { message: "Expectation Failed", description: "The server cannot meet the requirements of the Expect request-header field." },
      418: { message: "I'm a teapot", description: "This code was defined in 1998 as one of the traditional IETF April Fools' jokes." },
      421: { message: "Misdirected Request", description: "The request was directed at a server that is not able to produce a response." },
      422: { message: "Unprocessable Entity", description: "The request was well-formed but was unable to be followed due to semantic errors." },
      423: { message: "Locked", description: "The resource that is being accessed is locked." },
      424: { message: "Failed Dependency", description: "The request failed because it depended on another request and that request failed." },
      425: { message: "Too Early", description: "Indicates that the server is unwilling to risk processing a request that might be replayed." },
      426: { message: "Upgrade Required", description: "The client should switch to a different protocol such as TLS/1.3." },
      428: { message: "Precondition Required", description: "The origin server requires the request to be conditional." },
      429: { message: "Too Many Requests", description: "The user has sent too many requests in a given amount of time." },
      431: { message: "Request Header Fields Too Large", description: "The server is unwilling to process the request because either an individual header field, or all the header fields collectively, are too large." },
      451: { message: "Unavailable For Legal Reasons", description: "A server operator has received a legal demand to deny access to a resource or to a set of resources." },
      
      // 5xx Server Error
      500: { message: "Internal Server Error", description: "A generic error message, given when an unexpected condition was encountered and no more specific message is suitable." },
      501: { message: "Not Implemented", description: "The server either does not recognize the request method, or it lacks the ability to fulfil the request." },
      502: { message: "Bad Gateway", description: "The server was acting as a gateway or proxy and received an invalid response from the upstream server." },
      503: { message: "Service Unavailable", description: "The server cannot handle the request (because it is overloaded or down for maintenance)." },
      504: { message: "Gateway Timeout", description: "The server was acting as a gateway or proxy and did not receive a timely response from the upstream server." },
      505: { message: "HTTP Version Not Supported", description: "The server does not support the HTTP protocol version used in the request." },
      506: { message: "Variant Also Negotiates", description: "Transparent content negotiation for the request results in a circular reference." },
      507: { message: "Insufficient Storage", description: "The server is unable to store the representation needed to complete the request." },
      508: { message: "Loop Detected", description: "The server detected an infinite loop while processing the request." },
      510: { message: "Not Extended", description: "Further extensions to the request are required for the server to fulfill it." },
      511: { message: "Network Authentication Required", description: "The client needs to authenticate to gain network access." }
    };
    
    function updateStats() {
      inputLength.textContent = statusSearch.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function searchStatusCodes() {
      const query = statusSearch.value.trim().toLowerCase();
      
      if (!query && currentCategory === 'all') {
        displayAllStatusCodes();
        return;
      }
      
      try {
        let matchedCodes = [];
        
        // Filter by category first
        let codesToSearch = Object.keys(httpStatusCodes);
        if (currentCategory !== 'all') {
          const categoryRanges = {
            '1xx': [100, 199],
            '2xx': [200, 299],
            '3xx': [300, 399],
            '4xx': [400, 499],
            '5xx': [500, 599]
          };
          const range = categoryRanges[currentCategory];
          if (range) {
            codesToSearch = codesToSearch.filter(code => {
              const num = parseInt(code);
              return num >= range[0] && num <= range[1];
            });
          }
        }
        
        // Search within the filtered codes
        if (query) {
          for (const code of codesToSearch) {
            const statusInfo = httpStatusCodes[code];
            if (
              code.includes(query) ||
              statusInfo.message.toLowerCase().includes(query) ||
              statusInfo.description.toLowerCase().includes(query)
            ) {
              matchedCodes.push({
                code: parseInt(code),
                message: statusInfo.message,
                description: statusInfo.description
              });
            }
          }
        } else {
          // Show all codes in the selected category
          matchedCodes = codesToSearch.map(code => ({
            code: parseInt(code),
            message: httpStatusCodes[code].message,
            description: httpStatusCodes[code].description
          }));
        }
        
        if (matchedCodes.length === 0) {
          setStatus('No matching status codes found', 'error');
          output.textContent = 'No results found for: ' + (query || currentCategory);
          updateStats();
          return;
        }
        
        // Sort by status code
        matchedCodes.sort((a, b) => a.code - b.code);
        
        const result = formatStatusCodesResult(matchedCodes, query, currentCategory);
        output.textContent = result;
        setStatus(`Found ${matchedCodes.length} status code${matchedCodes.length > 1 ? 's' : ''}`, 'success');
        updateStats();
        
      } catch (error) {
        setStatus('Search failed: ' + error.message, 'error');
      }
    }
    
    function displayAllStatusCodes() {
      const allCodes = Object.keys(httpStatusCodes).map(code => ({
        code: parseInt(code),
        message: httpStatusCodes[code].message,
        description: httpStatusCodes[code].description
      })).sort((a, b) => a.code - b.code);
      
      const result = formatStatusCodesResult(allCodes, '', 'all');
      output.textContent = result;
      setStatus(`Displaying all ${allCodes.length} HTTP status codes`, 'success');
      updateStats();
    }
    
    function formatStatusCodesResult(codes, query, category) {
      let result = '';
      result += '‚îå‚îÄ‚îÄ‚îÄ HTTP STATUS CODES REFERENCE ‚îÄ‚îÄ‚îÄ‚îê\\n';
      result += '‚îÇ                                   ‚îÇ\\n';
      if (query) {
        result += `‚îÇ Query: ${query.padEnd(26)}‚îÇ\\n`;
      }
      result += `‚îÇ Category: ${category.padEnd(23)}‚îÇ\\n`;
      result += `‚îÇ Results: ${codes.length.toString().padEnd(24)}‚îÇ\\n`;
      result += '‚îÇ                                   ‚îÇ\\n';
      result += '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\\n\\n';
      
      // Group codes by category
      const categories = {
        '1xx': { name: 'INFORMATIONAL RESPONSES', codes: [] },
        '2xx': { name: 'SUCCESS', codes: [] },
        '3xx': { name: 'REDIRECTION', codes: [] },
        '4xx': { name: 'CLIENT ERROR', codes: [] },
        '5xx': { name: 'SERVER ERROR', codes: [] }
      };
      
      codes.forEach(statusCode => {
        const category = Math.floor(statusCode.code / 100) + 'xx';
        if (categories[category]) {
          categories[category].codes.push(statusCode);
        }
      });
      
      // Display each category that has codes
      Object.keys(categories).forEach(catKey => {
        const cat = categories[catKey];
        if (cat.codes.length > 0) {
          result += `${cat.name} (${catKey}):\\n`;
          result += '‚îÄ'.repeat(50) + '\\n';
          
          cat.codes.forEach(statusCode => {
            result += `${statusCode.code} - ${statusCode.message}\\n`;
            result += `    ${statusCode.description}\\n\\n`;
          });
        }
      });
      
      // Add usage examples
      result += 'COMMON USAGE EXAMPLES:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      result += '‚Ä¢ 200 OK - Successful GET, PUT, PATCH, DELETE\\n';
      result += '‚Ä¢ 201 Created - Successful POST that creates resource\\n';
      result += '‚Ä¢ 204 No Content - Successful request with no content\\n';
      result += '‚Ä¢ 301 Moved Permanently - Permanent URL redirection\\n';
      result += '‚Ä¢ 302 Found - Temporary URL redirection\\n';
      result += '‚Ä¢ 400 Bad Request - Invalid request syntax\\n';
      result += '‚Ä¢ 401 Unauthorized - Authentication required\\n';
      result += '‚Ä¢ 403 Forbidden - Access denied\\n';
      result += '‚Ä¢ 404 Not Found - Resource does not exist\\n';
      result += '‚Ä¢ 429 Too Many Requests - Rate limiting\\n';
      result += '‚Ä¢ 500 Internal Server Error - Server error\\n';
      result += '‚Ä¢ 502 Bad Gateway - Upstream server error\\n';
      result += '‚Ä¢ 503 Service Unavailable - Server temporarily down\\n\\n';
      
      result += 'HTTP STATUS CODE CATEGORIES:\\n';
      result += '‚îÄ'.repeat(45) + '\\n';
      result += '‚Ä¢ 1xx - Informational: Request received, continuing\\n';
      result += '‚Ä¢ 2xx - Success: Request successfully processed\\n';
      result += '‚Ä¢ 3xx - Redirection: Further action needed\\n';
      result += '‚Ä¢ 4xx - Client Error: Request contains bad syntax\\n';
      result += '‚Ä¢ 5xx - Server Error: Server failed to fulfill request\\n\\n';
      
      result += 'BEST PRACTICES:\\n';
      result += '‚îÄ'.repeat(30) + '\\n';
      result += '‚Ä¢ Use specific status codes rather than generic ones\\n';
      result += '‚Ä¢ Include meaningful error messages in response body\\n';
      result += '‚Ä¢ Be consistent across your API endpoints\\n';
      result += '‚Ä¢ Document expected status codes for each endpoint\\n';
      result += '‚Ä¢ Use 2xx for success, 4xx for client errors, 5xx for server errors\\n';
      result += '‚Ä¢ Implement proper error handling for all status codes\\n';
      
      return result;
    }
    
    function cycleCategory() {
      const categories = ['all', '1xx', '2xx', '3xx', '4xx', '5xx'];
      const currentIndex = categories.indexOf(currentCategory);
      currentCategory = categories[(currentIndex + 1) % categories.length];
      
      const categoryNames = {
        'all': 'All',
        '1xx': '1xx Info',
        '2xx': '2xx Success',
        '3xx': '3xx Redirect',
        '4xx': '4xx Client Error',
        '5xx': '5xx Server Error'
      };
      
      categoryBtn.querySelector('.btn-text').textContent = `Show: ${categoryNames[currentCategory]}`;
      searchStatusCodes();
      setStatus(`Showing ${categoryNames[currentCategory]} status codes`, 'success');
    }
    
    function clearAll() {
      statusSearch.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      statusSearch.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('HTTP status codes copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'http-status-codes-reference.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        statusSearch.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      statusSearch.value = '404';
      searchStatusCodes();
    }
    
    // Event listeners
    if (searchBtn) searchBtn.addEventListener('click', searchStatusCodes);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (categoryBtn) categoryBtn.addEventListener('click', cycleCategory);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    statusSearch.addEventListener('input', updateStats);
    
    // Real-time search as user types
    statusSearch.addEventListener('input', function() {
      if (statusSearch.value.trim()) {
        searchStatusCodes();
      }
    });
    
    // Keyboard shortcuts
    statusSearch.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          searchStatusCodes();
        }
      } else if (e.key === 'Enter') {
        searchStatusCodes();
      }
    });
    
    // Initialize with all status codes
    displayAllStatusCodes();
    
    // Initial stats
    updateStats();
  })();
</script>