---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Code Minifier - Caiatech">
  <CaiatechToolLayout 
    title="Code Minifier" 
    description="Minify JavaScript, CSS, and HTML"
    icon="—">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://minify</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">minify</span>
            <span class="prompt-arrow">→</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Enter your input..."
            spellcheck="false"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="process-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">Process</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">•</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://minify.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Code Minifier" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // Code Minifier Tool Implementation
  (function() {
    const inputCode = document.getElementById('input-code');
    const outputCode = document.getElementById('output-code');
    const inputSize = document.getElementById('input-size');
    const inputLines = document.getElementById('input-lines');
    const outputSize = document.getElementById('output-size');
    const compressionRatio = document.getElementById('compression-ratio');
    const comparisonModal = document.getElementById('comparison-modal');
    
    let currentLanguage = 'html';
    
    // Sample code for each language
    const sampleCode = {
      html: `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sample HTML Page</title>
    <!-- This is a comment -->
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Welcome to our website</h1>
        <p>This is a sample paragraph with some text content.</p>
        <ul>
            <li>First item</li>
            <li>Second item</li>
            <li>Third item</li>
        </ul>
    </div>
</body>
</html>`,
      css: `/* Main styles for the website */
body {
    font-family: 'Helvetica Neue', Arial, sans-serif;
    margin: 0;
    padding: 0;
    line-height: 1.6;
    color: #333333;
    background-color: #ffffff;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

/* Header styles */
.header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 2rem 0;
    text-align: center;
}

.header h1 {
    margin: 0;
    font-size: 2.5rem;
    font-weight: 300;
}

/* Button styles */
.btn {
    display: inline-block;
    padding: 12px 24px;
    background-color: #007bff;
    color: #ffffff;
    text-decoration: none;
    border-radius: 4px;
    transition: all 0.3s ease;
}

.btn:hover {
    background-color: #0056b3;
    transform: translateY(-2px);
}`,
      js: `// Sample JavaScript code for minification
function calculateTotal(items) {
    // Initialize total variable
    let total = 0;
    
    // Loop through all items
    for (let i = 0; i < items.length; i++) {
        const item = items[i];
        
        // Add item price to total
        if (item.price && typeof item.price === 'number') {
            total += item.price;
        }
    }
    
    return total;
}

// Event handler for form submission
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('checkout-form');
    const totalDisplay = document.getElementById('total-amount');
    
    if (form) {
        form.addEventListener('submit', function(event) {
            event.preventDefault();
            
            // Get cart items
            const cartItems = getCartItems();
            const total = calculateTotal(cartItems);
            
            // Display total
            if (totalDisplay) {
                totalDisplay.textContent = '$' + total.toFixed(2);
            }
            
            // Submit form
            submitOrder(cartItems, total);
        });
    }
});`
    };
    
    // Minification functions
    function minifyHTML(html) {
      let minified = html;
      
      if (document.getElementById('remove-comments').checked) {
        minified = minified.replace(/<!--[\s\S]*?-->/g, '');
      }
      
      if (document.getElementById('remove-whitespace').checked) {
        minified = minified.replace(/\s+/g, ' ').trim();
        minified = minified.replace(/>\s+</g, '><');
      }
      
      if (document.getElementById('remove-empty-attrs').checked) {
        minified = minified.replace(/\s[a-zA-Z-]+=""/g, '');
      }
      
      if (document.getElementById('collapse-inline').checked) {
        minified = minified.replace(/\s*\n\s*/g, '');
      }
      
      return minified;
    }
    
    function minifyCSS(css) {
      let minified = css;
      
      if (document.getElementById('css-remove-comments').checked) {
        minified = minified.replace(/\/\*[\s\S]*?\*\//g, '');
      }
      
      if (document.getElementById('css-remove-whitespace').checked) {
        minified = minified.replace(/\s+/g, ' ');
        minified = minified.replace(/\s*{\s*/g, '{');
        minified = minified.replace(/;\s*/g, ';');
        minified = minified.replace(/:\s*/g, ':');
        minified = minified.replace(/,\s*/g, ',');
        minified = minified.replace(/}\s*/g, '}');
        minified = minified.trim();
      }
      
      if (document.getElementById('optimize-colors').checked) {
        // Convert hex colors to shorter forms
        minified = minified.replace(/#([0-9a-f])\1([0-9a-f])\2([0-9a-f])\3/gi, '#$1$2$3');
        // Convert rgb to hex when shorter
        minified = minified.replace(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/g, function(match, r, g, b) {
          const hex = '#' + [r, g, b].map(x => parseInt(x).toString(16).padStart(2, '0')).join('');
          return hex.length <= match.length ? hex : match;
        });
      }
      
      return minified;
    }
    
    function minifyJS(js) {
      let minified = js;
      
      if (document.getElementById('js-remove-comments').checked) {
        // Remove single-line comments
        minified = minified.replace(/\/\/.*$/gm, '');
        // Remove multi-line comments
        minified = minified.replace(/\/\*[\s\S]*?\*\//g, '');
      }
      
      if (document.getElementById('js-remove-whitespace').checked) {
        // Remove extra whitespace
        minified = minified.replace(/\s+/g, ' ');
        // Remove spaces around operators and punctuation
        minified = minified.replace(/\s*([{}();,])\s*/g, '$1');
        minified = minified.replace(/\s*([=+\-*\/%<>!&|])\s*/g, '$1');
        minified = minified.trim();
      }
      
      if (!document.getElementById('preserve-semicolons').checked) {
        // Remove unnecessary semicolons
        minified = minified.replace(/;}/g, '}');
      }
      
      // Basic variable name mangling
      if (document.getElementById('mangle-names').checked) {
        const varMap = new Map();
        let counter = 0;
        
        minified = minified.replace(/\b(var|let|const)\s+([a-zA-Z_$][a-zA-Z0-9_$]*)/g, function(match, type, varName) {
          if (!varMap.has(varName)) {
            varMap.set(varName, 'a' + counter++);
          }
          return type + ' ' + varMap.get(varName);
        });
        
        // Replace variable references
        for (const [original, mangled] of varMap) {
          const regex = new RegExp('\\b' + original + '\\b', 'g');
          minified = minified.replace(regex, mangled);
        }
      }
      
      return minified;
    }
    
    function beautifyCode(code, language) {
      let beautified = code;
      
      switch (language) {
        case 'html':
          beautified = beautified.replace(/></g, '>\\n<');
          break;
        case 'css':
          beautified = beautified.replace(/;/g, ';\\n  ');
          beautified = beautified.replace(/{/g, ' {\\n  ');
          beautified = beautified.replace(/}/g, '\\n}\\n');
          break;
        case 'js':
          beautified = beautified.replace(/{/g, ' {\\n  ');
          beautified = beautified.replace(/}/g, '\\n}\\n');
          beautified = beautified.replace(/;/g, ';\\n  ');
          break;
      }
      
      return beautified;
    }
    
    function updateLanguage(lang) {
      currentLanguage = lang;
      
      // Update tab states
      document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      document.querySelector(`[data-lang="${lang}"]`).classList.add('active');
      
      // Show/hide options
      document.querySelectorAll('.option-group').forEach(group => {
        group.style.display = 'none';
      });
      document.querySelector(`.${lang}-options`).style.display = 'contents';
      
      // Update placeholder
      const placeholders = {
        html: 'Paste your HTML code here...',
        css: 'Paste your CSS code here...',
        js: 'Paste your JavaScript code here...'
      };
      inputCode.placeholder = placeholders[lang];
    }
    
    function updateStats() {
      const input = inputCode.value;
      const output = outputCode.value;
      
      // Input stats
      const inputBytes = new Blob([input]).size;
      const inputLineCount = input.split('\\n').length;
      inputSize.textContent = formatBytes(inputBytes);
      inputLines.textContent = `${inputLineCount} lines`;
      
      // Output stats
      const outputBytes = new Blob([output]).size;
      outputSize.textContent = formatBytes(outputBytes);
      
      // Compression ratio
      const saved = inputBytes - outputBytes;
      const ratio = inputBytes > 0 ? (saved / inputBytes * 100).toFixed(1) : 0;
      compressionRatio.textContent = `${ratio}% saved`;
      
      // Update detailed stats
      if (document.getElementById('stat-original')) {
        document.getElementById('stat-original').textContent = formatBytes(inputBytes);
        document.getElementById('stat-minified').textContent = formatBytes(outputBytes);
        document.getElementById('stat-saved').textContent = formatBytes(saved);
        document.getElementById('stat-compression').textContent = ratio + '%';
        
        // Calculate approximate load time saved
        const timeSaved = (saved * 8 / 1000000).toFixed(0);
        document.getElementById('stat-time').textContent = timeSaved + 'ms';
        
        // Lines removed
        const outputLines = output.split('\\n').length;
        const linesRemoved = Math.max(0, inputLineCount - outputLines);
        document.getElementById('stat-lines').textContent = linesRemoved;
      }
    }
    
    function formatBytes(bytes) {
      if (bytes === 0) return '0 bytes';
      const k = 1024;
      const sizes = ['bytes', 'KB', 'MB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
    }
    
    function performMinification() {
      const input = inputCode.value;
      if (!input.trim()) return;
      
      let minified = '';
      
      switch (currentLanguage) {
        case 'html':
          minified = minifyHTML(input);
          break;
        case 'css':
          minified = minifyCSS(input);
          break;
        case 'js':
          minified = minifyJS(input);
          break;
      }
      
      outputCode.value = minified;
      updateStats();
    }
    
    // Event listeners
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        updateLanguage(e.target.dataset.lang);
      });
    });
    
    document.getElementById('minify-btn')?.addEventListener('click', performMinification);
    
    document.getElementById('beautify-btn')?.addEventListener('click', () => {
      const input = inputCode.value;
      if (input.trim()) {
        outputCode.value = beautifyCode(input, currentLanguage);
        updateStats();
      }
    });
    
    document.getElementById('sample-btn')?.addEventListener('click', () => {
      inputCode.value = sampleCode[currentLanguage];
      updateStats();
    });
    
    document.getElementById('paste-btn')?.addEventListener('click', async () => {
      try {
        const text = await navigator.clipboard.readText();
        inputCode.value = text;
        updateStats();
      } catch (err) {
        console.error('Failed to paste:', err);
      }
    });
    
    document.getElementById('clear-input-btn')?.addEventListener('click', () => {
      inputCode.value = '';
      outputCode.value = '';
      updateStats();
    });
    
    document.getElementById('copy-output-btn')?.addEventListener('click', async () => {
      if (outputCode.value) {
        try {
          await navigator.clipboard.writeText(outputCode.value);
        } catch (err) {
          console.error('Failed to copy:', err);
        }
      }
    });
    
    document.getElementById('download-btn')?.addEventListener('click', () => {
      if (outputCode.value) {
        const extensions = { html: 'html', css: 'css', js: 'js' };
        const mimeTypes = { 
          html: 'text/html',
          css: 'text/css',
          js: 'application/javascript'
        };
        
        const blob = new Blob([outputCode.value], { type: mimeTypes[currentLanguage] });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `minified.${extensions[currentLanguage]}`;
        a.click();
        URL.revokeObjectURL(url);
      }
    });
    
    document.getElementById('compare-btn')?.addEventListener('click', () => {
      if (inputCode.value && outputCode.value) {
        document.getElementById('original-display').textContent = inputCode.value;
        document.getElementById('minified-display').textContent = outputCode.value;
        comparisonModal.style.display = 'flex';
      }
    });
    
    document.getElementById('modal-close')?.addEventListener('click', () => {
      comparisonModal.style.display = 'none';
    });
    
    comparisonModal?.addEventListener('click', (e) => {
      if (e.target === comparisonModal) {
        comparisonModal.style.display = 'none';
      }
    });
    
    document.getElementById('file-input')?.addEventListener('change', async (e) => {
      const file = e.target.files?.[0];
      if (file) {
        const text = await file.text();
        inputCode.value = text;
        
        // Auto-detect language from file extension
        const extension = file.name.split('.').pop()?.toLowerCase();
        if (extension === 'html' || extension === 'htm') {
          updateLanguage('html');
        } else if (extension === 'css') {
          updateLanguage('css');
        } else if (extension === 'js') {
          updateLanguage('js');
        }
        
        updateStats();
      }
    });
    
    inputCode?.addEventListener('input', updateStats);
    
    // Initialize
    updateLanguage('html');
    inputCode.value = sampleCode.html;
    updateStats();
  })();
</script>