---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Case Converter - Caiatech">
  <CaiatechToolLayout 
    title="Case Converter" 
    description="Convert text case (upper, lower, camel, etc.)"
    icon="Aa">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="case-tool">
      <!-- Input Panel -->
      <div class="terminal-panel input-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://text.source</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
            <button class="terminal-action" id="clear-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="sample-btn" title="Load Sample">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                <polyline points="14,2 14,8 20,8"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">case</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <textarea 
            id="text-input"
            class="case-input"
            placeholder="Enter your text here to convert between different case formats..."
            spellcheck="false"
          ></textarea>
          <div class="input-stats">
            <span id="input-stats">0 characters, 0 words</span>
          </div>
        </div>
      </div>

      <!-- Bulk Actions -->
      <div class="control-center">
        <div class="control-grid">
          <button id="copy-all-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
              Copy All Results
            </span>
          </button>
          <button id="download-btn" class="cyber-btn secondary">
            <span class="btn-text">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
              Download Results
            </span>
          </button>
        </div>
      </div>

      <!-- Case Conversion Grid -->
      <div class="conversion-grid">
        <!-- lowercase -->
        <div class="terminal-panel case-option">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">üìè lowercase</span>
            <div class="terminal-actions">
              <button class="terminal-action copy-btn" data-target="lowercase-result" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="case-description">All letters in lowercase</div>
            <textarea id="lowercase-result" class="case-result" readonly></textarea>
            <div class="case-example">Example: hello world example</div>
          </div>
        </div>

        <!-- UPPERCASE -->
        <div class="terminal-panel case-option">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">üìè UPPERCASE</span>
            <div class="terminal-actions">
              <button class="terminal-action copy-btn" data-target="uppercase-result" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="case-description">All letters in uppercase</div>
            <textarea id="uppercase-result" class="case-result" readonly></textarea>
            <div class="case-example">Example: HELLO WORLD EXAMPLE</div>
          </div>
        </div>

        <!-- Title Case -->
        <div class="terminal-panel case-option">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">üé© Title Case</span>
            <div class="terminal-actions">
              <button class="terminal-action copy-btn" data-target="title-result" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="case-description">First letter of each word capitalized</div>
            <textarea id="title-result" class="case-result" readonly></textarea>
            <div class="case-example">Example: Hello World Example</div>
          </div>
        </div>

        <!-- Sentence case -->
        <div class="terminal-panel case-option">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">üìù Sentence case</span>
            <div class="terminal-actions">
              <button class="terminal-action copy-btn" data-target="sentence-result" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="case-description">First letter capitalized, rest lowercase</div>
            <textarea id="sentence-result" class="case-result" readonly></textarea>
            <div class="case-example">Example: Hello world example</div>
          </div>
        </div>

        <!-- camelCase -->
        <div class="terminal-panel case-option">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">üê™ camelCase</span>
            <div class="terminal-actions">
              <button class="terminal-action copy-btn" data-target="camel-result" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="case-description">First letter lowercase, subsequent words capitalized</div>
            <textarea id="camel-result" class="case-result" readonly></textarea>
            <div class="case-example">Example: helloWorldExample</div>
          </div>
        </div>

        <!-- PascalCase -->
        <div class="terminal-panel case-option">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">üéØ PascalCase</span>
            <div class="terminal-actions">
              <button class="terminal-action copy-btn" data-target="pascal-result" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="case-description">First letter of each word capitalized, no spaces</div>
            <textarea id="pascal-result" class="case-result" readonly></textarea>
            <div class="case-example">Example: HelloWorldExample</div>
          </div>
        </div>

        <!-- snake_case -->
        <div class="terminal-panel case-option">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">üêç snake_case</span>
            <div class="terminal-actions">
              <button class="terminal-action copy-btn" data-target="snake-result" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="case-description">Lowercase words separated by underscores</div>
            <textarea id="snake-result" class="case-result" readonly></textarea>
            <div class="case-example">Example: hello_world_example</div>
          </div>
        </div>

        <!-- kebab-case -->
        <div class="terminal-panel case-option">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">üîó kebab-case</span>
            <div class="terminal-actions">
              <button class="terminal-action copy-btn" data-target="kebab-result" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="case-description">Lowercase words separated by hyphens</div>
            <textarea id="kebab-result" class="case-result" readonly></textarea>
            <div class="case-example">Example: hello-world-example</div>
          </div>
        </div>

        <!-- TRAIN-CASE -->
        <div class="terminal-panel case-option">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">üöÇ TRAIN-CASE</span>
            <div class="terminal-actions">
              <button class="terminal-action copy-btn" data-target="train-result" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="case-description">Uppercase words separated by hyphens</div>
            <textarea id="train-result" class="case-result" readonly></textarea>
            <div class="case-example">Example: HELLO-WORLD-EXAMPLE</div>
          </div>
        </div>

        <!-- CONSTANT_CASE -->
        <div class="terminal-panel case-option">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">üìã CONSTANT_CASE</span>
            <div class="terminal-actions">
              <button class="terminal-action copy-btn" data-target="constant-result" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="case-description">Uppercase words separated by underscores</div>
            <textarea id="constant-result" class="case-result" readonly></textarea>
            <div class="case-example">Example: HELLO_WORLD_EXAMPLE</div>
          </div>
        </div>

        <!-- dot.case -->
        <div class="terminal-panel case-option">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">‚Ä¢ dot.case</span>
            <div class="terminal-actions">
              <button class="terminal-action copy-btn" data-target="dot-result" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="case-description">Lowercase words separated by dots</div>
            <textarea id="dot-result" class="case-result" readonly></textarea>
            <div class="case-example">Example: hello.world.example</div>
          </div>
        </div>

        <!-- path/case -->
        <div class="terminal-panel case-option">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">üìÅ path/case</span>
            <div class="terminal-actions">
              <button class="terminal-action copy-btn" data-target="path-result" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="case-description">Lowercase words separated by slashes</div>
            <textarea id="path-result" class="case-result" readonly></textarea>
            <div class="case-example">Example: hello/world/example</div>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Case Converter" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .case-tool {
    display: grid;
    gap: 1.5rem;
  }

  .conversion-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 1.5rem;
  }

  @media (max-width: 968px) {
    .conversion-grid {
      grid-template-columns: 1fr;
    }
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Case-specific styles */
  .case-input {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 1rem;
    width: 100%;
    min-height: 120px;
    resize: vertical;
    transition: all 0.3s;
    line-height: 1.5;
  }

  .case-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .input-stats {
    margin-top: 0.75rem;
    padding: 0.5rem 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 4px;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text-secondary);
  }

  .case-description {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text-secondary);
    margin-bottom: 0.75rem;
    padding: 0.5rem 0;
  }

  .case-result {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 0.75rem;
    width: 100%;
    min-height: 80px;
    resize: none;
    outline: none;
    line-height: 1.4;
  }

  .case-result:focus {
    border-color: rgba(0, 212, 255, 0.3);
  }

  .case-example {
    margin-top: 0.75rem;
    padding: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.75rem;
    color: var(--color-text-secondary);
    font-style: italic;
    background: rgba(0, 212, 255, 0.05);
    border-radius: 4px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .copy-btn {
    transition: all 0.2s;
  }

  .copy-btn:hover {
    color: var(--color-accent);
    transform: scale(1.1);
  }

  /* Case-specific terminal title colors */
  .case-option:nth-child(1) .terminal-title { color: #ff6b6b; }
  .case-option:nth-child(2) .terminal-title { color: #4ecdc4; }
  .case-option:nth-child(3) .terminal-title { color: #45b7d1; }
  .case-option:nth-child(4) .terminal-title { color: #f7b801; }
  .case-option:nth-child(5) .terminal-title { color: #5f27cd; }
  .case-option:nth-child(6) .terminal-title { color: #00d2d3; }
  .case-option:nth-child(7) .terminal-title { color: #ff9ff3; }
  .case-option:nth-child(8) .terminal-title { color: #54a0ff; }
  .case-option:nth-child(9) .terminal-title { color: #5f27cd; }
  .case-option:nth-child(10) .terminal-title { color: #ff6348; }
  .case-option:nth-child(11) .terminal-title { color: #2ed573; }
  .case-option:nth-child(12) .terminal-title { color: #ffa502; }

  /* Case-specific border colors */
  .case-option:nth-child(1) { border-top: 2px solid #ff6b6b; }
  .case-option:nth-child(2) { border-top: 2px solid #4ecdc4; }
  .case-option:nth-child(3) { border-top: 2px solid #45b7d1; }
  .case-option:nth-child(4) { border-top: 2px solid #f7b801; }
  .case-option:nth-child(5) { border-top: 2px solid #5f27cd; }
  .case-option:nth-child(6) { border-top: 2px solid #00d2d3; }
  .case-option:nth-child(7) { border-top: 2px solid #ff9ff3; }
  .case-option:nth-child(8) { border-top: 2px solid #54a0ff; }
  .case-option:nth-child(9) { border-top: 2px solid #5f27cd; }
  .case-option:nth-child(10) { border-top: 2px solid #ff6348; }
  .case-option:nth-child(11) { border-top: 2px solid #2ed573; }
  .case-option:nth-child(12) { border-top: 2px solid #ffa502; }

  /* Empty state styling */
  .case-result:empty::before {
    content: 'Enter text above to see conversion...';
    color: var(--color-text-secondary);
    font-style: italic;
    opacity: 0.7;
  }

  /* Copy feedback animation */
  .copy-btn.copied {
    color: #28ca42;
    transform: scale(1.2);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr;
      gap: 0.75rem;
    }

    .case-description {
      font-size: 0.75rem;
    }

    .case-example {
      font-size: 0.7rem;
    }

    .case-result {
      min-height: 60px;
      font-size: 0.85rem;
    }
  }
</style>

<script>
  // Case Converter - JavaScript Implementation
  const textInput = document.getElementById('text-input');
  const inputStats = document.getElementById('input-stats');
  
  const results = {
    lowercase: document.getElementById('lowercase-result'),
    uppercase: document.getElementById('uppercase-result'),
    title: document.getElementById('title-result'),
    sentence: document.getElementById('sentence-result'),
    camel: document.getElementById('camel-result'),
    pascal: document.getElementById('pascal-result'),
    snake: document.getElementById('snake-result'),
    kebab: document.getElementById('kebab-result'),
    train: document.getElementById('train-result'),
    constant: document.getElementById('constant-result'),
    dot: document.getElementById('dot-result'),
    path: document.getElementById('path-result')
  };
  
  const sampleText = `Hello World Example
convert this text
JavaScript Variable Name
API_ENDPOINT_URL
user-profile-settings`;
  
  function updateStats() {
    const text = textInput.value;
    const chars = text.length;
    const words = text.trim() ? text.trim().split(/\s+/).length : 0;
    
    if (inputStats) {
      inputStats.textContent = `${chars} characters, ${words} words`;
    }
  }
  
  function cleanText(text) {
    // Remove special characters but keep spaces, hyphens, underscores
    return text.replace(/[^\w\s\-_.]/g, '');
  }
  
  function toWords(text) {
    // Split on word boundaries, including camelCase, PascalCase, snake_case, kebab-case
    return text
      .replace(/([a-z])([A-Z])/g, '$1 $2') // camelCase -> camel Case
      .replace(/[\s\-_.]+/g, ' ') // Replace separators with spaces
      .split(' ')
      .filter(word => word.length > 0)
      .map(word => word.toLowerCase());
  }
  
  function convertText() {
    const input = textInput.value;
    if (!input.trim()) {
      // Clear all results
      Object.values(results).forEach(textarea => {
        if (textarea) textarea.value = '';
      });
      return;
    }
    
    const lines = input.split('\n');
    const convertedLines = {};
    
    // Initialize arrays for each conversion type
    Object.keys(results).forEach(key => {
      convertedLines[key] = [];
    });
    
    lines.forEach(line => {
      const cleanedLine = cleanText(line);
      const words = toWords(cleanedLine);
      
      if (words.length === 0) {
        // Empty line - preserve it
        Object.keys(results).forEach(key => {
          convertedLines[key].push('');
        });
        return;
      }
      
      // lowercase
      convertedLines.lowercase.push(words.join(' '));
      
      // UPPERCASE
      convertedLines.uppercase.push(words.join(' ').toUpperCase());
      
      // Title Case
      convertedLines.title.push(
        words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')
      );
      
      // Sentence case
      convertedLines.sentence.push(
        words.map((word, index) => 
          index === 0 ? word.charAt(0).toUpperCase() + word.slice(1) : word
        ).join(' ')
      );
      
      // camelCase
      convertedLines.camel.push(
        words.map((word, index) => 
          index === 0 ? word : word.charAt(0).toUpperCase() + word.slice(1)
        ).join('')
      );
      
      // PascalCase
      convertedLines.pascal.push(
        words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join('')
      );
      
      // snake_case
      convertedLines.snake.push(words.join('_'));
      
      // kebab-case
      convertedLines.kebab.push(words.join('-'));
      
      // TRAIN-CASE
      convertedLines.train.push(words.join('-').toUpperCase());
      
      // CONSTANT_CASE
      convertedLines.constant.push(words.join('_').toUpperCase());
      
      // dot.case
      convertedLines.dot.push(words.join('.'));
      
      // path/case
      convertedLines.path.push(words.join('/'));
    });
    
    // Update all result textareas
    Object.entries(results).forEach(([key, textarea]) => {
      if (textarea) {
        textarea.value = convertedLines[key].join('\n');
      }
    });
  }
  
  // Event listeners
  textInput?.addEventListener('input', () => {
    updateStats();
    convertText();
  });
  
  // Copy buttons
  document.querySelectorAll('.copy-btn').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const target = e.target.getAttribute('data-target');
      const textarea = document.getElementById(target);
      
      if (textarea && textarea.value) {
        try {
          await navigator.clipboard.writeText(textarea.value);
          const originalContent = e.target.innerHTML;
          e.target.innerHTML = '‚úì';
          e.target.style.color = '#28ca42';
          setTimeout(() => {
            e.target.innerHTML = originalContent;
            e.target.style.color = '';
          }, 2000);
        } catch (err) {
          console.error('Failed to copy:', err);
        }
      }
    });
  });
  
  // Action buttons
  document.getElementById('paste-btn')?.addEventListener('click', async () => {
    try {
      const text = await navigator.clipboard.readText();
      textInput.value = text;
      updateStats();
      convertText();
    } catch (err) {
      console.error('Failed to paste:', err);
    }
  });
  
  document.getElementById('clear-btn')?.addEventListener('click', () => {
    textInput.value = '';
    updateStats();
    convertText();
  });
  
  document.getElementById('sample-btn')?.addEventListener('click', () => {
    textInput.value = sampleText;
    updateStats();
    convertText();
  });
  
  document.getElementById('copy-all-btn')?.addEventListener('click', async () => {
    const allResults = Object.entries(results)
      .map(([key, textarea]) => {
        const value = textarea?.value || '';
        return `${key.toUpperCase()}:\n${value}\n`;
      })
      .join('\n');
    
    if (allResults.trim()) {
      try {
        await navigator.clipboard.writeText(allResults);
        const btn = document.getElementById('copy-all-btn');
        if (btn) {
          const originalContent = btn.innerHTML;
          btn.innerHTML = '<span class="btn-text">‚úì Copied All!</span>';
          setTimeout(() => {
            btn.innerHTML = originalContent;
          }, 2000);
        }
      } catch (err) {
        console.error('Failed to copy all:', err);
      }
    }
  });
  
  document.getElementById('download-btn')?.addEventListener('click', () => {
    const input = textInput.value;
    if (!input.trim()) return;
    
    const content = `CASE CONVERSION RESULTS - Generated by Caiatech
Original Input:
${input}

CONVERSIONS:
${Object.entries(results)
      .map(([key, textarea]) => {
        const value = textarea?.value || '';
        return `${key.toUpperCase()}:
${value}`;
      })
      .join('\n\n')}

---
Generated by Caiatech Case Converter
Visit: https://caiatech.com/tools/case`;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'case-conversions.txt';
    a.click();
    URL.revokeObjectURL(url);
  });
  
  // Initialize
  updateStats();
</script>