---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="User Agent Parser - Caiatech">
  <CaiatechToolLayout 
    title="User Agent Parser" 
    description="Parse and analyze user agent strings"
    icon="UA">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://ua</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">ua</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Enter User Agent string to parse and analyze..."
            spellcheck="false"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="process-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">üïµÔ∏è Parse UA</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://ua.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="User Agent Parser" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // User Agent Parser and Analyzer
  (function() {
    // DOM elements
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const processBtn = document.getElementById('process-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    // User Agent Parsing Functions
    function parseUserAgent(userAgent) {
      const ua = userAgent.trim();
      if (!ua) return null;
      
      const result = {
        original: ua,
        browser: { name: 'Unknown', version: 'Unknown' },
        os: { name: 'Unknown', version: 'Unknown', architecture: 'Unknown' },
        device: { type: 'Desktop', vendor: 'Unknown', model: 'Unknown' },
        engine: { name: 'Unknown', version: 'Unknown' },
        features: [],
        security: { isBot: false, riskLevel: 'Low', concerns: [] }
      };
      
      // Parse Browser
      result.browser = parseBrowser(ua);
      
      // Parse Operating System
      result.os = parseOperatingSystem(ua);
      
      // Parse Device
      result.device = parseDevice(ua);
      
      // Parse Engine
      result.engine = parseEngine(ua);
      
      // Extract Features
      result.features = extractFeatures(ua);
      
      // Security Analysis
      result.security = analyzeUserAgentSecurity(ua);
      
      return result;
    }
    
    function parseBrowser(ua) {
      const browsers = [
        { name: 'Chrome', pattern: /Chrome\/([0-9.]+)/, versionIndex: 1 },
        { name: 'Firefox', pattern: /Firefox\/([0-9.]+)/, versionIndex: 1 },
        { name: 'Safari', pattern: /Version\/([0-9.]+).*Safari/, versionIndex: 1 },
        { name: 'Edge', pattern: /Edg\/([0-9.]+)/, versionIndex: 1 },
        { name: 'Opera', pattern: /OPR\/([0-9.]+)/, versionIndex: 1 },
        { name: 'Internet Explorer', pattern: /MSIE ([0-9.]+)/, versionIndex: 1 },
        { name: 'Internet Explorer', pattern: /Trident.*rv:([0-9.]+)/, versionIndex: 1 }
      ];
      
      for (const browser of browsers) {
        const match = ua.match(browser.pattern);
        if (match) {
          return {
            name: browser.name,
            version: match[browser.versionIndex] || 'Unknown'
          };
        }
      }
      
      return { name: 'Unknown', version: 'Unknown' };
    }
    
    function parseOperatingSystem(ua) {
      const systems = [
        { name: 'Windows', pattern: /Windows NT ([0-9.]+)/, versionMap: { '10.0': '10', '6.3': '8.1', '6.2': '8', '6.1': '7' } },
        { name: 'macOS', pattern: /Mac OS X ([0-9_]+)/, versionIndex: 1 },
        { name: 'iOS', pattern: /OS ([0-9_]+) like Mac OS X/, versionIndex: 1 },
        { name: 'Android', pattern: /Android ([0-9.]+)/, versionIndex: 1 },
        { name: 'Linux', pattern: /Linux/, versionIndex: null },
        { name: 'Chrome OS', pattern: /CrOS/, versionIndex: null }
      ];
      
      let architecture = 'Unknown';
      if (ua.includes('x86_64') || ua.includes('Win64') || ua.includes('WOW64')) {
        architecture = '64-bit';
      } else if (ua.includes('i386') || ua.includes('i686') || ua.includes('Win32')) {
        architecture = '32-bit';
      } else if (ua.includes('ARM') || ua.includes('arm64')) {
        architecture = 'ARM';
      }
      
      for (const system of systems) {
        const match = ua.match(system.pattern);
        if (match) {
          let version = 'Unknown';
          if (system.versionIndex && match[system.versionIndex]) {
            version = match[system.versionIndex].replace(/_/g, '.');
            if (system.versionMap && system.versionMap[version]) {
              version = system.versionMap[version];
            }
          }
          
          return {
            name: system.name,
            version: version,
            architecture: architecture
          };
        }
      }
      
      return { name: 'Unknown', version: 'Unknown', architecture: architecture };
    }
    
    function parseDevice(ua) {
      // Mobile detection
      if (/Mobile|Android|iPhone|iPad|iPod|BlackBerry|Windows Phone/i.test(ua)) {
        if (/iPad/i.test(ua)) {
          return { type: 'Tablet', vendor: 'Apple', model: 'iPad' };
        } else if (/iPhone/i.test(ua)) {
          return { type: 'Mobile', vendor: 'Apple', model: 'iPhone' };
        } else if (/Android/i.test(ua)) {
          const vendor = ua.match(/; ([^;]+) Build/);
          return { 
            type: /Mobile/i.test(ua) ? 'Mobile' : 'Tablet', 
            vendor: 'Android Device', 
            model: vendor ? vendor[1] : 'Unknown' 
          };
        }
        return { type: 'Mobile', vendor: 'Unknown', model: 'Unknown' };
      }
      
      // Desktop/Laptop
      return { type: 'Desktop', vendor: 'Unknown', model: 'Unknown' };
    }
    
    function parseEngine(ua) {
      const engines = [
        { name: 'Blink', pattern: /Chrome\/|Chromium\// },
        { name: 'WebKit', pattern: /WebKit\/([0-9.]+)/, versionIndex: 1 },
        { name: 'Gecko', pattern: /Gecko\/([0-9]+)/, versionIndex: 1 },
        { name: 'Trident', pattern: /Trident\/([0-9.]+)/, versionIndex: 1 },
        { name: 'EdgeHTML', pattern: /Edge\/([0-9.]+)/, versionIndex: 1 }
      ];
      
      for (const engine of engines) {
        const match = ua.match(engine.pattern);
        if (match) {
          return {
            name: engine.name,
            version: engine.versionIndex && match[engine.versionIndex] ? match[engine.versionIndex] : 'Unknown'
          };
        }
      }
      
      return { name: 'Unknown', version: 'Unknown' };
    }
    
    function extractFeatures(ua) {
      const features = [];
      
      if (ua.includes('WebGL')) features.push('WebGL Support');
      if (ua.includes('Mobile')) features.push('Mobile Device');
      if (ua.includes('Touch')) features.push('Touch Support');
      if (ua.includes('Headless')) features.push('Headless Browser');
      if (ua.includes('bot') || ua.includes('crawler') || ua.includes('spider')) features.push('Bot/Crawler');
      if (ua.includes('64-bit')) features.push('64-bit Architecture');
      if (ua.includes('WOW64')) features.push('WOW64 (32-bit on 64-bit Windows)');
      
      return features;
    }
    
    function analyzeUserAgentSecurity(ua) {
      const security = {
        isBot: false,
        riskLevel: 'Low',
        concerns: []
      };
      
      // Bot detection
      const botPatterns = [
        /bot/i, /crawler/i, /spider/i, /scraper/i, /curl/i, /wget/i,
        /python/i, /perl/i, /java/i, /php/i, /ruby/i,
        /Googlebot/i, /Bingbot/i, /facebookexternalhit/i, /Twitterbot/i
      ];
      
      security.isBot = botPatterns.some(pattern => pattern.test(ua));
      
      // Risk assessment
      if (security.isBot) {
        security.riskLevel = 'Medium';
        security.concerns.push('Automated traffic detected');
      }
      
      if (ua.length > 500) {
        security.riskLevel = 'Medium';
        security.concerns.push('Unusually long User-Agent string');
      }
      
      if (ua.includes('Headless')) {
        security.riskLevel = 'Medium';
        security.concerns.push('Headless browser detected');
      }
      
      if (!ua.includes('Mozilla') && !security.isBot) {
        security.riskLevel = 'Medium';
        security.concerns.push('Non-standard User-Agent format');
      }
      
      // Check for suspicious patterns
      const suspiciousPatterns = [
        /null/i, /undefined/i, /test/i, /fake/i, /custom/i
      ];
      
      if (suspiciousPatterns.some(pattern => pattern.test(ua))) {
        security.riskLevel = 'High';
        security.concerns.push('Potentially spoofed User-Agent');
      }
      
      if (security.concerns.length === 0) {
        security.concerns.push('No security concerns detected');
      }
      
      return security;
    }
    
    function formatParseResults(parsed) {
      if (!parsed) return 'Invalid User-Agent string';
      
      let result = '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\\n';
      result += '‚ïë         USER AGENT ANALYSIS            ‚ïë\\n';
      result += '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\\n\\n';
      
      // Browser Information
      result += 'BROWSER INFORMATION:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      result += '‚Ä¢ Name: ' + parsed.browser.name + '\\n';
      result += '‚Ä¢ Version: ' + parsed.browser.version + '\\n';
      result += '‚Ä¢ Engine: ' + parsed.engine.name;
      if (parsed.engine.version !== 'Unknown') {
        result += ' (v' + parsed.engine.version + ')';
      }
      result += '\\n\\n';
      
      // Operating System
      result += 'OPERATING SYSTEM:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      result += '‚Ä¢ OS: ' + parsed.os.name + '\\n';
      result += '‚Ä¢ Version: ' + parsed.os.version + '\\n';
      result += '‚Ä¢ Architecture: ' + parsed.os.architecture + '\\n\\n';
      
      // Device Information
      result += 'DEVICE INFORMATION:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      result += '‚Ä¢ Type: ' + parsed.device.type + '\\n';
      result += '‚Ä¢ Vendor: ' + parsed.device.vendor + '\\n';
      result += '‚Ä¢ Model: ' + parsed.device.model + '\\n\\n';
      
      // Features
      if (parsed.features.length > 0) {
        result += 'DETECTED FEATURES:\\n';
        result += '‚îÄ'.repeat(40) + '\\n';
        parsed.features.forEach(feature => {
          result += '‚Ä¢ ' + feature + '\\n';
        });
        result += '\\n';
      }
      
      // Security Analysis
      result += 'SECURITY ANALYSIS:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      result += '‚Ä¢ Bot/Crawler: ' + (parsed.security.isBot ? 'Yes ‚ö†Ô∏è' : 'No ‚úÖ') + '\\n';
      result += '‚Ä¢ Risk Level: ' + parsed.security.riskLevel;
      if (parsed.security.riskLevel === 'High') {
        result += ' üî¥';
      } else if (parsed.security.riskLevel === 'Medium') {
        result += ' üü°';
      } else {
        result += ' üü¢';
      }
      result += '\\n';
      result += '‚Ä¢ Concerns:\\n';
      parsed.security.concerns.forEach(concern => {
        result += '  - ' + concern + '\\n';
      });
      result += '\\n';
      
      // Raw User Agent
      result += 'RAW USER AGENT:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      result += parsed.original + '\\n\\n';
      
      // Additional Info
      result += 'TECHNICAL DETAILS:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      result += '‚Ä¢ Length: ' + parsed.original.length + ' characters\\n';
      result += '‚Ä¢ Parsed on: ' + new Date().toISOString() + '\\n';
      result += '‚Ä¢ Components detected: ';
      
      const components = [];
      if (parsed.browser.name !== 'Unknown') components.push('Browser');
      if (parsed.os.name !== 'Unknown') components.push('OS');
      if (parsed.device.type !== 'Unknown') components.push('Device');
      if (parsed.engine.name !== 'Unknown') components.push('Engine');
      
      result += components.join(', ') + '\\n\\n';
      
      result += 'COMMON USE CASES:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      result += '‚Ä¢ Browser compatibility detection\\n';
      result += '‚Ä¢ Mobile/desktop responsive design\\n';
      result += '‚Ä¢ Analytics and user tracking\\n';
      result += '‚Ä¢ Security and fraud prevention\\n';
      result += '‚Ä¢ Content optimization\\n';
      
      return result;
    }
    
    function processInput() {
      const userAgent = input.value.trim();
      if (!userAgent) {
        setStatus('Please enter a User-Agent string', 'error');
        return;
      }
      
      setStatus('Parsing User-Agent...', 'working');
      
      try {
        const parsed = parseUserAgent(userAgent);
        const result = formatParseResults(parsed);
        
        output.textContent = result;
        setStatus('User-Agent parsed successfully!', 'success');
        updateStats();
      } catch (error) {
        setStatus('Error parsing User-Agent', 'error');
        output.textContent = 'Error: ' + error.message;
        updateStats();
      }
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'user-agent-analysis.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded analysis', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      const samples = [
        // Chrome on Windows
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        // Firefox on macOS
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:120.0) Gecko/20100101 Firefox/120.0',
        // Safari on iOS
        'Mozilla/5.0 (iPhone; CPU iPhone OS 17_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Mobile/15E148 Safari/604.1',
        // Chrome on Android
        'Mozilla/5.0 (Linux; Android 14; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36',
        // Edge on Windows
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0',
        // Bot example
        'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'
      ];
      
      const randomSample = samples[Math.floor(Math.random() * samples.length)];
      input.value = randomSample;
      processInput();
    }
    
    // Event listeners
    if (processBtn) processBtn.addEventListener('click', processInput);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          processInput();
        }
      }
    });
    
    // Initial stats
    updateStats();
    setStatus('Ready - Enter User-Agent string to parse', 'normal');
  })();
</script>