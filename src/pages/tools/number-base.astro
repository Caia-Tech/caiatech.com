---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Number Base Converter - Caiatech">
  <CaiatechToolLayout 
    title="Number Base Converter" 
    description="Convert between number bases"
    icon="123">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://number-base</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">number-base</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <div class="base-converter-form">
            <div class="form-group">
              <label for="number-input" class="form-label">Number:</label>
              <input 
                id="number-input" 
                class="form-input"
                type="text"
                placeholder="255, 0xFF, 0b11111111, 0o377"
                spellcheck="false"
              />
            </div>
            
            <div class="form-group">
              <label for="from-base" class="form-label">From Base:</label>
              <select id="from-base" class="form-select">
                <option value="auto">Auto-Detect</option>
                <option value="2">Binary (2)</option>
                <option value="8">Octal (8)</option>
                <option value="10" selected>Decimal (10)</option>
                <option value="16">Hexadecimal (16)</option>
                <option value="custom">Custom (2-36)</option>
              </select>
              <input 
                id="custom-from-base" 
                class="form-input custom-base-input"
                type="number"
                min="2"
                max="36"
                placeholder="2-36"
                style="display: none;"
              />
            </div>
            
            <div class="form-group">
              <label for="to-base" class="form-label">To Base:</label>
              <select id="to-base" class="form-select">
                <option value="all" selected>All Common</option>
                <option value="2">Binary (2)</option>
                <option value="8">Octal (8)</option>
                <option value="10">Decimal (10)</option>
                <option value="16">Hexadecimal (16)</option>
                <option value="custom">Custom (2-36)</option>
              </select>
              <input 
                id="custom-to-base" 
                class="form-input custom-base-input"
                type="number"
                min="2"
                max="36"
                placeholder="2-36"
                style="display: none;"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="convert-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">üîÑ Convert</span>
          </button>
          <button id="swap-btn" class="cyber-btn secondary">
            <span class="btn-text">‚ÜîÔ∏è Swap</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Value: <span id="decimal-value">0</span></span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Bits: <span id="bit-count">0</span></span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://number-base.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Number Base Converter" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Form styles */
  .base-converter-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-label {
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    font-weight: 500;
  }

  .form-input,
  .form-select {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 0.75rem;
    transition: all 0.3s;
  }

  .form-input:focus,
  .form-select:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .form-select option {
    background: var(--color-surface);
    color: var(--color-text);
  }

  .custom-base-input {
    margin-top: 0.5rem;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // Number Base Converter Tool
  (function() {
    const numberInput = document.getElementById('number-input');
    const fromBase = document.getElementById('from-base');
    const toBase = document.getElementById('to-base');
    const customFromBase = document.getElementById('custom-from-base');
    const customToBase = document.getElementById('custom-to-base');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const decimalValue = document.getElementById('decimal-value');
    const bitCount = document.getElementById('bit-count');
    
    const convertBtn = document.getElementById('convert-btn');
    const swapBtn = document.getElementById('swap-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    function updateStats() {
      const value = numberInput.value.trim();
      if (value) {
        try {
          const base = getFromBase();
          const decimal = convertToDecimal(value, base);
          decimalValue.textContent = decimal.toString();
          bitCount.textContent = decimal > 0 ? Math.floor(Math.log2(decimal)) + 1 : 0;
        } catch {
          decimalValue.textContent = '0';
          bitCount.textContent = '0';
        }
      } else {
        decimalValue.textContent = '0';
        bitCount.textContent = '0';
      }
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function getFromBase() {
      const selectedBase = fromBase.value;
      if (selectedBase === 'custom') {
        return parseInt(customFromBase.value) || 10;
      } else if (selectedBase === 'auto') {
        return detectBase(numberInput.value.trim());
      }
      return parseInt(selectedBase);
    }
    
    function getToBase() {
      const selectedBase = toBase.value;
      if (selectedBase === 'custom') {
        return parseInt(customToBase.value) || 10;
      }
      return selectedBase;
    }
    
    function detectBase(value) {
      value = value.toLowerCase();
      
      // Check for common prefixes
      if (value.startsWith('0x')) return 16;
      if (value.startsWith('0b')) return 2;
      if (value.startsWith('0o')) return 8;
      
      // Check if it's binary (only 0 and 1)
      if (/^[01]+$/.test(value)) return 2;
      
      // Check if it's octal (0-7)
      if (/^[0-7]+$/.test(value)) return 8;
      
      // Check if it's hex (contains a-f)
      if (/[a-f]/i.test(value)) return 16;
      
      // Default to decimal
      return 10;
    }
    
    function convertToDecimal(value, base) {
      value = value.trim().toLowerCase();
      
      // Remove common prefixes
      if (value.startsWith('0x') && base === 16) value = value.substring(2);
      if (value.startsWith('0b') && base === 2) value = value.substring(2);
      if (value.startsWith('0o') && base === 8) value = value.substring(2);
      
      // Validate the value for the given base
      const validChars = '0123456789abcdefghijklmnopqrstuvwxyz'.substring(0, base);
      for (let char of value) {
        if (!validChars.includes(char)) {
          throw new Error('Invalid character for base ' + base + ': ' + char);
        }
      }
      
      return parseInt(value, base);
    }
    
    function convertFromDecimal(decimal, base) {
      if (decimal === 0) return '0';
      return decimal.toString(base).toUpperCase();
    }
    
    function convertNumber() {
      const value = numberInput.value.trim();
      if (!value) {
        setStatus('Please enter a number to convert', 'error');
        return;
      }
      
      try {
        const sourceBase = getFromBase();
        const targetBase = getToBase();
        
        // Convert to decimal first
        const decimal = convertToDecimal(value, sourceBase);
        
        if (isNaN(decimal)) {
          throw new Error('Invalid number');
        }
        
        let result = '';
        
        if (targetBase === 'all') {
          // Convert to all common bases
          result = generateAllBasesResult(decimal, value, sourceBase);
        } else {
          // Convert to specific base
          const converted = convertFromDecimal(decimal, parseInt(targetBase));
          result = generateSingleBaseResult(value, sourceBase, converted, parseInt(targetBase), decimal);
        }
        
        output.textContent = result;
        setStatus('Conversion successful!', 'success');
        updateStats();
      } catch (error) {
        setStatus('Conversion failed: ' + error.message, 'error');
        output.textContent = 'ERROR: ' + error.message;
      }
    }
    
    function generateAllBasesResult(decimal, original, sourceBase) {
      let result = '';
      result += '‚îå‚îÄ‚îÄ‚îÄ NUMBER BASE CONVERSION RESULTS ‚îÄ‚îÄ‚îÄ‚îê\\n';
      result += '‚îÇ                                      ‚îÇ\\n';
      result += '‚îÇ Original: ' + original.padEnd(25) + '‚îÇ\\n';
      result += '‚îÇ Base: ' + sourceBase.toString().padEnd(29) + '‚îÇ\\n';
      result += '‚îÇ Decimal Value: ' + decimal.toString().padEnd(20) + '‚îÇ\\n';
      result += '‚îÇ                                      ‚îÇ\\n';
      result += '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\\n\\n';
      
      result += 'CONVERSIONS:\\n';
      result += '‚îÄ'.repeat(60) + '\\n\\n';
      
      // Binary
      const binary = convertFromDecimal(decimal, 2);
      result += 'BINARY (Base 2):\\n';
      result += formatBinary(binary) + '\\n\\n';
      
      // Octal
      result += 'OCTAL (Base 8):\\n';
      result += '0o' + convertFromDecimal(decimal, 8) + '\\n\\n';
      
      // Decimal
      result += 'DECIMAL (Base 10):\\n';
      result += decimal.toString() + '\\n\\n';
      
      // Hexadecimal
      result += 'HEXADECIMAL (Base 16):\\n';
      result += '0x' + convertFromDecimal(decimal, 16) + '\\n\\n';
      
      // Additional bases
      result += 'OTHER BASES:\\n';
      result += '‚îÄ'.repeat(30) + '\\n';
      result += 'Base 3:  ' + convertFromDecimal(decimal, 3) + '\\n';
      result += 'Base 5:  ' + convertFromDecimal(decimal, 5) + '\\n';
      result += 'Base 12: ' + convertFromDecimal(decimal, 12) + '\\n';
      result += 'Base 20: ' + convertFromDecimal(decimal, 20) + '\\n';
      result += 'Base 32: ' + convertFromDecimal(decimal, 32) + '\\n';
      result += 'Base 36: ' + convertFromDecimal(decimal, 36) + '\\n\\n';
      
      // Bit information
      result += 'BIT INFORMATION:\\n';
      result += '‚îÄ'.repeat(30) + '\\n';
      result += 'Bits required: ' + (decimal > 0 ? Math.floor(Math.log2(decimal)) + 1 : 0) + '\\n';
      result += 'Bytes required: ' + Math.ceil((decimal > 0 ? Math.floor(Math.log2(decimal)) + 1 : 0) / 8) + '\\n';
      result += 'Signed 8-bit:  ' + (decimal <= 127 ? 'Yes' : 'No') + '\\n';
      result += 'Signed 16-bit: ' + (decimal <= 32767 ? 'Yes' : 'No') + '\\n';
      result += 'Signed 32-bit: ' + (decimal <= 2147483647 ? 'Yes' : 'No') + '\\n';
      
      return result;
    }
    
    function generateSingleBaseResult(original, sourceBase, converted, targetBase, decimal) {
      let result = '';
      result += '‚îå‚îÄ‚îÄ‚îÄ NUMBER BASE CONVERSION ‚îÄ‚îÄ‚îÄ‚îê\\n';
      result += '‚îÇ                              ‚îÇ\\n';
      result += '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\\n\\n';
      
      result += 'FROM:\\n';
      result += '‚îÄ'.repeat(30) + '\\n';
      result += 'Value: ' + original + '\\n';
      result += 'Base:  ' + sourceBase + '\\n';
      result += 'Decimal: ' + decimal + '\\n\\n';
      
      result += 'TO:\\n';
      result += '‚îÄ'.repeat(30) + '\\n';
      result += 'Base:  ' + targetBase + '\\n';
      result += 'Value: ' + converted + '\\n\\n';
      
      // Show formatted output for binary
      if (targetBase === 2) {
        result += 'FORMATTED BINARY:\\n';
        result += '‚îÄ'.repeat(30) + '\\n';
        result += formatBinary(converted) + '\\n\\n';
      }
      
      // Show with prefix if applicable
      if (targetBase === 2) {
        result += 'With prefix: 0b' + converted + '\\n';
      } else if (targetBase === 8) {
        result += 'With prefix: 0o' + converted + '\\n';
      } else if (targetBase === 16) {
        result += 'With prefix: 0x' + converted + '\\n';
      }
      
      return result;
    }
    
    function formatBinary(binary) {
      // Format binary in groups of 4
      let formatted = '0b';
      const padded = binary.padStart(Math.ceil(binary.length / 4) * 4, '0');
      for (let i = 0; i < padded.length; i += 4) {
        if (i > 0) formatted += ' ';
        formatted += padded.substring(i, i + 4);
      }
      return formatted;
    }
    
    function swapBases() {
      const fromVal = fromBase.value;
      const toVal = toBase.value;
      
      // Can't swap if 'all' or 'auto' is selected
      if (toVal === 'all' || fromVal === 'auto') {
        setStatus('Cannot swap with auto-detect or all bases', 'error');
        return;
      }
      
      fromBase.value = toVal;
      toBase.value = fromVal;
      
      // Handle custom base inputs
      if (fromVal === 'custom' && toVal === 'custom') {
        const tempVal = customFromBase.value;
        customFromBase.value = customToBase.value;
        customToBase.value = tempVal;
      }
      
      updateCustomBaseVisibility();
      setStatus('Bases swapped', 'success');
    }
    
    function updateCustomBaseVisibility() {
      customFromBase.style.display = fromBase.value === 'custom' ? 'block' : 'none';
      customToBase.style.display = toBase.value === 'custom' ? 'block' : 'none';
    }
    
    function clearAll() {
      numberInput.value = '';
      fromBase.value = '10';
      toBase.value = 'all';
      customFromBase.value = '';
      customToBase.value = '';
      output.textContent = '';
      updateCustomBaseVisibility();
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      numberInput.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'number-conversion.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        numberInput.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      numberInput.value = '255';
      fromBase.value = '10';
      toBase.value = 'all';
      updateCustomBaseVisibility();
      convertNumber();
    }
    
    // Event listeners
    if (convertBtn) convertBtn.addEventListener('click', convertNumber);
    if (swapBtn) swapBtn.addEventListener('click', swapBases);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Base selection change handlers
    fromBase.addEventListener('change', updateCustomBaseVisibility);
    toBase.addEventListener('change', updateCustomBaseVisibility);
    
    // Update stats on input
    numberInput.addEventListener('input', updateStats);
    
    // Keyboard shortcuts
    numberInput.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          convertNumber();
        }
      }
    });
    
    // Initial setup
    updateCustomBaseVisibility();
    updateStats();
  })();
</script>