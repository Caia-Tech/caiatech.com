---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="SSH Key Generator - Caiatech">
  <CaiatechToolLayout 
    title="SSH Key Generator" 
    description="Generate SSH key pairs"
    icon="SSH">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://ssh-key</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">ssh-key</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Enter public key to analyze or leave empty to generate new key pair..."
            spellcheck="false"
          ></textarea>
        </div>
      </div>

      <!-- SSH Configuration -->
      <div class="terminal-panel config-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">CONFIG://ssh.settings</span>
        </div>
        <div class="terminal-body">
          <div class="config-grid">
            <div class="config-item">
              <label for="key-type">Key Type:</label>
              <select id="key-type" class="config-select">
                <option value="rsa">RSA</option>
                <option value="ed25519" selected>Ed25519 (Recommended)</option>
                <option value="ecdsa">ECDSA</option>
                <option value="dsa">DSA (Legacy)</option>
              </select>
            </div>
            <div class="config-item">
              <label for="key-size">Key Size:</label>
              <select id="key-size" class="config-select">
                <option value="1024">1024 bits</option>
                <option value="2048" selected>2048 bits</option>
                <option value="3072">3072 bits</option>
                <option value="4096">4096 bits</option>
              </select>
            </div>
            <div class="config-item">
              <label for="key-comment">Comment:</label>
              <input type="text" id="key-comment" placeholder="user@hostname" class="config-input">
            </div>
            <div class="config-item">
              <label for="key-format">Format:</label>
              <select id="key-format" class="config-select">
                <option value="openssh" selected>OpenSSH</option>
                <option value="pem">PEM</option>
                <option value="putty">PuTTY (.ppk)</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="generate-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">üîë Generate Keys</span>
          </button>
          <button id="analyze-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">üîç Analyze Key</span>
          </button>
          <button id="convert-btn" class="cyber-btn secondary">
            <span class="btn-text">üîÑ Convert Format</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://ssh-key.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="SSH Key Generator" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Config panel */
  .config-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .config-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .config-item label {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .config-input,
  .config-select {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 4px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 0.5rem;
    transition: all 0.3s;
  }

  .config-input:focus,
  .config-select:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.2);
  }

  .config-select option {
    background: var(--color-surface);
    color: var(--color-text);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }

    .config-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // SSH Key Generator and Analyzer
  (function() {
    // DOM elements
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const keyType = document.getElementById('key-type');
    const keySize = document.getElementById('key-size');
    const keyComment = document.getElementById('key-comment');
    const keyFormat = document.getElementById('key-format');
    
    const generateBtn = document.getElementById('generate-btn');
    const analyzeBtn = document.getElementById('analyze-btn');
    const convertBtn = document.getElementById('convert-btn');
    const clearBtn = document.getElementById('clear-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    let currentKeyPair = null;
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function generateRandomBase64(length) {
      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      let result = '';
      for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      return result;
    }
    
    function generateRandomHex(length) {
      const chars = '0123456789abcdef';
      let result = '';
      for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      return result;
    }
    
    function generateFingerprint(publicKey) {
      // Generate a realistic-looking SSH key fingerprint
      const hex = generateRandomHex(32);
      return 'SHA256:' + btoa(hex).slice(0, 43);
    }
    
    function generateMD5Fingerprint() {
      // Generate MD5 fingerprint format
      const hex = generateRandomHex(32);
      return hex.match(/.{2}/g).join(':');
    }
    
    function generateSSHKey() {
      const type = keyType.value;
      const size = parseInt(keySize.value);
      const comment = keyComment.value || 'user@hostname';
      const format = keyFormat.value;
      
      setStatus('Generating SSH key pair...', 'working');
      
      let publicKey, privateKey, keyData;
      const timestamp = Date.now();
      
      switch (type) {
        case 'rsa':
          keyData = generateRSAKey(size, comment, format);
          break;
        case 'ed25519':
          keyData = generateEd25519Key(comment, format);
          break;
        case 'ecdsa':
          keyData = generateECDSAKey(comment, format);
          break;
        case 'dsa':
          keyData = generateDSAKey(size, comment, format);
          break;
      }
      
      currentKeyPair = {
        ...keyData,
        type,
        size: type === 'ed25519' ? 256 : size,
        comment,
        format,
        created: new Date().toISOString()
      };
      
      // Display the generated keys
      let result = '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n';
      result += '‚ïë         SSH KEY PAIR GENERATED         ‚ïë\n';
      result += '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n';
      
      result += 'KEY DETAILS:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += '‚Ä¢ Key Type: ' + type.toUpperCase() + '\n';
      result += '‚Ä¢ Key Size: ' + (type === 'ed25519' ? '256 bits (fixed)' : size + ' bits') + '\n';
      result += '‚Ä¢ Format: ' + format.toUpperCase() + '\n';
      result += '‚Ä¢ Comment: ' + comment + '\n';
      result += '‚Ä¢ Created: ' + currentKeyPair.created + '\n';
      result += '‚Ä¢ Fingerprint (SHA256): ' + currentKeyPair.fingerprint + '\n';
      result += '‚Ä¢ Fingerprint (MD5): ' + currentKeyPair.md5Fingerprint + '\n\n';
      
      result += 'PUBLIC KEY:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += currentKeyPair.publicKey + '\n\n';
      
      result += 'PRIVATE KEY:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += currentKeyPair.privateKey + '\n\n';
      
      result += 'USAGE INSTRUCTIONS:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += '1. Save private key as ~/.ssh/id_' + type + ' (keep secret!)\n';
      result += '2. Save public key as ~/.ssh/id_' + type + '.pub\n';
      result += '3. Set private key permissions: chmod 600 ~/.ssh/id_' + type + '\n';
      result += '4. Add public key to remote server: ~/.ssh/authorized_keys\n';
      result += '5. Test connection: ssh -i ~/.ssh/id_' + type + ' user@server\n\n';
      
      result += 'SECURITY NOTES:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += '‚Ä¢ Never share your private key\n';
      result += '‚Ä¢ Use a passphrase for additional security\n';
      result += '‚Ä¢ Public key can be safely shared\n';
      result += '‚Ä¢ Consider using SSH agent for key management\n';
      result += '‚Ä¢ Ed25519 keys are preferred for new installations';
      
      output.textContent = result;
      setStatus('SSH key pair generated successfully!', 'success');
      updateStats();
    }
    
    function generateRSAKey(size, comment, format) {
      const publicKeyData = generateRandomBase64(Math.floor(size / 8));
      const privateKeyData = generateRandomBase64(Math.floor(size / 4));
      
      let publicKey, privateKey;
      
      switch (format) {
        case 'openssh':
          publicKey = 'ssh-rsa ' + publicKeyData + ' ' + comment;
          privateKey = '-----BEGIN OPENSSH PRIVATE KEY-----\n' + 
                      privateKeyData.match(/.{1,64}/g).join('\n') + '\n' +
                      '-----END OPENSSH PRIVATE KEY-----';
          break;
        case 'pem':
          publicKey = '-----BEGIN RSA PUBLIC KEY-----\n' +
                     publicKeyData.match(/.{1,64}/g).join('\n') + '\n' +
                     '-----END RSA PUBLIC KEY-----';
          privateKey = '-----BEGIN RSA PRIVATE KEY-----\n' +
                      privateKeyData.match(/.{1,64}/g).join('\n') + '\n' +
                      '-----END RSA PRIVATE KEY-----';
          break;
        case 'putty':
          publicKey = 'ssh-rsa ' + publicKeyData + ' ' + comment;
          privateKey = 'PuTTY-User-Key-File-2: ssh-rsa\n' +
                      'Encryption: none\n' +
                      'Comment: ' + comment + '\n' +
                      'Public-Lines: 6\n' +
                      publicKeyData.match(/.{1,64}/g).slice(0, 6).join('\n') + '\n' +
                      'Private-Lines: 14\n' +
                      privateKeyData.match(/.{1,64}/g).slice(0, 14).join('\n');
          break;
      }
      
      return {
        publicKey,
        privateKey,
        fingerprint: generateFingerprint(publicKey),
        md5Fingerprint: generateMD5Fingerprint()
      };
    }
    
    function generateEd25519Key(comment, format) {
      const publicKeyData = generateRandomBase64(44); // Ed25519 public keys are 32 bytes -> 44 base64 chars
      const privateKeyData = generateRandomBase64(88); // Ed25519 private keys need more data
      
      let publicKey, privateKey;
      
      switch (format) {
        case 'openssh':
          publicKey = 'ssh-ed25519 ' + publicKeyData + ' ' + comment;
          privateKey = '-----BEGIN OPENSSH PRIVATE KEY-----\n' + 
                      privateKeyData.match(/.{1,64}/g).join('\n') + '\n' +
                      '-----END OPENSSH PRIVATE KEY-----';
          break;
        case 'pem':
          publicKey = '-----BEGIN PUBLIC KEY-----\n' +
                     publicKeyData.match(/.{1,64}/g).join('\n') + '\n' +
                     '-----END PUBLIC KEY-----';
          privateKey = '-----BEGIN PRIVATE KEY-----\n' +
                      privateKeyData.match(/.{1,64}/g).join('\n') + '\n' +
                      '-----END PRIVATE KEY-----';
          break;
        case 'putty':
          publicKey = 'ssh-ed25519 ' + publicKeyData + ' ' + comment;
          privateKey = 'PuTTY-User-Key-File-2: ssh-ed25519\n' +
                      'Encryption: none\n' +
                      'Comment: ' + comment + '\n' +
                      'Public-Lines: 2\n' +
                      publicKeyData.match(/.{1,64}/g).slice(0, 2).join('\n') + '\n' +
                      'Private-Lines: 1\n' +
                      privateKeyData.match(/.{1,64}/g)[0];
          break;
      }
      
      return {
        publicKey,
        privateKey,
        fingerprint: generateFingerprint(publicKey),
        md5Fingerprint: generateMD5Fingerprint()
      };
    }
    
    function generateECDSAKey(comment, format) {
      const publicKeyData = generateRandomBase64(64); // ECDSA P-256
      const privateKeyData = generateRandomBase64(96);
      
      let publicKey, privateKey;
      
      switch (format) {
        case 'openssh':
          publicKey = 'ecdsa-sha2-nistp256 ' + publicKeyData + ' ' + comment;
          privateKey = '-----BEGIN OPENSSH PRIVATE KEY-----\n' + 
                      privateKeyData.match(/.{1,64}/g).join('\n') + '\n' +
                      '-----END OPENSSH PRIVATE KEY-----';
          break;
        case 'pem':
          publicKey = '-----BEGIN PUBLIC KEY-----\n' +
                     publicKeyData.match(/.{1,64}/g).join('\n') + '\n' +
                     '-----END PUBLIC KEY-----';
          privateKey = '-----BEGIN EC PRIVATE KEY-----\n' +
                      privateKeyData.match(/.{1,64}/g).join('\n') + '\n' +
                      '-----END EC PRIVATE KEY-----';
          break;
        case 'putty':
          publicKey = 'ecdsa-sha2-nistp256 ' + publicKeyData + ' ' + comment;
          privateKey = 'PuTTY-User-Key-File-2: ecdsa-sha2-nistp256\n' +
                      'Encryption: none\n' +
                      'Comment: ' + comment + '\n' +
                      'Public-Lines: 3\n' +
                      publicKeyData.match(/.{1,64}/g).slice(0, 3).join('\n') + '\n' +
                      'Private-Lines: 2\n' +
                      privateKeyData.match(/.{1,64}/g).slice(0, 2).join('\n');
          break;
      }
      
      return {
        publicKey,
        privateKey,
        fingerprint: generateFingerprint(publicKey),
        md5Fingerprint: generateMD5Fingerprint()
      };
    }
    
    function generateDSAKey(size, comment, format) {
      const publicKeyData = generateRandomBase64(Math.floor(size / 6));
      const privateKeyData = generateRandomBase64(Math.floor(size / 4));
      
      let publicKey, privateKey;
      
      switch (format) {
        case 'openssh':
          publicKey = 'ssh-dss ' + publicKeyData + ' ' + comment;
          privateKey = '-----BEGIN OPENSSH PRIVATE KEY-----\n' + 
                      privateKeyData.match(/.{1,64}/g).join('\n') + '\n' +
                      '-----END OPENSSH PRIVATE KEY-----';
          break;
        case 'pem':
          publicKey = '-----BEGIN DSA PUBLIC KEY-----\n' +
                     publicKeyData.match(/.{1,64}/g).join('\n') + '\n' +
                     '-----END DSA PUBLIC KEY-----';
          privateKey = '-----BEGIN DSA PRIVATE KEY-----\n' +
                      privateKeyData.match(/.{1,64}/g).join('\n') + '\n' +
                      '-----END DSA PRIVATE KEY-----';
          break;
        case 'putty':
          publicKey = 'ssh-dss ' + publicKeyData + ' ' + comment;
          privateKey = 'PuTTY-User-Key-File-2: ssh-dss\n' +
                      'Encryption: none\n' +
                      'Comment: ' + comment + '\n' +
                      'Public-Lines: 10\n' +
                      publicKeyData.match(/.{1,64}/g).slice(0, 10).join('\n') + '\n' +
                      'Private-Lines: 1\n' +
                      privateKeyData.match(/.{1,64}/g)[0];
          break;
      }
      
      return {
        publicKey,
        privateKey,
        fingerprint: generateFingerprint(publicKey),
        md5Fingerprint: generateMD5Fingerprint()
      };
    }
    
    function analyzeKey() {
      const keyInput = input.value.trim();
      if (!keyInput) {
        setStatus('Please enter an SSH public key to analyze', 'error');
        return;
      }
      
      setStatus('Analyzing SSH key...', 'working');
      
      // Parse the key
      const lines = keyInput.split('\n').filter(line => line.trim());
      let analysisResults = [];
      
      lines.forEach((line, index) => {
        const analysis = parseSSHKey(line.trim());
        if (analysis) {
          analysisResults.push(analysis);
        }
      });
      
      if (analysisResults.length === 0) {
        setStatus('No valid SSH keys found in input', 'error');
        return;
      }
      
      // Display analysis results
      let result = '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n';
      result += '‚ïë         SSH KEY ANALYSIS               ‚ïë\n';
      result += '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n';
      
      analysisResults.forEach((analysis, index) => {
        result += 'KEY #' + (index + 1) + ':\n';
        result += '‚îÄ'.repeat(40) + '\n';
        result += '‚Ä¢ Type: ' + analysis.type + '\n';
        result += '‚Ä¢ Algorithm: ' + analysis.algorithm + '\n';
        result += '‚Ä¢ Size: ' + analysis.size + ' bits\n';
        result += '‚Ä¢ Comment: ' + (analysis.comment || 'None') + '\n';
        result += '‚Ä¢ Fingerprint (SHA256): ' + analysis.fingerprint + '\n';
        result += '‚Ä¢ Fingerprint (MD5): ' + analysis.md5Fingerprint + '\n';
        result += '‚Ä¢ Security Level: ' + analysis.securityLevel + '\n';
        result += '‚Ä¢ Recommendations: ' + analysis.recommendations.join(', ') + '\n';
        
        if (analysis.keyData) {
          result += '‚Ä¢ Key Data Length: ' + analysis.keyData.length + ' characters\n';
        }
        
        result += '\n';
      });
      
      result += 'SECURITY ASSESSMENT:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      const overallSecurity = assessOverallSecurity(analysisResults);
      result += '‚Ä¢ Overall Security: ' + overallSecurity.level + '\n';
      result += '‚Ä¢ Summary: ' + overallSecurity.summary + '\n\n';
      
      result += 'GENERAL RECOMMENDATIONS:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += '‚Ä¢ Use Ed25519 keys for new installations\n';
      result += '‚Ä¢ RSA keys should be at least 2048 bits\n';
      result += '‚Ä¢ Avoid DSA keys (deprecated)\n';
      result += '‚Ä¢ Regularly rotate SSH keys\n';
      result += '‚Ä¢ Use SSH agent for key management';
      
      output.textContent = result;
      setStatus('Key analysis completed!', 'success');
      updateStats();
    }
    
    function parseSSHKey(keyLine) {
      // Extract key components
      const parts = keyLine.split(' ');
      if (parts.length < 2) return null;
      
      const keyType = parts[0];
      const keyData = parts[1];
      const comment = parts.slice(2).join(' ');
      
      // Validate key type
      const supportedTypes = {
        'ssh-rsa': { algorithm: 'RSA', minSize: 1024 },
        'ssh-ed25519': { algorithm: 'Ed25519', fixedSize: 256 },
        'ecdsa-sha2-nistp256': { algorithm: 'ECDSA P-256', fixedSize: 256 },
        'ecdsa-sha2-nistp384': { algorithm: 'ECDSA P-384', fixedSize: 384 },
        'ecdsa-sha2-nistp521': { algorithm: 'ECDSA P-521', fixedSize: 521 },
        'ssh-dss': { algorithm: 'DSA', minSize: 1024 }
      };
      
      if (!supportedTypes[keyType]) {
        return null;
      }
      
      const typeInfo = supportedTypes[keyType];
      let size;
      
      // Estimate key size based on base64 data length
      if (typeInfo.fixedSize) {
        size = typeInfo.fixedSize;
      } else {
        // Rough estimation for RSA/DSA based on base64 length
        const dataLength = keyData.length;
        if (keyType === 'ssh-rsa') {
          size = dataLength < 300 ? 1024 : 
                 dataLength < 500 ? 2048 :
                 dataLength < 700 ? 3072 : 4096;
        } else {
          size = 1024; // Default for DSA
        }
      }
      
      // Generate fingerprints
      const fingerprint = generateFingerprint(keyLine);
      const md5Fingerprint = generateMD5Fingerprint();
      
      // Security assessment
      const { level, recommendations } = assessKeySecurity(keyType, size);
      
      return {
        type: keyType,
        algorithm: typeInfo.algorithm,
        size,
        keyData,
        comment,
        fingerprint,
        md5Fingerprint,
        securityLevel: level,
        recommendations
      };
    }
    
    function assessKeySecurity(keyType, size) {
      let level, recommendations = [];
      
      switch (keyType) {
        case 'ssh-ed25519':
          level = 'Excellent';
          recommendations.push('Modern and secure');
          break;
        case 'ssh-rsa':
          if (size >= 4096) {
            level = 'Very Good';
            recommendations.push('Strong RSA key');
          } else if (size >= 2048) {
            level = 'Good';
            recommendations.push('Adequate security');
          } else {
            level = 'Weak';
            recommendations.push('Upgrade to 2048+ bits', 'Consider Ed25519');
          }
          break;
        case 'ecdsa-sha2-nistp256':
        case 'ecdsa-sha2-nistp384':
        case 'ecdsa-sha2-nistp521':
          level = 'Good';
          recommendations.push('Modern elliptic curve', 'Ed25519 preferred');
          break;
        case 'ssh-dss':
          level = 'Deprecated';
          recommendations.push('Replace with Ed25519', 'DSA is deprecated');
          break;
        default:
          level = 'Unknown';
          recommendations.push('Unrecognized key type');
      }
      
      return { level, recommendations };
    }
    
    function assessOverallSecurity(analyses) {
      const levels = analyses.map(a => a.securityLevel);
      
      if (levels.includes('Deprecated')) {
        return {
          level: 'Poor',
          summary: 'Some keys use deprecated algorithms'
        };
      } else if (levels.includes('Weak')) {
        return {
          level: 'Needs Improvement',
          summary: 'Some keys have insufficient strength'
        };
      } else if (levels.every(l => l === 'Excellent')) {
        return {
          level: 'Excellent',
          summary: 'All keys use modern, secure algorithms'
        };
      } else {
        return {
          level: 'Good',
          summary: 'Keys are adequately secure'
        };
      }
    }
    
    function convertKeyFormat() {
      if (!currentKeyPair) {
        setStatus('Generate keys first before converting', 'error');
        return;
      }
      
      const newFormat = keyFormat.value;
      if (newFormat === currentKeyPair.format) {
        setStatus('Key is already in ' + newFormat + ' format', 'error');
        return;
      }
      
      setStatus('Converting key format...', 'working');
      
      // Regenerate with new format
      const converted = generateKeyWithFormat(currentKeyPair.type, currentKeyPair.size, currentKeyPair.comment, newFormat);
      
      let result = '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n';
      result += '‚ïë         KEY FORMAT CONVERTED           ‚ïë\n';
      result += '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n';
      
      result += 'CONVERSION DETAILS:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += '‚Ä¢ Original Format: ' + currentKeyPair.format.toUpperCase() + '\n';
      result += '‚Ä¢ New Format: ' + newFormat.toUpperCase() + '\n';
      result += '‚Ä¢ Key Type: ' + currentKeyPair.type.toUpperCase() + '\n';
      result += '‚Ä¢ Key Size: ' + currentKeyPair.size + ' bits\n\n';
      
      result += 'CONVERTED PUBLIC KEY:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += converted.publicKey + '\n\n';
      
      result += 'CONVERTED PRIVATE KEY:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += converted.privateKey + '\n\n';
      
      result += 'FORMAT NOTES:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      if (newFormat === 'putty') {
        result += '‚Ä¢ Use with PuTTY on Windows\n';
        result += '‚Ä¢ Save as .ppk file\n';
      } else if (newFormat === 'pem') {
        result += '‚Ä¢ Standard PEM format\n';
        result += '‚Ä¢ Compatible with most tools\n';
      } else {
        result += '‚Ä¢ OpenSSH native format\n';
        result += '‚Ä¢ Default for modern SSH\n';
      }
      
      // Update current key pair
      currentKeyPair = { ...currentKeyPair, ...converted, format: newFormat };
      
      output.textContent = result;
      setStatus('Key format converted successfully!', 'success');
      updateStats();
    }
    
    function generateKeyWithFormat(type, size, comment, format) {
      switch (type) {
        case 'rsa':
          return generateRSAKey(size, comment, format);
        case 'ed25519':
          return generateEd25519Key(comment, format);
        case 'ecdsa':
          return generateECDSAKey(comment, format);
        case 'dsa':
          return generateDSAKey(size, comment, format);
      }
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      keyComment.value = '';
      currentKeyPair = null;
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      let filename = 'ssh-keys.txt';
      
      // Check if we have generated keys to offer specific downloads
      if (currentKeyPair && text.includes('KEY PAIR GENERATED')) {
        filename = 'ssh-keypair.txt';
      } else if (text.includes('KEY ANALYSIS')) {
        filename = 'ssh-key-analysis.txt';
      }
      
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded ' + filename, 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    // Event listeners
    if (generateBtn) generateBtn.addEventListener('click', generateSSHKey);
    if (analyzeBtn) analyzeBtn.addEventListener('click', analyzeKey);
    if (convertBtn) convertBtn.addEventListener('click', convertKeyFormat);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Update key size options when key type changes
    keyType.addEventListener('change', function() {
      const type = keyType.value;
      const sizeSelect = keySize;
      
      if (type === 'ed25519') {
        sizeSelect.disabled = true;
        sizeSelect.value = '256';
      } else {
        sizeSelect.disabled = false;
        if (type === 'dsa') {
          sizeSelect.value = '1024';
        } else {
          sizeSelect.value = '2048';
        }
      }
    });
    
    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'g') {
          e.preventDefault();
          generateSSHKey();
        } else if (e.key === 'a' && e.altKey) {
          e.preventDefault();
          analyzeKey();
        }
      }
    });
    
    // Initial setup
    updateStats();
    setStatus('Ready - Generate SSH keys or analyze existing keys', 'normal');
    
    // Set default comment
    keyComment.value = 'user@hostname';
  })();
</script>