---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="DNS Lookup - Caiatech">
  <CaiatechToolLayout 
    title="DNS Lookup" 
    description="Perform DNS lookups and analyze records"
    icon="üåê">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://dns</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">dns</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <input 
            id="input" 
            class="terminal-input domain-input"
            placeholder="Enter domain (e.g., google.com, github.com)"
            spellcheck="false"
          />
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="process-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">üîç DNS Lookup</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">google.com</span>
          </button>
          <button id="record-type-btn" class="cyber-btn secondary" data-type="A">
            <span class="btn-text">Type: A</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://dns.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="DNS Lookup" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .domain-input {
    min-height: auto;
    height: auto;
    font-size: 1.1rem;
    text-align: center;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // Basic tool functionality
  (function() {
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const processBtn = document.getElementById('process-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    let currentRecordType = 'A';
    
    function processInput() {
      const domain = input.value.trim();
      if (!domain) {
        setStatus('Please enter a domain name', 'error');
        return;
      }
      
      if (!isValidDomain(domain)) {
        setStatus('Please enter a valid domain name', 'error');
        return;
      }
      
      performDNSLookup(domain);
    }
    
    async function performDNSLookup(domain) {
      setStatus('Performing DNS lookup...', 'normal');
      
      try {
        const startTime = Date.now();
        const results = await mockDNSLookup(domain, currentRecordType);
        const queryTime = Date.now() - startTime;
        
        const formattedResults = formatDNSResults(domain, currentRecordType, results, queryTime);
        output.textContent = formattedResults;
        
        setStatus(`DNS lookup completed (${queryTime}ms)`, 'success');
        updateStats();
      } catch (error) {
        setStatus('DNS lookup failed', 'error');
      }
    }
    
    async function mockDNSLookup(domain, recordType) {
      // Simulate network delay
      await new Promise(resolve => setTimeout(resolve, 200 + Math.random() * 800));
      
      const results = [];
      
      // Generate mock DNS results based on domain and record type
      if (recordType === 'A' || recordType === 'ALL') {
        if (domain.includes('google')) {
          results.push({ type: 'A', value: '142.250.191.14', ttl: 300 });
          results.push({ type: 'A', value: '142.250.191.15', ttl: 300 });
        } else if (domain.includes('github')) {
          results.push({ type: 'A', value: '140.82.114.3', ttl: 60 });
        } else if (domain.includes('cloudflare')) {
          results.push({ type: 'A', value: '104.16.132.229', ttl: 300 });
        } else {
          results.push({ type: 'A', value: '93.184.216.34', ttl: 3600 });
        }
      }
      
      if (recordType === 'AAAA' || recordType === 'ALL') {
        results.push({ type: 'AAAA', value: '2606:2800:220:1:248:1893:25c8:1946', ttl: 3600 });
      }
      
      if (recordType === 'MX' || recordType === 'ALL') {
        results.push({ type: 'MX', value: `mail.${domain}`, priority: 10, ttl: 3600 });
        results.push({ type: 'MX', value: `mail2.${domain}`, priority: 20, ttl: 3600 });
      }
      
      if (recordType === 'NS' || recordType === 'ALL') {
        results.push({ type: 'NS', value: `ns1.${domain}`, ttl: 86400 });
        results.push({ type: 'NS', value: `ns2.${domain}`, ttl: 86400 });
      }
      
      if (recordType === 'TXT' || recordType === 'ALL') {
        results.push({ type: 'TXT', value: '"v=spf1 include:_spf.google.com ~all"', ttl: 3600 });
        results.push({ type: 'TXT', value: '"google-site-verification=ABC123def456"', ttl: 3600 });
      }
      
      if (recordType === 'CNAME' && domain.startsWith('www.')) {
        results.push({ type: 'CNAME', value: domain.substring(4), ttl: 3600 });
      }
      
      if (recordType === 'SOA' || recordType === 'ALL') {
        results.push({ 
          type: 'SOA', 
          value: `ns1.${domain} admin.${domain} 2024011501 7200 3600 1209600 86400`, 
          ttl: 86400 
        });
      }
      
      return results;
    }
    
    function formatDNSResults(domain, recordType, results, queryTime) {
      let output = '';
      output += '\u250c\u2500\u2500\u2500 DNS LOOKUP RESULTS \u2500\u2500\u2500\u2510\n';
      output += '\u2502                                    \u2502\n';
      output += `\u2502 Domain: ${domain.padEnd(25)}\u2502\n`;
      output += `\u2502 Type: ${recordType.padEnd(27)}\u2502\n`;
      output += `\u2502 Query Time: ${(queryTime + 'ms').padEnd(20)}\u2502\n`;
      output += `\u2502 Records Found: ${results.length.toString().padEnd(16)}\u2502\n`;
      output += '\u2502                                    \u2502\n';
      output += '\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n';
      
      if (results.length === 0) {
        output += 'NO DNS RECORDS FOUND\n';
        output += '\u2500'.repeat(40) + '\n';
        output += 'The domain may not exist or the record type\n';
        output += 'may not be configured for this domain.\n';
        return output;
      }
      
      output += 'DNS RECORDS:\n';
      output += '\u2500'.repeat(60) + '\n';
      
      results.forEach((record, index) => {
        output += `[${(index + 1).toString().padStart(2, '0')}] ${record.type} Record:\n`;
        output += `     Value: ${record.value}\n`;
        if (record.priority !== undefined) {
          output += `     Priority: ${record.priority}\n`;
        }
        output += `     TTL: ${record.ttl} seconds\n`;
        
        // Add record type explanation
        const explanation = getRecordExplanation(record.type);
        if (explanation) {
          output += `     Info: ${explanation}\n`;
        }
        
        output += '\n';
      });
      
      // Add DNS record type reference
      output += 'RECORD TYPE REFERENCE:\n';
      output += '\u2500'.repeat(40) + '\n';
      output += 'A     - Maps domain to IPv4 address\n';
      output += 'AAAA  - Maps domain to IPv6 address\n';
      output += 'CNAME - Creates alias to another domain\n';
      output += 'MX    - Specifies mail servers\n';
      output += 'NS    - Defines authoritative name servers\n';
      output += 'TXT   - Stores text information (SPF, DKIM)\n';
      output += 'SOA   - Start of Authority (zone info)\n';
      
      return output;
    }
    
    function getRecordExplanation(type) {
      const explanations = {
        'A': 'IPv4 address for web hosting',
        'AAAA': 'IPv6 address for modern networks',
        'CNAME': 'Alias pointing to another domain',
        'MX': 'Mail server with priority',
        'NS': 'Authoritative DNS server',
        'TXT': 'Text data (often SPF/DKIM)',
        'SOA': 'Zone authority information'
      };
      return explanations[type] || '';
    }
    
    function isValidDomain(domain) {
      const domainRegex = /^(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\u002E)*[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/;
      return domainRegex.test(domain) && domain.length <= 253;
    }
    
    function cycleRecordType() {
      const types = ['A', 'AAAA', 'MX', 'NS', 'TXT', 'CNAME', 'SOA', 'ALL'];
      const currentIndex = types.indexOf(currentRecordType);
      currentRecordType = types[(currentIndex + 1) % types.length];
      
      const recordTypeBtn = document.getElementById('record-type-btn');
      if (recordTypeBtn) {
        recordTypeBtn.querySelector('.btn-text').textContent = `Type: ${currentRecordType}`;
      }
      
      setStatus(`Record type set to ${currentRecordType}`, 'success');
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const toolName = document.title.split(' - ')[0].toLowerCase().replace(/\s+/g, '-');
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = toolName + '-output.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      input.value = 'google.com';
      processInput();
    }
    
    // Event listeners
    if (processBtn) processBtn.addEventListener('click', processInput);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Record type cycling button
    const recordTypeBtn = document.getElementById('record-type-btn');
    if (recordTypeBtn) recordTypeBtn.addEventListener('click', cycleRecordType);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          processInput();
        }
      }
    });
    
    // Initial stats
    updateStats();
  })();
</script>