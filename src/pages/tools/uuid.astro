---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="UUID Generator - Caiatech">
  <CaiatechToolLayout 
    title="UUID Generator" 
    description="Generate unique identifiers"
    icon="ID">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="uuid-tool">
      <!-- Controls Panel -->
      <div class="terminal-panel controls-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">CONTROLS://uuid</span>
        </div>
        <div class="terminal-body">
          <div class="control-grid">
            <div class="control-group">
              <label>Version:</label>
              <select id="version-select" class="control-select">
                <option value="v4">UUID v4 (Random)</option>
                <option value="v1">UUID v1 (Time-based)</option>
                <option value="nil">NIL UUID</option>
              </select>
            </div>
            
            <div class="control-group">
              <label>Format:</label>
              <select id="format-select" class="control-select">
                <option value="lowercase">lowercase</option>
                <option value="uppercase">UPPERCASE</option>
                <option value="brackets">{`{brackets}`}</option>
                <option value="no-hyphens">no-hyphens</option>
              </select>
            </div>
            
            <div class="control-group">
              <label>Count:</label>
              <input type="number" id="count-input" class="control-input" value="1" min="1" max="1000">
            </div>
            
            <button id="generate-btn" class="cyber-btn primary">
              <span class="btn-glow"></span>
              <span class="btn-text">Generate UUID</span>
            </button>
          </div>
          
          <div class="action-bar">
            <button id="copy-all-btn" class="cyber-btn secondary">Copy All</button>
            <button id="clear-btn" class="cyber-btn secondary">Clear</button>
            <button id="download-btn" class="cyber-btn secondary">Download</button>
          </div>
        </div>
      </div>

      <!-- Output Panel -->
      <div class="terminal-panel output-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://generated</span>
          <div class="terminal-actions">
            <span class="stats-display">
              Session: <span id="session-count">0</span> | 
              Total: <span id="total-count">0</span>
            </span>
          </div>
        </div>
        <div class="terminal-body">
          <div id="uuid-output" class="uuid-list">
            <div class="empty-state">Click "Generate UUID" to create new UUIDs</div>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="UUID Generator" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .uuid-tool {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { background: #ff5f57; box-shadow: 0 0 10px rgba(255, 95, 87, 0.5); }
  .control.yellow { background: #ffbd2e; box-shadow: 0 0 10px rgba(255, 189, 46, 0.5); }
  .control.green { background: #28ca42; box-shadow: 0 0 10px rgba(40, 202, 66, 0.5); }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    margin-left: 1rem;
  }

  .stats-display {
    font-family: var(--font-mono);
    font-size: 0.75rem;
    color: var(--color-text-secondary);
  }

  .stats-display span {
    color: var(--color-accent);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  /* Controls */
  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .control-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .control-group label {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .control-select, .control-input {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.3);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 0.5rem;
    transition: all 0.2s;
  }

  .control-select:focus, .control-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
  }

  .action-bar {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
  }

  /* UUID Output */
  .uuid-list {
    min-height: 300px;
    max-height: 500px;
    overflow-y: auto;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    padding: 1rem;
  }

  .empty-state {
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
    font-style: italic;
    text-align: center;
    padding: 2rem;
    opacity: 0.6;
  }

  .uuid-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    background: rgba(0, 212, 255, 0.03);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 6px;
    transition: all 0.2s;
  }

  .uuid-item:hover {
    background: rgba(0, 212, 255, 0.08);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .uuid-text {
    flex: 1;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    color: var(--color-text);
    word-break: break-all;
    user-select: all;
  }

  .copy-single {
    background: transparent;
    border: 1px solid rgba(0, 212, 255, 0.3);
    color: var(--color-accent);
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.2s;
  }

  .copy-single:hover {
    background: rgba(0, 212, 255, 0.1);
    border-color: var(--color-accent);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr;
    }
    
    .action-bar {
      flex-direction: column;
    }
  }
</style>

<script>
  // UUID Generator - JavaScript Implementation
  const versionSelect = document.getElementById('version-select');
  const formatSelect = document.getElementById('format-select');
  const countInput = document.getElementById('count-input');
  const generateBtn = document.getElementById('generate-btn');
  const copyAllBtn = document.getElementById('copy-all-btn');
  const clearBtn = document.getElementById('clear-btn');
  const downloadBtn = document.getElementById('download-btn');
  const uuidOutput = document.getElementById('uuid-output');
  const sessionCountSpan = document.getElementById('session-count');
  const totalCountSpan = document.getElementById('total-count');

  let sessionCount = 0;
  let totalCount = parseInt(localStorage.getItem('uuid-total-count') || '0');

  // Update display
  if (totalCountSpan) totalCountSpan.textContent = totalCount.toString();

  function generateUUIDv4() {
    if (typeof crypto !== 'undefined' && crypto.randomUUID) {
      return crypto.randomUUID();
    }
    // Fallback for older browsers
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }

  function generateUUIDv1() {
    // Simplified UUID v1 implementation
    const timestamp = Date.now();
    const timeHex = timestamp.toString(16).padStart(12, '0');
    const randomHex = Math.random().toString(16).substr(2, 8);
    
    return `${timeHex.substr(0, 8)}-${timeHex.substr(8, 4)}-1${timeHex.substr(11, 3)}-${randomHex.substr(0, 4)}-${randomHex.substr(4, 4)}${Math.random().toString(16).substr(2, 8)}`;
  }

  function formatUUID(uuid, format) {
    switch (format) {
      case 'uppercase':
        return uuid.toUpperCase();
      case 'brackets':
        return `{${uuid}}`;
      case 'no-hyphens':
        return uuid.replace(/-/g, '');
      default:
        return uuid;
    }
  }

  function generateUUIDs() {
    const count = parseInt(countInput.value) || 1;
    const version = versionSelect.value;
    const format = formatSelect.value;
    const uuids = [];

    for (let i = 0; i < count; i++) {
      let uuid;
      if (version === 'v4') {
        uuid = generateUUIDv4();
      } else if (version === 'v1') {
        uuid = generateUUIDv1();
      } else if (version === 'nil') {
        uuid = '00000000-0000-0000-0000-000000000000';
      } else {
        uuid = generateUUIDv4();
      }
      uuids.push(formatUUID(uuid, format));
    }

    displayUUIDs(uuids);
    updateStats(uuids.length);
  }

  function displayUUIDs(uuids) {
    if (!uuidOutput) return;
    
    const html = uuids.map(uuid => `
      <div class="uuid-item">
        <span class="uuid-text">${uuid}</span>
        <button class="copy-single" data-uuid="${uuid}">Copy</button>
      </div>
    `).join('');
    
    uuidOutput.innerHTML = html;
    
    // Add event listeners to copy buttons
    uuidOutput.querySelectorAll('.copy-single').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const uuid = e.target.getAttribute('data-uuid');
        if (uuid) {
          try {
            await navigator.clipboard.writeText(uuid);
            e.target.textContent = 'Copied!';
            setTimeout(() => {
              e.target.textContent = 'Copy';
            }, 1000);
          } catch (err) {
            console.error('Copy failed:', err);
          }
        }
      });
    });
  }

  function updateStats(count) {
    sessionCount += count;
    totalCount += count;
    
    if (sessionCountSpan) sessionCountSpan.textContent = sessionCount.toString();
    if (totalCountSpan) totalCountSpan.textContent = totalCount.toString();
    
    localStorage.setItem('uuid-total-count', totalCount.toString());
  }

  // Event listeners
  if (generateBtn) {
    generateBtn.addEventListener('click', generateUUIDs);
  }

  if (copyAllBtn) {
    copyAllBtn.addEventListener('click', async () => {
      const uuids = Array.from(uuidOutput.querySelectorAll('.uuid-text') || [])
        .map(el => el.textContent)
        .filter(Boolean)
        .join('\n');
      
      if (uuids) {
        try {
          await navigator.clipboard.writeText(uuids);
          copyAllBtn.textContent = 'Copied!';
          setTimeout(() => {
            copyAllBtn.textContent = 'Copy All';
          }, 1000);
        } catch (err) {
          console.error('Copy failed:', err);
        }
      }
    });
  }

  if (clearBtn) {
    clearBtn.addEventListener('click', () => {
      if (uuidOutput) {
        uuidOutput.innerHTML = '<div class="empty-state">Click "Generate UUID" to create new UUIDs</div>';
      }
      sessionCount = 0;
      if (sessionCountSpan) sessionCountSpan.textContent = '0';
    });
  }

  if (downloadBtn) {
    downloadBtn.addEventListener('click', () => {
      const uuids = Array.from(uuidOutput.querySelectorAll('.uuid-text') || [])
        .map(el => el.textContent)
        .filter(Boolean)
        .join('\n');
      
      if (uuids) {
        const blob = new Blob([uuids], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'uuids.txt';
        a.click();
        URL.revokeObjectURL(url);
      }
    });
  }

  // Generate one UUID on page load
  generateUUIDs();
</script>