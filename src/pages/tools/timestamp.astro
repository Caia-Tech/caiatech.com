---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Timestamp Converter - Caiatech">
  <CaiatechToolLayout 
    title="Timestamp Converter" 
    description="Convert between Unix timestamps and dates"
    icon="⏰">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="timestamp-tool">
      <!-- Current Time Display -->
      <div class="terminal-panel current-time-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">LIVE://current_time</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-current-btn" title="Copy Current Timestamp">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="current-time-display">
            <div class="timestamp-value" id="current-timestamp">0</div>
            <div class="timestamp-label">Unix Timestamp</div>
            <div class="current-date" id="current-date">Loading...</div>
          </div>
        </div>
      </div>

      <!-- Conversion Tools -->
      <div class="conversion-grid">
        <!-- Timestamp to Date -->
        <div class="terminal-panel converter-panel">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">DECODE://timestamp</span>
            <div class="terminal-actions">
              <button class="terminal-action" id="use-current-btn" title="Use Current Time">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"/>
                  <polyline points="12,6 12,12 16,14"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="input-group">
              <input 
                type="text" 
                id="timestamp-input"
                class="cyber-input"
                placeholder="Enter Unix timestamp (e.g., 1640995200)"
                spellcheck="false"
              >
              <div class="unit-selector">
                <button class="unit-btn active" data-unit="seconds">Seconds</button>
                <button class="unit-btn" data-unit="milliseconds">Milliseconds</button>
              </div>
            </div>
            <div class="conversion-results">
              <div class="result-item">
                <label>Local Time:</label>
                <span id="local-time" class="result-value">-</span>
              </div>
              <div class="result-item">
                <label>UTC:</label>
                <span id="utc-time" class="result-value">-</span>
              </div>
              <div class="result-item">
                <label>ISO:</label>
                <span id="iso-time" class="result-value">-</span>
              </div>
              <div class="result-item">
                <label>Relative:</label>
                <span id="relative-time" class="result-value">-</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Date to Timestamp -->
        <div class="terminal-panel converter-panel">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">ENCODE://date</span>
            <div class="terminal-actions">
              <button class="terminal-action" id="use-now-btn" title="Use Now">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"/>
                  <polyline points="12,6 12,12 16,14"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="input-group">
              <input 
                type="datetime-local" 
                id="date-input"
                class="cyber-input"
              >
              <select id="timezone-select" class="cyber-select">
                <option value="local">Local Time</option>
                <option value="UTC">UTC</option>
              </select>
            </div>
            <div class="conversion-results">
              <div class="result-item">
                <label>Seconds:</label>
                <span id="seconds-result" class="result-value">-</span>
              </div>
              <div class="result-item">
                <label>Milliseconds:</label>
                <span id="milliseconds-result" class="result-value">-</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Timestamp Converter" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .timestamp-tool {
    display: grid;
    gap: 1.5rem;
  }
  
  .conversion-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
  }
  
  @media (max-width: 768px) {
    .conversion-grid {
      grid-template-columns: 1fr;
    }
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Current Time Display */
  .current-time-display {
    text-align: center;
    padding: 1.5rem;
  }
  
  .timestamp-value {
    font-family: var(--font-mono);
    font-size: 2.5rem;
    color: var(--color-accent);
    font-weight: bold;
    margin-bottom: 0.5rem;
    text-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
  }
  
  .timestamp-label {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-bottom: 1rem;
  }
  
  .current-date {
    font-family: var(--font-mono);
    font-size: 1.1rem;
    color: var(--color-text);
    background: rgba(0, 212, 255, 0.1);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    padding: 0.75rem;
  }
  
  /* Input Groups */
  .input-group {
    margin-bottom: 1.5rem;
  }
  
  .cyber-input, .cyber-select {
    width: 100%;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 0.75rem;
    margin-bottom: 1rem;
    transition: all 0.3s;
  }
  
  .cyber-input:focus, .cyber-select:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
  }
  
  .unit-selector {
    display: flex;
    gap: 0.5rem;
  }
  
  .unit-btn {
    flex: 1;
    padding: 0.5rem;
    border: 1px solid rgba(0, 212, 255, 0.3);
    border-radius: 4px;
    background: transparent;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .unit-btn:hover {
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }
  
  .unit-btn.active {
    background: var(--color-accent);
    color: var(--color-bg);
    border-color: var(--color-accent);
  }
  
  /* Conversion Results */
  .conversion-results {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .result-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 6px;
  }
  
  .result-item label {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    min-width: 80px;
  }
  
  .result-value {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    color: var(--color-text);
    word-break: break-all;
    text-align: right;
    flex: 1;
    margin-left: 1rem;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
    
    .result-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
    
    .result-value {
      text-align: left;
      margin-left: 0;
    }
    
    .timestamp-value {
      font-size: 2rem;
    }
  }
</style>

<script>
  // Timestamp Converter - JavaScript Implementation
  const timestampInput = document.getElementById('timestamp-input');
  const dateInput = document.getElementById('date-input');
  const timezoneSelect = document.getElementById('timezone-select');
  
  const currentTimestamp = document.getElementById('current-timestamp');
  const currentDate = document.getElementById('current-date');
  const localTime = document.getElementById('local-time');
  const utcTime = document.getElementById('utc-time');
  const isoTime = document.getElementById('iso-time');
  const relativeTime = document.getElementById('relative-time');
  const secondsResult = document.getElementById('seconds-result');
  const millisecondsResult = document.getElementById('milliseconds-result');
  
  let isSeconds = true;
  let currentTime = new Date();
  
  function updateCurrentTime() {
    currentTime = new Date();
    const timestamp = Math.floor(currentTime.getTime() / 1000);
    
    if (currentTimestamp) currentTimestamp.textContent = timestamp.toString();
    if (currentDate) currentDate.textContent = currentTime.toLocaleString();
  }
  
  function getRelativeTime(date) {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const seconds = Math.floor(diff / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    const years = Math.floor(days / 365);
    
    if (Math.abs(years) > 0) return `${years} year${Math.abs(years) === 1 ? '' : 's'} ${years > 0 ? 'ago' : 'in the future'}`;
    if (Math.abs(days) > 0) return `${days} day${Math.abs(days) === 1 ? '' : 's'} ${days > 0 ? 'ago' : 'in the future'}`;
    if (Math.abs(hours) > 0) return `${hours} hour${Math.abs(hours) === 1 ? '' : 's'} ${hours > 0 ? 'ago' : 'in the future'}`;
    if (Math.abs(minutes) > 0) return `${minutes} minute${Math.abs(minutes) === 1 ? '' : 's'} ${minutes > 0 ? 'ago' : 'in the future'}`;
    return 'Just now';
  }
  
  function convertTimestampToDate() {
    const input = timestampInput.value.trim();
    if (!input) {
      if (localTime) localTime.textContent = '-';
      if (utcTime) utcTime.textContent = '-';
      if (isoTime) isoTime.textContent = '-';
      if (relativeTime) relativeTime.textContent = '-';
      return;
    }
    
    try {
      const timestamp = parseFloat(input);
      const date = new Date(isSeconds ? timestamp * 1000 : timestamp);
      
      if (isNaN(date.getTime())) {
        throw new Error('Invalid timestamp');
      }
      
      if (localTime) localTime.textContent = date.toLocaleString();
      if (utcTime) utcTime.textContent = date.toUTCString();
      if (isoTime) isoTime.textContent = date.toISOString();
      if (relativeTime) relativeTime.textContent = getRelativeTime(date);
    } catch (error) {
      if (localTime) localTime.textContent = 'Invalid timestamp';
      if (utcTime) utcTime.textContent = 'Invalid timestamp';
      if (isoTime) isoTime.textContent = 'Invalid timestamp';
      if (relativeTime) relativeTime.textContent = 'Invalid timestamp';
    }
  }
  
  function convertDateToTimestamp() {
    const dateValue = dateInput.value;
    if (!dateValue) {
      if (secondsResult) secondsResult.textContent = '-';
      if (millisecondsResult) millisecondsResult.textContent = '-';
      return;
    }
    
    try {
      let date;
      
      if (timezoneSelect.value === 'local') {
        date = new Date(dateValue);
      } else if (timezoneSelect.value === 'UTC') {
        date = new Date(dateValue + 'Z');
      } else {
        date = new Date(dateValue);
      }
      
      const timestamp = date.getTime();
      const seconds = Math.floor(timestamp / 1000);
      
      if (secondsResult) secondsResult.textContent = seconds.toString();
      if (millisecondsResult) millisecondsResult.textContent = timestamp.toString();
    } catch (error) {
      if (secondsResult) secondsResult.textContent = 'Invalid date';
      if (millisecondsResult) millisecondsResult.textContent = 'Invalid date';
    }
  }
  
  // Event listeners
  if (timestampInput) timestampInput.addEventListener('input', convertTimestampToDate);
  if (dateInput) dateInput.addEventListener('input', convertDateToTimestamp);
  if (timezoneSelect) timezoneSelect.addEventListener('change', convertDateToTimestamp);
  
  // Unit selector
  document.querySelectorAll('.unit-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      document.querySelectorAll('.unit-btn').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      isSeconds = e.target.getAttribute('data-unit') === 'seconds';
      convertTimestampToDate();
    });
  });
  
  // Action buttons
  const useCurrentBtn = document.getElementById('use-current-btn');
  if (useCurrentBtn) {
    useCurrentBtn.addEventListener('click', () => {
      const now = Math.floor(Date.now() / (isSeconds ? 1000 : 1));
      if (timestampInput) timestampInput.value = now.toString();
      convertTimestampToDate();
    });
  }
  
  const useNowBtn = document.getElementById('use-now-btn');
  if (useNowBtn) {
    useNowBtn.addEventListener('click', () => {
      const now = new Date();
      const offset = now.getTimezoneOffset() * 60000;
      const localISOTime = new Date(now.getTime() - offset).toISOString().slice(0, 16);
      if (dateInput) dateInput.value = localISOTime;
      convertDateToTimestamp();
    });
  }
  
  const copyCurrentBtn = document.getElementById('copy-current-btn');
  if (copyCurrentBtn) {
    copyCurrentBtn.addEventListener('click', async () => {
      const timestamp = Math.floor(Date.now() / 1000).toString();
      try {
        await navigator.clipboard.writeText(timestamp);
        // Visual feedback could be added here
      } catch (err) {
        console.error('Failed to copy:', err);
      }
    });
  }
  
  // Initialize
  updateCurrentTime();
  setInterval(updateCurrentTime, 1000);
  
  // Set current time as default
  const now = new Date();
  const offset = now.getTimezoneOffset() * 60000;
  const localISOTime = new Date(now.getTime() - offset).toISOString().slice(0, 16);
  if (dateInput) dateInput.value = localISOTime;
  convertDateToTimestamp();
</script>