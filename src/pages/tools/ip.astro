---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="IP Address Tools - Caiatech">
  <CaiatechToolLayout 
    title="IP Address Tools" 
    description="IP address utilities and lookup"
    icon="IP">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://ip</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">ip</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <div class="ip-input-section">
            <div class="input-group">
              <label for="ip-address">IP Address or CIDR:</label>
              <input 
                id="ip-address" 
                class="terminal-input text-input"
                type="text"
                placeholder="e.g., 192.168.1.1, 10.0.0.0/24, 2001:db8::1"
                spellcheck="false"
              />
            </div>
            
            <div class="input-group">
              <label for="subnet-mask">Subnet Mask (optional):</label>
              <input 
                id="subnet-mask" 
                class="terminal-input text-input"
                type="text"
                placeholder="e.g., 255.255.255.0, /24"
                spellcheck="false"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="analyze-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">üåê Analyze</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="ip-type-btn" class="cyber-btn secondary" data-type="ipv4">
            <span class="btn-text">Type: IPv4</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Analysis</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://ip.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="IP Address Tools" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .ip-input-section {
    display: grid;
    gap: 1rem;
  }

  .input-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .input-group label {
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
    font-size: 0.9rem;
  }

  .text-input {
    min-height: auto;
    height: auto;
    padding: 0.75rem;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // IP Address Analysis Tool
  (function() {
    const ipAddress = document.getElementById('ip-address');
    const subnetMask = document.getElementById('subnet-mask');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const analyzeBtn = document.getElementById('analyze-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const ipTypeBtn = document.getElementById('ip-type-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    let currentType = 'ipv4';
    
    function updateStats() {
      const totalInput = ipAddress.value.length + subnetMask.value.length;
      inputLength.textContent = totalInput;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function analyzeIP() {
      const ip = ipAddress.value.trim();
      const mask = subnetMask.value.trim();
      
      if (!ip) {
        setStatus('Please enter an IP address', 'error');
        return;
      }
      
      try {
        const analysis = generateIPAnalysis(ip, mask);
        output.textContent = analysis;
        setStatus('IP analysis complete!', 'success');
        updateStats();
        
      } catch (error) {
        setStatus('Analysis failed: ' + error.message, 'error');
      }
    }
    
    function generateIPAnalysis(ip, mask) {
      let result = '';
      
      // Detect IP version and parse CIDR
      const isIPv6 = ip.includes(':');
      const isCIDR = ip.includes('/');
      let address = ip;
      let cidr = null;
      
      if (isCIDR) {
        const parts = ip.split('/');
        address = parts[0];
        cidr = parseInt(parts[1]);
      }
      
      result += '‚îå‚îÄ‚îÄ‚îÄ IP ADDRESS ANALYSIS ‚îÄ‚îÄ‚îÄ‚îê\\n';
      result += '‚îÇ                           ‚îÇ\\n';
      result += `‚îÇ Type: ${isIPv6 ? 'IPv6' : 'IPv4'.padEnd(19)}‚îÇ\\n`;
      result += `‚îÇ Address: ${address.padEnd(15)}‚îÇ\\n`;
      if (cidr !== null) {
        result += `‚îÇ CIDR: /${cidr.toString().padEnd(18)}‚îÇ\\n`;
      }
      result += '‚îÇ                           ‚îÇ\\n';
      result += '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\\n\\n';
      
      if (isIPv6) {
        result += generateIPv6Analysis(address, cidr);
      } else {
        result += generateIPv4Analysis(address, cidr, mask);
      }
      
      return result;
    }
    
    function generateIPv4Analysis(ip, cidr, mask) {
      let result = '';
      
      // Validate IPv4
      if (!isValidIPv4(ip)) {
        throw new Error('Invalid IPv4 address format');
      }
      
      const octets = ip.split('.').map(Number);
      const binaryIP = octets.map(octet => octet.toString(2).padStart(8, '0')).join('.');
      const hexIP = octets.map(octet => '0x' + octet.toString(16).toUpperCase().padStart(2, '0')).join('.');
      
      // Basic IP information
      result += 'IPv4 ADDRESS DETAILS:\\n';
      result += '‚îÄ'.repeat(50) + '\\n';
      result += `Decimal: ${ip}\\n`;
      result += `Binary: ${binaryIP}\\n`;
      result += `Hexadecimal: ${hexIP}\\n`;
      result += `32-bit Integer: ${ipToInteger(ip)}\\n`;
      result += `Octets: ${octets.join(', ')}\\n\\n`;
      
      // IP Classification
      result += 'IP CLASSIFICATION:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      const classification = classifyIPv4(ip);
      result += `Class: ${classification.class}\\n`;
      result += `Type: ${classification.type}\\n`;
      result += `Scope: ${classification.scope}\\n`;
      result += `Description: ${classification.description}\\n\\n`;
      
      // Subnet analysis if CIDR or mask provided
      if (cidr !== null || mask) {
        let subnetBits = cidr;
        let subnetMaskIP = '';
        
        if (mask && !cidr) {
          if (mask.startsWith('/')) {
            subnetBits = parseInt(mask.substring(1));
          } else if (isValidIPv4(mask)) {
            subnetMaskIP = mask;
            subnetBits = countSubnetBits(mask);
          }
        }
        
        if (subnetBits !== null) {
          subnetMaskIP = subnetMaskIP || cidrToSubnetMask(subnetBits);
          const networkInfo = calculateNetworkInfo(ip, subnetBits);
          
          result += 'SUBNET INFORMATION:\\n';
          result += '‚îÄ'.repeat(45) + '\\n';
          result += `Subnet Mask: ${subnetMaskIP} (/${subnetBits})\\n`;
          result += `Network Address: ${networkInfo.network}\\n`;
          result += `Broadcast Address: ${networkInfo.broadcast}\\n`;
          result += `First Usable Host: ${networkInfo.firstHost}\\n`;
          result += `Last Usable Host: ${networkInfo.lastHost}\\n`;
          result += `Total Addresses: ${networkInfo.totalHosts.toLocaleString()}\\n`;
          result += `Usable Addresses: ${networkInfo.usableHosts.toLocaleString()}\\n`;
          result += `Subnet Size: /${subnetBits} (${32 - subnetBits} host bits)\\n\\n`;
        }
      }
      
      // Private/Public ranges
      result += 'NETWORK RANGES:\\n';
      result += '‚îÄ'.repeat(35) + '\\n';
      result += getRangeInfo(ip);
      result += '\\n';
      
      // Common subnet masks
      result += 'COMMON SUBNET MASKS:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      result += '/8  = 255.0.0.0     (16,777,214 hosts)\\n';
      result += '/16 = 255.255.0.0   (65,534 hosts)\\n';
      result += '/24 = 255.255.255.0 (254 hosts)\\n';
      result += '/25 = 255.255.255.128 (126 hosts)\\n';
      result += '/26 = 255.255.255.192 (62 hosts)\\n';
      result += '/27 = 255.255.255.224 (30 hosts)\\n';
      result += '/28 = 255.255.255.240 (14 hosts)\\n';
      result += '/29 = 255.255.255.248 (6 hosts)\\n';
      result += '/30 = 255.255.255.252 (2 hosts)\\n\\n';
      
      // Security considerations
      result += 'SECURITY CONSIDERATIONS:\\n';
      result += '‚îÄ'.repeat(45) + '\\n';
      if (classification.type === 'Private') {
        result += '‚Ä¢ This is a private IP address (RFC 1918)\\n';
        result += '‚Ä¢ Not directly routable on the Internet\\n';
        result += '‚Ä¢ Safe to use in internal networks\\n';
        result += '‚Ä¢ Requires NAT for Internet access\\n';
      } else if (classification.type === 'Public') {
        result += '‚Ä¢ This is a public IP address\\n';
        result += '‚Ä¢ Directly routable on the Internet\\n';
        result += '‚Ä¢ May be subject to external attacks\\n';
        result += '‚Ä¢ Consider firewall protection\\n';
      } else if (classification.type === 'Loopback') {
        result += '‚Ä¢ Loopback address for localhost\\n';
        result += '‚Ä¢ Only accessible from the same machine\\n';
        result += '‚Ä¢ Commonly used for testing\\n';
      }
      
      return result;
    }
    
    function generateIPv6Analysis(ip, cidr) {
      let result = '';
      
      // Basic IPv6 validation
      if (!isValidIPv6(ip)) {
        throw new Error('Invalid IPv6 address format');
      }
      
      // Expand and normalize IPv6
      const expandedIP = expandIPv6(ip);
      const compressedIP = compressIPv6(expandedIP);
      
      result += 'IPv6 ADDRESS DETAILS:\\n';
      result += '‚îÄ'.repeat(50) + '\\n';
      result += `Original: ${ip}\\n`;
      result += `Expanded: ${expandedIP}\\n`;
      result += `Compressed: ${compressedIP}\\n`;
      result += `Hex Groups: ${expandedIP.split(':').join(', ')}\\n\\n`;
      
      // IPv6 Classification
      result += 'IPv6 CLASSIFICATION:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      const classification = classifyIPv6(ip);
      result += `Type: ${classification.type}\\n`;
      result += `Scope: ${classification.scope}\\n`;
      result += `Description: ${classification.description}\\n\\n`;
      
      // IPv6 address structure
      result += 'ADDRESS STRUCTURE:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      if (cidr !== null && cidr <= 64) {
        result += `Network Prefix: /${cidr}\\n`;
        result += `Interface ID: ${128 - cidr} bits\\n`;
        if (cidr === 64) {
          result += 'Standard subnet size for IPv6\\n';
        }
      }
      result += `Total Address Space: 2^128 addresses\\n`;
      result += `128-bit address format\\n\\n`;
      
      // Common IPv6 ranges
      result += 'COMMON IPv6 RANGES:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      result += '::1/128 - Loopback\\n';
      result += '::/128 - Unspecified address\\n';
      result += 'fe80::/10 - Link-local\\n';
      result += 'fc00::/7 - Unique local (private)\\n';
      result += '2000::/3 - Global unicast\\n';
      result += 'ff00::/8 - Multicast\\n\\n';
      
      // IPv6 benefits
      result += 'IPv6 ADVANTAGES:\\n';
      result += '‚îÄ'.repeat(35) + '\\n';
      result += '‚Ä¢ Massive address space (340 undecillion)\\n';
      result += '‚Ä¢ No need for NAT\\n';
      result += '‚Ä¢ Built-in security features\\n';
      result += '‚Ä¢ Auto-configuration capabilities\\n';
      result += '‚Ä¢ Better mobile support\\n';
      result += '‚Ä¢ Simplified header structure\\n';
      
      return result;
    }
    
    function isValidIPv4(ip) {
      const octets = ip.split('.');
      if (octets.length !== 4) return false;
      return octets.every(octet => {
        const num = parseInt(octet, 10);
        return num >= 0 && num <= 255 && octet === num.toString();
      });
    }
    
    function isValidIPv6(ip) {
      // Basic IPv6 validation
      const ipv6Regex = /^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$|^::1$|^::$|^([0-9a-fA-F]{1,4}:){1,7}:$|^:([0-9a-fA-F]{1,4}:){1,6}[0-9a-fA-F]{1,4}$|^([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}$|^([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}$|^([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}$|^([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}$|^([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}$|^[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})$/;
      return ipv6Regex.test(ip) || ip.includes('::');
    }
    
    function classifyIPv4(ip) {
      const first = parseInt(ip.split('.')[0]);
      const octets = ip.split('.').map(Number);
      
      // Loopback
      if (first === 127) {
        return {
          class: 'A (Loopback)',
          type: 'Loopback',
          scope: 'Host',
          description: 'Loopback addresses for localhost'
        };
      }
      
      // Private ranges
      if (first === 10) {
        return {
          class: 'A (Private)',
          type: 'Private',
          scope: 'LAN',
          description: '10.0.0.0/8 - Private network (RFC 1918)'
        };
      }
      
      if (first === 172 && octets[1] >= 16 && octets[1] <= 31) {
        return {
          class: 'B (Private)',
          type: 'Private',
          scope: 'LAN',
          description: '172.16.0.0/12 - Private network (RFC 1918)'
        };
      }
      
      if (first === 192 && octets[1] === 168) {
        return {
          class: 'C (Private)',
          type: 'Private',
          scope: 'LAN',
          description: '192.168.0.0/16 - Private network (RFC 1918)'
        };
      }
      
      // Link-local
      if (first === 169 && octets[1] === 254) {
        return {
          class: 'B (Link-Local)',
          type: 'Link-Local',
          scope: 'Link',
          description: '169.254.0.0/16 - Link-local (APIPA)'
        };
      }
      
      // Public classes
      if (first >= 1 && first <= 126) {
        return {
          class: 'A',
          type: 'Public',
          scope: 'Internet',
          description: 'Class A public address'
        };
      }
      
      if (first >= 128 && first <= 191) {
        return {
          class: 'B',
          type: 'Public',
          scope: 'Internet',
          description: 'Class B public address'
        };
      }
      
      if (first >= 192 && first <= 223) {
        return {
          class: 'C',
          type: 'Public',
          scope: 'Internet',
          description: 'Class C public address'
        };
      }
      
      if (first >= 224 && first <= 239) {
        return {
          class: 'D',
          type: 'Multicast',
          scope: 'Network',
          description: 'Class D multicast address'
        };
      }
      
      if (first >= 240) {
        return {
          class: 'E',
          type: 'Reserved',
          scope: 'Reserved',
          description: 'Class E reserved address'
        };
      }
      
      return {
        class: 'Unknown',
        type: 'Unknown',
        scope: 'Unknown',
        description: 'Unknown address classification'
      };
    }
    
    function classifyIPv6(ip) {
      const expanded = expandIPv6(ip);
      const firstGroup = expanded.split(':')[0].toLowerCase();
      
      if (expanded === '0000:0000:0000:0000:0000:0000:0000:0001') {
        return {
          type: 'Loopback',
          scope: 'Host',
          description: 'IPv6 loopback address (::1)'
        };
      }
      
      if (expanded === '0000:0000:0000:0000:0000:0000:0000:0000') {
        return {
          type: 'Unspecified',
          scope: 'None',
          description: 'Unspecified address (::)'
        };
      }
      
      if (firstGroup.startsWith('fe8') || firstGroup.startsWith('fe9') || 
          firstGroup.startsWith('fea') || firstGroup.startsWith('feb')) {
        return {
          type: 'Link-Local',
          scope: 'Link',
          description: 'Link-local unicast address'
        };
      }
      
      if (firstGroup.startsWith('fc') || firstGroup.startsWith('fd')) {
        return {
          type: 'Unique Local',
          scope: 'LAN',
          description: 'Unique local address (private)'
        };
      }
      
      if (firstGroup.startsWith('ff')) {
        return {
          type: 'Multicast',
          scope: 'Variable',
          description: 'Multicast address'
        };
      }
      
      if (firstGroup >= '2000' && firstGroup <= '3fff') {
        return {
          type: 'Global Unicast',
          scope: 'Internet',
          description: 'Global unicast address (public)'
        };
      }
      
      return {
        type: 'Unknown',
        scope: 'Unknown',
        description: 'Unknown IPv6 address type'
      };
    }
    
    function expandIPv6(ip) {
      // Simple IPv6 expansion
      if (ip.includes('::')) {
        const parts = ip.split('::');
        const left = parts[0] ? parts[0].split(':') : [];
        const right = parts[1] ? parts[1].split(':') : [];
        const missing = 8 - left.length - right.length;
        const middle = Array(missing).fill('0000');
        const expanded = [...left, ...middle, ...right];
        return expanded.map(part => part.padStart(4, '0')).join(':');
      }
      
      return ip.split(':').map(part => part.padStart(4, '0')).join(':');
    }
    
    function compressIPv6(ip) {
      // Simple IPv6 compression
      let compressed = ip.replace(/(:0000){2,}/g, '::');
      if (compressed.includes(':::')) {
        compressed = compressed.replace(/:::/g, '::');
      }
      return compressed.replace(/0000/g, '0').replace(/:0+/g, ':');
    }
    
    function ipToInteger(ip) {
      return ip.split('.').reduce((int, octet) => (int << 8) + parseInt(octet), 0) >>> 0;
    }
    
    function cidrToSubnetMask(cidr) {
      const mask = (0xffffffff << (32 - cidr)) >>> 0;
      return [
        (mask >>> 24) & 0xff,
        (mask >>> 16) & 0xff,
        (mask >>> 8) & 0xff,
        mask & 0xff
      ].join('.');
    }
    
    function countSubnetBits(mask) {
      const octets = mask.split('.').map(Number);
      let bits = 0;
      for (const octet of octets) {
        bits += octet.toString(2).replace(/0/g, '').length;
      }
      return bits;
    }
    
    function calculateNetworkInfo(ip, cidr) {
      const ipInt = ipToInteger(ip);
      const mask = (0xffffffff << (32 - cidr)) >>> 0;
      const network = (ipInt & mask) >>> 0;
      const broadcast = (network | (0xffffffff >>> cidr)) >>> 0;
      const totalHosts = Math.pow(2, 32 - cidr);
      const usableHosts = Math.max(0, totalHosts - 2);
      
      return {
        network: intToIP(network),
        broadcast: intToIP(broadcast),
        firstHost: intToIP(network + 1),
        lastHost: intToIP(broadcast - 1),
        totalHosts,
        usableHosts
      };
    }
    
    function intToIP(int) {
      return [
        (int >>> 24) & 0xff,
        (int >>> 16) & 0xff,
        (int >>> 8) & 0xff,
        int & 0xff
      ].join('.');
    }
    
    function getRangeInfo(ip) {
      const classification = classifyIPv4(ip);
      let info = `Current IP: ${classification.type}\\n`;
      
      info += '\\nPrivate IPv4 Ranges (RFC 1918):\\n';
      info += '‚Ä¢ 10.0.0.0/8 (10.0.0.0 - 10.255.255.255)\\n';
      info += '‚Ä¢ 172.16.0.0/12 (172.16.0.0 - 172.31.255.255)\\n';
      info += '‚Ä¢ 192.168.0.0/16 (192.168.0.0 - 192.168.255.255)\\n';
      
      info += '\\nSpecial Use Ranges:\\n';
      info += '‚Ä¢ 127.0.0.0/8 - Loopback\\n';
      info += '‚Ä¢ 169.254.0.0/16 - Link-local (APIPA)\\n';
      info += '‚Ä¢ 224.0.0.0/4 - Multicast\\n';
      info += '‚Ä¢ 240.0.0.0/4 - Reserved\\n';
      
      return info;
    }
    
    function cycleIPType() {
      const types = ['ipv4', 'ipv6', 'both'];
      const currentIndex = types.indexOf(currentType);
      currentType = types[(currentIndex + 1) % types.length];
      
      const typeNames = {
        'ipv4': 'IPv4',
        'ipv6': 'IPv6',
        'both': 'Both'
      };
      
      ipTypeBtn.querySelector('.btn-text').textContent = `Type: ${typeNames[currentType]}`;
      setStatus(`IP type filter set to ${typeNames[currentType]}`, 'success');
    }
    
    function clearAll() {
      ipAddress.value = '';
      subnetMask.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      ipAddress.value = '';
      subnetMask.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('IP analysis copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'ip-analysis-report.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        if (text.includes(':')) {
          ipAddress.value = text; // Likely IPv6
        } else if (text.match(/^\\d+\\.\\d+\\.\\d+\\.\\d+/)) {
          ipAddress.value = text; // Likely IPv4
        } else if (text.match(/^\\d+$/)) {
          subnetMask.value = '/' + text; // CIDR notation
        } else {
          ipAddress.value = text;
        }
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      ipAddress.value = '192.168.1.100/24';
      subnetMask.value = '';
      analyzeIP();
    }
    
    // Event listeners
    if (analyzeBtn) analyzeBtn.addEventListener('click', analyzeIP);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (ipTypeBtn) ipTypeBtn.addEventListener('click', cycleIPType);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    [ipAddress, subnetMask].forEach(input => {
      input.addEventListener('input', updateStats);
    });
    
    // Keyboard shortcuts
    [ipAddress, subnetMask].forEach(input => {
      input.addEventListener('keydown', function(e) {
        if (e.ctrlKey || e.metaKey) {
          if (e.key === 'Enter') {
            analyzeIP();
          }
        }
      });
    });
    
    // Initial stats
    updateStats();
  })();
</script>