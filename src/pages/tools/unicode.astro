---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Unicode Explorer - Caiatech">
  <CaiatechToolLayout 
    title="Unicode Explorer" 
    description="Explore Unicode characters"
    icon="U+">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://unicode</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">unicode</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Enter text to analyze Unicode characters, or Unicode codes (U+0041, &#65;, \u0041)..."
            spellcheck="false"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="process-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">üîç Analyze Unicode</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://unicode.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Unicode Explorer" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // Unicode Explorer and Analyzer
  (function() {
    // DOM elements
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const processBtn = document.getElementById('process-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    // Unicode Analysis Functions
    function getUnicodeBlockName(codePoint) {
      const blocks = [
        { start: 0x0000, end: 0x007F, name: 'Basic Latin' },
        { start: 0x0080, end: 0x00FF, name: 'Latin-1 Supplement' },
        { start: 0x0100, end: 0x017F, name: 'Latin Extended-A' },
        { start: 0x0180, end: 0x024F, name: 'Latin Extended-B' },
        { start: 0x0250, end: 0x02AF, name: 'IPA Extensions' },
        { start: 0x02B0, end: 0x02FF, name: 'Spacing Modifier Letters' },
        { start: 0x0300, end: 0x036F, name: 'Combining Diacritical Marks' },
        { start: 0x0370, end: 0x03FF, name: 'Greek and Coptic' },
        { start: 0x0400, end: 0x04FF, name: 'Cyrillic' },
        { start: 0x0500, end: 0x052F, name: 'Cyrillic Supplement' },
        { start: 0x0530, end: 0x058F, name: 'Armenian' },
        { start: 0x0590, end: 0x05FF, name: 'Hebrew' },
        { start: 0x0600, end: 0x06FF, name: 'Arabic' },
        { start: 0x0700, end: 0x074F, name: 'Syriac' },
        { start: 0x0780, end: 0x07BF, name: 'Thaana' },
        { start: 0x07C0, end: 0x07FF, name: 'NKo' },
        { start: 0x0800, end: 0x083F, name: 'Samaritan' },
        { start: 0x0900, end: 0x097F, name: 'Devanagari' },
        { start: 0x0980, end: 0x09FF, name: 'Bengali' },
        { start: 0x0A00, end: 0x0A7F, name: 'Gurmukhi' },
        { start: 0x0A80, end: 0x0AFF, name: 'Gujarati' },
        { start: 0x0B00, end: 0x0B7F, name: 'Oriya' },
        { start: 0x0B80, end: 0x0BFF, name: 'Tamil' },
        { start: 0x0C00, end: 0x0C7F, name: 'Telugu' },
        { start: 0x0C80, end: 0x0CFF, name: 'Kannada' },
        { start: 0x0D00, end: 0x0D7F, name: 'Malayalam' },
        { start: 0x0D80, end: 0x0DFF, name: 'Sinhala' },
        { start: 0x0E00, end: 0x0E7F, name: 'Thai' },
        { start: 0x0E80, end: 0x0EFF, name: 'Lao' },
        { start: 0x0F00, end: 0x0FFF, name: 'Tibetan' },
        { start: 0x1000, end: 0x109F, name: 'Myanmar' },
        { start: 0x10A0, end: 0x10FF, name: 'Georgian' },
        { start: 0x1100, end: 0x11FF, name: 'Hangul Jamo' },
        { start: 0x1200, end: 0x137F, name: 'Ethiopic' },
        { start: 0x13A0, end: 0x13FF, name: 'Cherokee' },
        { start: 0x1400, end: 0x167F, name: 'Unified Canadian Aboriginal Syllabics' },
        { start: 0x1680, end: 0x169F, name: 'Ogham' },
        { start: 0x16A0, end: 0x16FF, name: 'Runic' },
        { start: 0x1700, end: 0x171F, name: 'Tagalog' },
        { start: 0x1720, end: 0x173F, name: 'Hanunoo' },
        { start: 0x1740, end: 0x175F, name: 'Buhid' },
        { start: 0x1760, end: 0x177F, name: 'Tagbanwa' },
        { start: 0x1780, end: 0x17FF, name: 'Khmer' },
        { start: 0x1800, end: 0x18AF, name: 'Mongolian' },
        { start: 0x1900, end: 0x194F, name: 'Limbu' },
        { start: 0x1950, end: 0x197F, name: 'Tai Le' },
        { start: 0x1980, end: 0x19DF, name: 'New Tai Lue' },
        { start: 0x19E0, end: 0x19FF, name: 'Khmer Symbols' },
        { start: 0x1A00, end: 0x1A1F, name: 'Buginese' },
        { start: 0x1A20, end: 0x1AAF, name: 'Tai Tham' },
        { start: 0x1B00, end: 0x1B7F, name: 'Balinese' },
        { start: 0x1B80, end: 0x1BBF, name: 'Sundanese' },
        { start: 0x1BC0, end: 0x1BFF, name: 'Batak' },
        { start: 0x1C00, end: 0x1C4F, name: 'Lepcha' },
        { start: 0x1C50, end: 0x1C7F, name: 'Ol Chiki' },
        { start: 0x1D00, end: 0x1D7F, name: 'Phonetic Extensions' },
        { start: 0x1D80, end: 0x1DBF, name: 'Phonetic Extensions Supplement' },
        { start: 0x1DC0, end: 0x1DFF, name: 'Combining Diacritical Marks Supplement' },
        { start: 0x1E00, end: 0x1EFF, name: 'Latin Extended Additional' },
        { start: 0x1F00, end: 0x1FFF, name: 'Greek Extended' },
        { start: 0x2000, end: 0x206F, name: 'General Punctuation' },
        { start: 0x2070, end: 0x209F, name: 'Superscripts and Subscripts' },
        { start: 0x20A0, end: 0x20CF, name: 'Currency Symbols' },
        { start: 0x20D0, end: 0x20FF, name: 'Combining Diacritical Marks for Symbols' },
        { start: 0x2100, end: 0x214F, name: 'Letterlike Symbols' },
        { start: 0x2150, end: 0x218F, name: 'Number Forms' },
        { start: 0x2190, end: 0x21FF, name: 'Arrows' },
        { start: 0x2200, end: 0x22FF, name: 'Mathematical Operators' },
        { start: 0x2300, end: 0x23FF, name: 'Miscellaneous Technical' },
        { start: 0x2400, end: 0x243F, name: 'Control Pictures' },
        { start: 0x2440, end: 0x245F, name: 'Optical Character Recognition' },
        { start: 0x2460, end: 0x24FF, name: 'Enclosed Alphanumerics' },
        { start: 0x2500, end: 0x257F, name: 'Box Drawing' },
        { start: 0x2580, end: 0x259F, name: 'Block Elements' },
        { start: 0x25A0, end: 0x25FF, name: 'Geometric Shapes' },
        { start: 0x2600, end: 0x26FF, name: 'Miscellaneous Symbols' },
        { start: 0x2700, end: 0x27BF, name: 'Dingbats' },
        { start: 0x27C0, end: 0x27EF, name: 'Miscellaneous Mathematical Symbols-A' },
        { start: 0x27F0, end: 0x27FF, name: 'Supplemental Arrows-A' },
        { start: 0x2800, end: 0x28FF, name: 'Braille Patterns' },
        { start: 0x2900, end: 0x297F, name: 'Supplemental Arrows-B' },
        { start: 0x2980, end: 0x29FF, name: 'Miscellaneous Mathematical Symbols-B' },
        { start: 0x2A00, end: 0x2AFF, name: 'Supplemental Mathematical Operators' },
        { start: 0x2B00, end: 0x2BFF, name: 'Miscellaneous Symbols and Arrows' },
        { start: 0x2C00, end: 0x2C5F, name: 'Glagolitic' },
        { start: 0x2C60, end: 0x2C7F, name: 'Latin Extended-C' },
        { start: 0x2C80, end: 0x2CFF, name: 'Coptic' },
        { start: 0x2D00, end: 0x2D2F, name: 'Georgian Supplement' },
        { start: 0x2D30, end: 0x2D7F, name: 'Tifinagh' },
        { start: 0x2D80, end: 0x2DDF, name: 'Ethiopic Extended' },
        { start: 0x2DE0, end: 0x2DFF, name: 'Cyrillic Extended-A' },
        { start: 0x2E00, end: 0x2E7F, name: 'Supplemental Punctuation' },
        { start: 0x2E80, end: 0x2EFF, name: 'CJK Radicals Supplement' },
        { start: 0x2F00, end: 0x2FDF, name: 'Kangxi Radicals' },
        { start: 0x2FF0, end: 0x2FFF, name: 'Ideographic Description Characters' },
        { start: 0x3000, end: 0x303F, name: 'CJK Symbols and Punctuation' },
        { start: 0x3040, end: 0x309F, name: 'Hiragana' },
        { start: 0x30A0, end: 0x30FF, name: 'Katakana' },
        { start: 0x3100, end: 0x312F, name: 'Bopomofo' },
        { start: 0x3130, end: 0x318F, name: 'Hangul Compatibility Jamo' },
        { start: 0x3190, end: 0x319F, name: 'Kanbun' },
        { start: 0x31A0, end: 0x31BF, name: 'Bopomofo Extended' },
        { start: 0x31C0, end: 0x31EF, name: 'CJK Strokes' },
        { start: 0x31F0, end: 0x31FF, name: 'Katakana Phonetic Extensions' },
        { start: 0x3200, end: 0x32FF, name: 'Enclosed CJK Letters and Months' },
        { start: 0x3300, end: 0x33FF, name: 'CJK Compatibility' },
        { start: 0x3400, end: 0x4DBF, name: 'CJK Unified Ideographs Extension A' },
        { start: 0x4DC0, end: 0x4DFF, name: 'Yijing Hexagram Symbols' },
        { start: 0x4E00, end: 0x9FFF, name: 'CJK Unified Ideographs' },
        { start: 0xA000, end: 0xA48F, name: 'Yi Syllables' },
        { start: 0xA490, end: 0xA4CF, name: 'Yi Radicals' },
        { start: 0xAC00, end: 0xD7AF, name: 'Hangul Syllables' },
        { start: 0xD800, end: 0xDB7F, name: 'High Surrogates' },
        { start: 0xDB80, end: 0xDBFF, name: 'High Private Use Surrogates' },
        { start: 0xDC00, end: 0xDFFF, name: 'Low Surrogates' },
        { start: 0xE000, end: 0xF8FF, name: 'Private Use Area' },
        { start: 0xF900, end: 0xFAFF, name: 'CJK Compatibility Ideographs' },
        { start: 0xFB00, end: 0xFB4F, name: 'Alphabetic Presentation Forms' },
        { start: 0xFB50, end: 0xFDFF, name: 'Arabic Presentation Forms-A' },
        { start: 0xFE00, end: 0xFE0F, name: 'Variation Selectors' },
        { start: 0xFE10, end: 0xFE1F, name: 'Vertical Forms' },
        { start: 0xFE20, end: 0xFE2F, name: 'Combining Half Marks' },
        { start: 0xFE30, end: 0xFE4F, name: 'CJK Compatibility Forms' },
        { start: 0xFE50, end: 0xFE6F, name: 'Small Form Variants' },
        { start: 0xFE70, end: 0xFEFF, name: 'Arabic Presentation Forms-B' },
        { start: 0xFF00, end: 0xFFEF, name: 'Halfwidth and Fullwidth Forms' },
        { start: 0xFFF0, end: 0xFFFF, name: 'Specials' },
        { start: 0x1F300, end: 0x1F5FF, name: 'Miscellaneous Symbols and Pictographs' },
        { start: 0x1F600, end: 0x1F64F, name: 'Emoticons' },
        { start: 0x1F680, end: 0x1F6FF, name: 'Transport and Map Symbols' },
        { start: 0x1F700, end: 0x1F77F, name: 'Alchemical Symbols' },
        { start: 0x1F780, end: 0x1F7FF, name: 'Geometric Shapes Extended' },
        { start: 0x1F800, end: 0x1F8FF, name: 'Supplemental Arrows-C' },
        { start: 0x1F900, end: 0x1F9FF, name: 'Supplemental Symbols and Pictographs' }
      ];
      
      for (const block of blocks) {
        if (codePoint >= block.start && codePoint <= block.end) {
          return block.name;
        }
      }
      
      return 'Unknown Block';
    }
    
    function getCharacterCategory(char) {
      const code = char.codePointAt(0);
      
      // Basic categories based on Unicode ranges
      if (code >= 0x0030 && code <= 0x0039) return 'Decimal Number';
      if (code >= 0x0041 && code <= 0x005A) return 'Uppercase Letter';
      if (code >= 0x0061 && code <= 0x007A) return 'Lowercase Letter';
      if (code >= 0x0020 && code <= 0x002F) return 'Punctuation/Symbol';
      if (code >= 0x003A && code <= 0x0040) return 'Punctuation/Symbol';
      if (code >= 0x005B && code <= 0x0060) return 'Punctuation/Symbol';
      if (code >= 0x007B && code <= 0x007E) return 'Punctuation/Symbol';
      if (code === 0x0020) return 'Space Separator';
      if (code >= 0x0009 && code <= 0x000D) return 'Control Character';
      if (code >= 0x1F600 && code <= 0x1F64F) return 'Emoji';
      if (code >= 0x1F300 && code <= 0x1F5FF) return 'Emoji';
      if (code >= 0x1F680 && code <= 0x1F6FF) return 'Emoji';
      if (code >= 0x1F900 && code <= 0x1F9FF) return 'Emoji';
      if (code >= 0x2600 && code <= 0x26FF) return 'Miscellaneous Symbol';
      if (code >= 0x2700 && code <= 0x27BF) return 'Dingbat';
      if (code >= 0x0080 && code <= 0x00FF) return 'Latin-1 Supplement';
      if (code >= 0x0100 && code <= 0x017F) return 'Latin Extended-A';
      if (code >= 0x0180 && code <= 0x024F) return 'Latin Extended-B';
      if (code >= 0x0400 && code <= 0x04FF) return 'Cyrillic';
      if (code >= 0x0370 && code <= 0x03FF) return 'Greek';
      if (code >= 0x0590 && code <= 0x05FF) return 'Hebrew';
      if (code >= 0x0600 && code <= 0x06FF) return 'Arabic';
      if (code >= 0x4E00 && code <= 0x9FFF) return 'CJK Ideograph';
      if (code >= 0x3040 && code <= 0x309F) return 'Hiragana';
      if (code >= 0x30A0 && code <= 0x30FF) return 'Katakana';
      if (code >= 0xAC00 && code <= 0xD7AF) return 'Hangul Syllable';
      
      return 'Other Character';
    }
    
    function analyzeCharacter(char, index) {
      const codePoint = char.codePointAt(0);
      
      return {
        character: char,
        position: index,
        codePoint: codePoint,
        hexCode: codePoint.toString(16).toUpperCase().padStart(4, '0'),
        unicodeNotation: 'U+' + codePoint.toString(16).toUpperCase().padStart(4, '0'),
        htmlEntity: '&#' + codePoint + ';',
        htmlHex: '&#x' + codePoint.toString(16).toUpperCase() + ';',
        cssEscape: '\\\\' + codePoint.toString(16).toUpperCase().padStart(4, '0'),
        javascriptEscape: char.length === 1 ? 
          '\\\\u' + codePoint.toString(16).toUpperCase().padStart(4, '0') :
          '\\\\u{' + codePoint.toString(16).toUpperCase() + '}',
        pythonEscape: char.length === 1 ?
          '\\\\u' + codePoint.toString(16).toUpperCase().padStart(4, '0') :
          '\\\\U' + codePoint.toString(16).toUpperCase().padStart(8, '0'),
        utf8Bytes: encodeUTF8Bytes(char),
        utf16Bytes: encodeUTF16Bytes(char),
        block: getUnicodeBlockName(codePoint),
        category: getCharacterCategory(char),
        isControl: codePoint < 32 || (codePoint >= 127 && codePoint < 160),
        isAscii: codePoint < 128,
        isPrintable: codePoint >= 32 && codePoint !== 127,
        isEmoji: (codePoint >= 0x1F600 && codePoint <= 0x1F64F) ||
                 (codePoint >= 0x1F300 && codePoint <= 0x1F5FF) ||
                 (codePoint >= 0x1F680 && codePoint <= 0x1F6FF) ||
                 (codePoint >= 0x1F900 && codePoint <= 0x1F9FF) ||
                 (codePoint >= 0x2600 && codePoint <= 0x26FF)
      };
    }
    
    function encodeUTF8Bytes(char) {
      const bytes = [];
      const encoder = new TextEncoder();
      const encoded = encoder.encode(char);
      
      for (let i = 0; i < encoded.length; i++) {
        bytes.push('0x' + encoded[i].toString(16).toUpperCase().padStart(2, '0'));
      }
      
      return bytes;
    }
    
    function encodeUTF16Bytes(char) {
      const bytes = [];
      for (let i = 0; i < char.length; i++) {
        const code = char.charCodeAt(i);
        bytes.push('0x' + (code & 0xFF).toString(16).toUpperCase().padStart(2, '0'));
        bytes.push('0x' + ((code >> 8) & 0xFF).toString(16).toUpperCase().padStart(2, '0'));
      }
      return bytes;
    }
    
    function parseUnicodeInput(input) {
      // Handle different Unicode input formats
      let text = input;
      
      // Convert U+XXXX notation
      text = text.replace(/U\\+([0-9A-Fa-f]+)/g, (match, hex) => {
        return String.fromCodePoint(parseInt(hex, 16));
      });
      
      // Convert &#XXXX; HTML entities
      text = text.replace(/&#([0-9]+);/g, (match, dec) => {
        return String.fromCodePoint(parseInt(dec, 10));
      });
      
      // Convert &#xXXXX; HTML hex entities
      text = text.replace(/&#x([0-9A-Fa-f]+);/g, (match, hex) => {
        return String.fromCodePoint(parseInt(hex, 16));
      });
      
      // Convert \\uXXXX JavaScript escape sequences
      text = text.replace(/\\\\u([0-9A-Fa-f]{4})/g, (match, hex) => {
        return String.fromCharCode(parseInt(hex, 16));
      });
      
      // Convert \\u{XXXXX} JavaScript ES6 escape sequences
      text = text.replace(/\\\\u\\{([0-9A-Fa-f]+)\\}/g, (match, hex) => {
        return String.fromCodePoint(parseInt(hex, 16));
      });
      
      return text;
    }
    
    function processInput() {
      const inputText = input.value.trim();
      if (!inputText) {
        setStatus('Please enter text or Unicode codes to analyze', 'error');
        return;
      }
      
      setStatus('Analyzing Unicode characters...', 'working');
      
      try {
        // Parse the input to handle Unicode escape sequences
        const parsedText = parseUnicodeInput(inputText);
        
        // Analyze each character
        const characters = Array.from(parsedText);
        const analysis = characters.map((char, index) => analyzeCharacter(char, index));
        
        // Generate output
        let result = '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\\n';
        result += '‚ïë         UNICODE ANALYSIS               ‚ïë\\n';
        result += '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\\n\\n';
        
        // Summary
        result += 'TEXT SUMMARY:\\n';
        result += '‚îÄ'.repeat(40) + '\\n';
        result += '‚Ä¢ Original Input: "' + inputText + '"\\n';
        result += '‚Ä¢ Parsed Text: "' + parsedText + '"\\n';
        result += '‚Ä¢ Character Count: ' + characters.length + '\\n';
        result += '‚Ä¢ Byte Length (UTF-8): ' + new TextEncoder().encode(parsedText).length + '\\n';
        result += '‚Ä¢ Byte Length (UTF-16): ' + parsedText.length * 2 + '\\n\\n';
        
        // Character-by-character analysis
        analysis.forEach((char, index) => {
          result += 'CHARACTER #' + (index + 1) + ':\\n';
          result += '‚îÄ'.repeat(20) + '\\n';
          result += '‚Ä¢ Character: ' + (char.isPrintable ? '"' + char.character + '"' : '[Control]') + '\\n';
          result += '‚Ä¢ Unicode: ' + char.unicodeNotation + '\\n';
          result += '‚Ä¢ Code Point: ' + char.codePoint + ' (decimal)\\n';
          result += '‚Ä¢ Hex: 0x' + char.hexCode + '\\n';
          result += '‚Ä¢ HTML Entity: ' + char.htmlEntity + '\\n';
          result += '‚Ä¢ HTML Hex: ' + char.htmlHex + '\\n';
          result += '‚Ä¢ CSS Escape: ' + char.cssEscape + '\\n';
          result += '‚Ä¢ JavaScript: ' + char.javascriptEscape + '\\n';
          result += '‚Ä¢ Python: ' + char.pythonEscape + '\\n';
          result += '‚Ä¢ UTF-8 Bytes: [' + char.utf8Bytes.join(', ') + ']\\n';
          result += '‚Ä¢ UTF-16 Bytes: [' + char.utf16Bytes.join(', ') + ']\\n';
          result += '‚Ä¢ Block: ' + char.block + '\\n';
          result += '‚Ä¢ Category: ' + char.category + '\\n';
          result += '‚Ä¢ Properties: ';
          
          const properties = [];
          if (char.isAscii) properties.push('ASCII');
          if (char.isControl) properties.push('Control');
          if (char.isPrintable) properties.push('Printable');
          if (char.isEmoji) properties.push('Emoji');
          
          result += properties.join(', ') || 'None';
          result += '\\n\\n';
        });
        
        // Character frequency analysis
        const frequency = {};
        characters.forEach(char => {
          frequency[char] = (frequency[char] || 0) + 1;
        });
        
        const sortedFreq = Object.entries(frequency)
          .sort(([,a], [,b]) => b - a)
          .slice(0, 10);
        
        if (sortedFreq.length > 1) {
          result += 'CHARACTER FREQUENCY:\\n';
          result += '‚îÄ'.repeat(40) + '\\n';
          sortedFreq.forEach(([char, count], index) => {
            result += (index + 1) + '. "' + char + '" - ' + count + ' times\\n';
          });
          result += '\\n';
        }
        
        // Unicode blocks analysis
        const blocks = {};
        analysis.forEach(char => {
          blocks[char.block] = (blocks[char.block] || 0) + 1;
        });
        
        result += 'UNICODE BLOCKS USED:\\n';
        result += '‚îÄ'.repeat(40) + '\\n';
        Object.entries(blocks)
          .sort(([,a], [,b]) => b - a)
          .forEach(([block, count]) => {
            result += '‚Ä¢ ' + block + ': ' + count + ' character(s)\\n';
          });
        result += '\\n';
        
        // Encoding information
        result += 'ENCODING INFORMATION:\\n';
        result += '‚îÄ'.repeat(40) + '\\n';
        result += '‚Ä¢ Text can be safely encoded in ASCII: ' + (analysis.every(c => c.isAscii) ? 'Yes' : 'No') + '\\n';
        result += '‚Ä¢ Contains control characters: ' + (analysis.some(c => c.isControl) ? 'Yes' : 'No') + '\\n';
        result += '‚Ä¢ Contains emojis: ' + (analysis.some(c => c.isEmoji) ? 'Yes' : 'No') + '\\n';
        result += '‚Ä¢ Contains non-Latin scripts: ' + (analysis.some(c => !c.isAscii && c.category !== 'Latin-1 Supplement') ? 'Yes' : 'No') + '\\n';
        
        output.textContent = result;
        setStatus('Unicode analysis complete!', 'success');
        updateStats();
        
      } catch (error) {
        setStatus('Error analyzing Unicode', 'error');
        output.textContent = 'Error: ' + error.message;
        updateStats();
      }
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const blob = new Blob([text], { type: 'text/plain; charset=utf-8' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'unicode-analysis.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded analysis', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      const samples = [
        'Hello World! üåç',  // Basic text with emoji
        'Caf√© na√Øve r√©sum√©',  // Accented characters
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –º–∏—Ä',  // Cyrillic
        '„Åì„Çì„Å´„Å°„ÅØ‰∏ñÁïå',  // Japanese
        'üéâüéäüéàüéÅ',  // Emojis
        'U+0041 U+0042 U+0043',  // Unicode notation
        '&#65; &#66; &#67;',  // HTML entities
        '\\\\u0041\\\\u0042\\\\u0043',  // JavaScript escapes
        'Œ±Œ≤Œ≥Œ¥Œµ ‚àë‚àû‚â†‚â§‚â•',  // Greek and math symbols
        'ŸÖÿ±ÿ≠ÿ®ÿß ÿ®ÿßŸÑÿπÿßŸÑŸÖ',  // Arabic
        'ÌïúÍ∏Ä ÌÖåÏä§Ìä∏',  // Korean
        '‚àÄx‚àà‚Ñù: x¬≤‚â•0'  // Mathematical notation
      ];
      
      const randomSample = samples[Math.floor(Math.random() * samples.length)];
      input.value = randomSample;
      processInput();
    }
    
    // Event listeners
    if (processBtn) processBtn.addEventListener('click', processInput);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          processInput();
        }
      }
    });
    
    // Initial stats
    updateStats();
    setStatus('Ready - Enter text or Unicode codes to analyze', 'normal');
  })();
</script>