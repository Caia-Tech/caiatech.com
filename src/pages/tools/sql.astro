---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="SQL Formatter - Caiatech">
  <CaiatechToolLayout 
    title="SQL Formatter" 
    description="Format and beautify SQL queries"
    icon="SQL">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="sql-formatter">
      <!-- Formatter Controls -->
      <div class="control-center formatter-controls">
        <div class="control-group">
          <label for="sql-dialect">SQL Dialect</label>
          <select id="sql-dialect" class="control-select">
            <option value="standard">Standard SQL</option>
            <option value="mysql">MySQL</option>
            <option value="postgresql">PostgreSQL</option>
            <option value="mssql">SQL Server</option>
            <option value="oracle">Oracle</option>
            <option value="sqlite">SQLite</option>
          </select>
        </div>
        
        <div class="control-group">
          <label for="indent-size">Indent Size</label>
          <select id="indent-size" class="control-select">
            <option value="2">2 spaces</option>
            <option value="4" selected>4 spaces</option>
            <option value="tab">Tab</option>
          </select>
        </div>
        
        <div class="control-group">
          <label for="case-style">Keyword Case</label>
          <select id="case-style" class="control-select">
            <option value="upper">UPPERCASE</option>
            <option value="lower">lowercase</option>
            <option value="preserve">Preserve Original</option>
          </select>
        </div>
        
        <div class="checkbox-controls">
          <label class="checkbox-label">
            <input type="checkbox" id="new-line-before-and" checked>
            New line before AND/OR
          </label>
          <label class="checkbox-label">
            <input type="checkbox" id="new-line-before-comma">
            Comma before column names
          </label>
        </div>
      </div>

      <!-- Editor Panels -->
      <div class="tool-panels">
        <!-- Input Panel -->
        <div class="terminal-panel input-panel">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">INPUT://sql.query</span>
            <div class="terminal-actions">
              <button class="terminal-action" id="paste-btn" title="Paste">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                  <rect x="8" y="2" width="8" height="4" rx="1"/>
                </svg>
              </button>
              <button class="terminal-action" id="clear-btn" title="Clear">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
                </svg>
              </button>
              <button class="terminal-action" id="sample-btn" title="Load Sample">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M14 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                  <polyline points="14,2 14,8 20,8"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <textarea 
              id="sql-input" 
              class="terminal-input"
              placeholder="Paste your SQL query here..."
              spellcheck="false"
            ></textarea>
            <div id="error-message" class="error-message"></div>
          </div>
        </div>

        <!-- Output Panel -->
        <div class="terminal-panel output-panel">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">OUTPUT://formatted.sql</span>
            <div class="terminal-actions">
              <button class="terminal-action" id="format-btn" title="Format">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <line x1="21" y1="10" x2="3" y2="10"/>
                  <line x1="21" y1="6" x2="3" y2="6"/>
                  <line x1="21" y1="14" x2="3" y2="14"/>
                  <line x1="21" y1="18" x2="3" y2="18"/>
                </svg>
              </button>
              <button class="terminal-action" id="minify-btn" title="Minify">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M4 6h16M4 12h16M4 18h16"/>
                </svg>
              </button>
              <button class="terminal-action" id="copy-btn" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
              <button class="terminal-action" id="download-btn" title="Download">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                  <polyline points="7 10 12 15 17 10"/>
                  <line x1="12" y1="15" x2="12" y2="3"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <pre id="sql-output" class="terminal-output"><code></code></pre>
          </div>
        </div>
      </div>

      <!-- SQL Reference -->
      <div class="sql-reference">
        <h3>ðŸ“š SQL Quick Reference</h3>
        <div class="reference-tabs">
          <button class="ref-tab active" data-tab="keywords">Keywords</button>
          <button class="ref-tab" data-tab="functions">Functions</button>
          <button class="ref-tab" data-tab="operators">Operators</button>
          <button class="ref-tab" data-tab="examples">Examples</button>
        </div>
        
        <div id="keywords-tab" class="ref-content active">
          <div class="keyword-groups">
            <div class="keyword-group">
              <h4>Data Query</h4>
              <span class="keyword">SELECT</span>
              <span class="keyword">FROM</span>
              <span class="keyword">WHERE</span>
              <span class="keyword">GROUP BY</span>
              <span class="keyword">HAVING</span>
              <span class="keyword">ORDER BY</span>
              <span class="keyword">LIMIT</span>
            </div>
            <div class="keyword-group">
              <h4>Joins</h4>
              <span class="keyword">INNER JOIN</span>
              <span class="keyword">LEFT JOIN</span>
              <span class="keyword">RIGHT JOIN</span>
              <span class="keyword">FULL JOIN</span>
              <span class="keyword">CROSS JOIN</span>
            </div>
            <div class="keyword-group">
              <h4>Data Modification</h4>
              <span class="keyword">INSERT</span>
              <span class="keyword">UPDATE</span>
              <span class="keyword">DELETE</span>
              <span class="keyword">MERGE</span>
            </div>
            <div class="keyword-group">
              <h4>Schema</h4>
              <span class="keyword">CREATE</span>
              <span class="keyword">ALTER</span>
              <span class="keyword">DROP</span>
              <span class="keyword">TRUNCATE</span>
            </div>
          </div>
        </div>

        <div id="functions-tab" class="ref-content">
          <div class="keyword-groups">
            <div class="keyword-group">
              <h4>Aggregate</h4>
              <span class="function">COUNT()</span>
              <span class="function">SUM()</span>
              <span class="function">AVG()</span>
              <span class="function">MIN()</span>
              <span class="function">MAX()</span>
            </div>
            <div class="keyword-group">
              <h4>String</h4>
              <span class="function">CONCAT()</span>
              <span class="function">LENGTH()</span>
              <span class="function">SUBSTRING()</span>
              <span class="function">UPPER()</span>
              <span class="function">LOWER()</span>
            </div>
            <div class="keyword-group">
              <h4>Date/Time</h4>
              <span class="function">NOW()</span>
              <span class="function">DATE()</span>
              <span class="function">YEAR()</span>
              <span class="function">MONTH()</span>
              <span class="function">DAY()</span>
            </div>
          </div>
        </div>

        <div id="operators-tab" class="ref-content">
          <div class="keyword-groups">
            <div class="keyword-group">
              <h4>Comparison</h4>
              <span class="operator">=</span>
              <span class="operator">!=</span>
              <span class="operator">&lt;</span>
              <span class="operator">&gt;</span>
              <span class="operator">&lt;=</span>
              <span class="operator">&gt;=</span>
            </div>
            <div class="keyword-group">
              <h4>Logical</h4>
              <span class="operator">AND</span>
              <span class="operator">OR</span>
              <span class="operator">NOT</span>
              <span class="operator">IN</span>
              <span class="operator">LIKE</span>
              <span class="operator">BETWEEN</span>
            </div>
          </div>
        </div>

        <div id="examples-tab" class="ref-content">
          <div class="example-queries">
            <div class="example-query">
              <h4>Basic SELECT</h4>
              <pre><code>SELECT id, name, email
FROM users
WHERE active = 1
ORDER BY name;</code></pre>
            </div>
            <div class="example-query">
              <h4>JOIN with GROUP BY</h4>
              <pre><code>SELECT u.department, COUNT(*) as user_count
FROM users u
INNER JOIN departments d ON u.dept_id = d.id
WHERE d.active = 1
GROUP BY u.department
HAVING COUNT(*) > 5;</code></pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="SQL Formatter" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .sql-formatter {
    display: grid;
    gap: 1.5rem;
  }

  .formatter-controls {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    padding: 1.5rem;
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
  }

  .control-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .control-group label {
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--color-accent);
    font-family: var(--font-mono);
  }

  .control-select {
    padding: 0.5rem;
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    background: rgba(0, 0, 0, 0.2);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
  }

  .control-select:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.2);
  }

  .checkbox-controls {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
    cursor: pointer;
  }

  .checkbox-label input[type="checkbox"] {
    accent-color: var(--color-accent);
  }

  .tool-panels {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
    min-height: 600px;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* SQL Reference Section */
  .sql-reference {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .sql-reference h3 {
    margin: 0 0 1.5rem 0;
    color: var(--color-accent);
    font-family: var(--font-mono);
  }

  .reference-tabs {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    border-bottom: 1px solid rgba(0, 212, 255, 0.1);
  }

  .ref-tab {
    padding: 0.5rem 1rem;
    background: transparent;
    border: none;
    border-bottom: 2px solid transparent;
    cursor: pointer;
    font-size: 0.9rem;
    font-family: var(--font-mono);
    color: var(--color-text-secondary);
    transition: all 0.2s;
  }

  .ref-tab.active {
    color: var(--color-accent);
    border-bottom-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.05);
  }

  .ref-tab:hover:not(.active) {
    color: var(--color-text);
    background: rgba(0, 212, 255, 0.02);
  }

  .ref-content {
    display: none;
  }

  .ref-content.active {
    display: block;
  }

  .keyword-groups {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
  }

  .keyword-group h4 {
    margin: 0 0 0.75rem 0;
    color: var(--color-accent);
    font-size: 1rem;
    font-family: var(--font-mono);
    border-bottom: 2px solid rgba(0, 212, 255, 0.3);
    padding-bottom: 0.25rem;
  }

  .keyword,
  .function,
  .operator {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    margin: 0.25rem 0.25rem 0.25rem 0;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 4px;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.2s;
  }

  .keyword {
    color: #00d4ff;
    font-weight: 600;
  }

  .function {
    color: #ff9800;
  }

  .operator {
    color: #ff00ff;
  }

  .keyword:hover,
  .function:hover,
  .operator:hover {
    background: rgba(0, 212, 255, 0.1);
    border-color: var(--color-accent);
    transform: translateY(-1px);
    box-shadow: 0 2px 10px rgba(0, 212, 255, 0.2);
  }

  .example-queries {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .example-query {
    background: rgba(0, 0, 0, 0.2);
    padding: 1rem;
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .example-query h4 {
    margin: 0 0 0.75rem 0;
    color: var(--color-accent);
    font-size: 0.95rem;
    font-family: var(--font-mono);
  }

  .example-query pre {
    margin: 0;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 4px;
    font-size: 0.85rem;
    overflow-x: auto;
    border: 1px solid rgba(0, 212, 255, 0.2);
  }

  .example-query code {
    color: var(--color-text);
    font-family: var(--font-mono);
  }

  .error-message {
    padding: 0.75rem 1rem;
    background: rgba(255, 0, 0, 0.1);
    color: #ff5f57;
    border-top: 1px solid rgba(255, 0, 0, 0.3);
    display: none;
    font-size: 0.9rem;
    font-family: var(--font-mono);
  }

  .error-message.show {
    display: block;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .tool-panels {
      grid-template-columns: 1fr;
    }
    
    .formatter-controls {
      grid-template-columns: 1fr 1fr;
    }
  }

  @media (max-width: 768px) {
    .formatter-controls {
      grid-template-columns: 1fr;
    }
    
    .reference-tabs {
      flex-wrap: wrap;
    }
    
    .keyword-groups {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // SQL Formatter Tool Implementation
  (function() {
    const sqlInput = document.getElementById('sql-input');
    const sqlOutput = document.getElementById('sql-output')?.querySelector('code');
    const errorMessage = document.getElementById('error-message');
    const dialectSelect = document.getElementById('sql-dialect');
    const indentSelect = document.getElementById('indent-size');
    const caseSelect = document.getElementById('case-style');
    const newLineBeforeAnd = document.getElementById('new-line-before-and');
    const newLineBeforeComma = document.getElementById('new-line-before-comma');

    const formatBtn = document.getElementById('format-btn');
    const minifyBtn = document.getElementById('minify-btn');
    const copyBtn = document.getElementById('copy-btn');
    const clearBtn = document.getElementById('clear-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const downloadBtn = document.getElementById('download-btn');
    const sampleBtn = document.getElementById('sample-btn');

    const sqlKeywords = [
      'SELECT', 'FROM', 'WHERE', 'GROUP BY', 'HAVING', 'ORDER BY', 'LIMIT', 'OFFSET',
      'INNER JOIN', 'LEFT JOIN', 'RIGHT JOIN', 'FULL JOIN', 'CROSS JOIN', 'ON', 'USING',
      'INSERT', 'INTO', 'VALUES', 'UPDATE', 'SET', 'DELETE', 'MERGE',
      'CREATE', 'TABLE', 'ALTER', 'DROP', 'TRUNCATE', 'INDEX', 'VIEW', 'DATABASE',
      'UNION', 'UNION ALL', 'INTERSECT', 'EXCEPT', 'WITH', 'AS',
      'AND', 'OR', 'NOT', 'IN', 'NOT IN', 'EXISTS', 'NOT EXISTS', 'BETWEEN', 'LIKE', 'ILIKE',
      'IS', 'IS NOT', 'IS NULL', 'IS NOT NULL', 'DISTINCT', 'ALL', 'ANY', 'SOME',
      'CASE', 'WHEN', 'THEN', 'ELSE', 'END', 'IF', 'ELSIF', 'ENDIF',
      'BEGIN', 'COMMIT', 'ROLLBACK', 'TRANSACTION', 'DECLARE', 'EXECUTE'
    ];

    const sqlFunctions = [
      'COUNT', 'SUM', 'AVG', 'MIN', 'MAX', 'STDDEV', 'VARIANCE',
      'CONCAT', 'LENGTH', 'SUBSTRING', 'UPPER', 'LOWER', 'TRIM', 'LTRIM', 'RTRIM',
      'NOW', 'CURRENT_DATE', 'CURRENT_TIME', 'CURRENT_TIMESTAMP', 'DATE', 'TIME',
      'YEAR', 'MONTH', 'DAY', 'HOUR', 'MINUTE', 'SECOND',
      'CAST', 'CONVERT', 'COALESCE', 'NULLIF', 'GREATEST', 'LEAST',
      'ROW_NUMBER', 'RANK', 'DENSE_RANK', 'LAG', 'LEAD'
    ];

    const sampleQueries = {
      standard: `SELECT u.id, u.name, u.email, d.department_name, COUNT(o.id) as order_count
FROM users u
INNER JOIN departments d ON u.department_id = d.id
LEFT JOIN orders o ON u.id = o.user_id
WHERE u.active = 1 AND d.budget > 50000
GROUP BY u.id, u.name, u.email, d.department_name
HAVING COUNT(o.id) > 2
ORDER BY order_count DESC, u.name ASC
LIMIT 10;`,
      
      mysql: `SELECT u.id, u.name, u.email, d.department_name, COUNT(o.id) as order_count
FROM users u
INNER JOIN departments d ON u.department_id = d.id
LEFT JOIN orders o ON u.id = o.user_id
WHERE u.active = 1 AND d.budget > 50000 AND u.created_at >= DATE_SUB(NOW(), INTERVAL 1 YEAR)
GROUP BY u.id, u.name, u.email, d.department_name
HAVING COUNT(o.id) > 2
ORDER BY order_count DESC, u.name ASC
LIMIT 10;`,
      
      postgresql: `SELECT u.id, u.name, u.email, d.department_name, COUNT(o.id) as order_count
FROM users u
INNER JOIN departments d ON u.department_id = d.id
LEFT JOIN orders o ON u.id = o.user_id
WHERE u.active = true AND d.budget > 50000 AND u.created_at >= CURRENT_DATE - INTERVAL '1 year'
GROUP BY u.id, u.name, u.email, d.department_name
HAVING COUNT(o.id) > 2
ORDER BY order_count DESC, u.name ASC
LIMIT 10;`,

      mssql: `SELECT TOP 10 u.id, u.name, u.email, d.department_name, COUNT(o.id) as order_count
FROM users u
INNER JOIN departments d ON u.department_id = d.id
LEFT JOIN orders o ON u.id = o.user_id
WHERE u.active = 1 AND d.budget > 50000
GROUP BY u.id, u.name, u.email, d.department_name
HAVING COUNT(o.id) > 2
ORDER BY order_count DESC, u.name ASC;`,

      oracle: `SELECT * FROM (
  SELECT u.id, u.name, u.email, d.department_name, COUNT(o.id) as order_count
  FROM users u
  INNER JOIN departments d ON u.department_id = d.id
  LEFT JOIN orders o ON u.id = o.user_id
  WHERE u.active = 1 AND d.budget > 50000
  GROUP BY u.id, u.name, u.email, d.department_name
  HAVING COUNT(o.id) > 2
  ORDER BY order_count DESC, u.name ASC
) WHERE ROWNUM <= 10;`,

      sqlite: `SELECT u.id, u.name, u.email, d.department_name, COUNT(o.id) as order_count
FROM users u
INNER JOIN departments d ON u.department_id = d.id
LEFT JOIN orders o ON u.id = o.user_id
WHERE u.active = 1 AND d.budget > 50000
GROUP BY u.id, u.name, u.email, d.department_name
HAVING COUNT(o.id) > 2
ORDER BY order_count DESC, u.name ASC
LIMIT 10;`
    };

    function showError(message) {
      errorMessage.textContent = message;
      errorMessage.classList.add('show');
    }

    function clearError() {
      errorMessage.textContent = '';
      errorMessage.classList.remove('show');
    }

    function getIndentation() {
      const indentSize = indentSelect.value;
      if (indentSize === 'tab') return '\t';
      return ' '.repeat(parseInt(indentSize));
    }

    function formatKeywords(sql, caseStyle) {
      if (caseStyle === 'preserve') return sql;
      
      let formatted = sql;
      const keywords = [...sqlKeywords, ...sqlFunctions];
      
      keywords.forEach(keyword => {
        const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
        formatted = formatted.replace(regex, match => {
          return caseStyle === 'upper' ? match.toUpperCase() : match.toLowerCase();
        });
      });
      
      return formatted;
    }

    function formatSQL(sql) {
      if (!sql.trim()) return '';
      
      const indent = getIndentation();
      const caseStyle = caseSelect.value;
      const newLineAndOr = newLineBeforeAnd.checked;
      const commaFirst = newLineBeforeComma.checked;
      
      // Basic tokenization and formatting
      let formatted = sql
        .replace(/\s+/g, ' ')
        .trim();
      
      // Format keywords with proper case
      formatted = formatKeywords(formatted, caseStyle);
      
      // Add line breaks for major clauses
      const majorClauses = ['SELECT', 'FROM', 'WHERE', 'GROUP BY', 'HAVING', 'ORDER BY', 'LIMIT', 'OFFSET'];
      majorClauses.forEach(clause => {
        const upperCase = caseStyle === 'upper' ? clause : caseStyle === 'lower' ? clause.toLowerCase() : clause;
        const regex = new RegExp(`\\b${clause}\\b`, 'gi');
        formatted = formatted.replace(regex, `\n${upperCase}`);
      });
      
      // Handle JOIN clauses
      const joinTypes = ['INNER JOIN', 'LEFT JOIN', 'RIGHT JOIN', 'FULL JOIN', 'CROSS JOIN'];
      joinTypes.forEach(joinType => {
        const caseJoin = formatKeywords(joinType, caseStyle);
        const regex = new RegExp(`\\b${joinType}\\b`, 'gi');
        formatted = formatted.replace(regex, `\n${caseJoin}`);
      });
      
      // Handle AND/OR operators
      if (newLineAndOr) {
        formatted = formatted.replace(/\b(AND|OR)\b/gi, match => {
          const keyword = formatKeywords(match, caseStyle);
          return `\n${indent}${keyword}`;
        });
      }
      
      // Handle commas in SELECT statements
      if (commaFirst) {
        const selectRegex = /SELECT\s+(.*?)\s+FROM/si;
        const selectMatch = formatted.match(selectRegex);
        if (selectMatch) {
          const columns = selectMatch[1];
          const formattedColumns = columns
            .split(',')
            .map((col, index) => {
              const trimmed = col.trim();
              return index === 0 ? `${indent}${trimmed}` : `,${indent}${trimmed}`;
            })
            .join('\n');
          formatted = formatted.replace(selectMatch[0], `SELECT\n${formattedColumns}\nFROM`);
        }
      }
      
      // Add proper indentation
      const lines = formatted.split('\n');
      let indentLevel = 0;
      const indentedLines = lines.map(line => {
        const trimmed = line.trim();
        if (!trimmed) return '';
        
        // Decrease indent for closing keywords
        if (/^(END|ELSE|\))/.test(trimmed)) {
          indentLevel = Math.max(0, indentLevel - 1);
        }
        
        const indentedLine = indent.repeat(indentLevel) + trimmed;
        
        // Increase indent for opening keywords
        if (/\b(CASE|IF|BEGIN|\()\b/.test(trimmed)) {
          indentLevel++;
        }
        
        return indentedLine;
      });
      
      return indentedLines.filter(line => line.trim()).join('\n');
    }

    function minifySQL(sql) {
      return sql
        .replace(/\s+/g, ' ')
        .replace(/\s*([,;()=<>!])\s*/g, '$1')
        .trim();
    }

    function highlightSQL(sql) {
      let highlighted = sql;
      
      // Escape HTML
      highlighted = highlighted.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      
      // Highlight strings first
      highlighted = highlighted.replace(/'([^']*)'/g, '<span class="sql-string">\'$1\'</span>');
      highlighted = highlighted.replace(/"([^"]*)"/g, '<span class="sql-string">"$1"</span>');
      
      // Highlight keywords
      sqlKeywords.forEach(keyword => {
        const regex = new RegExp(`\\b(${keyword})\\b`, 'gi');
        highlighted = highlighted.replace(regex, '<span class="sql-keyword">$1</span>');
      });
      
      // Highlight functions
      sqlFunctions.forEach(func => {
        const regex = new RegExp(`\\b(${func})\\s*\\(`, 'gi');
        highlighted = highlighted.replace(regex, '<span class="sql-function">$1</span>(');
      });
      
      // Highlight numbers
      highlighted = highlighted.replace(/\b\d+(\.\d+)?\b/g, '<span class="sql-number">$&</span>');
      
      // Highlight comments
      highlighted = highlighted.replace(/--.*$/gm, '<span class="sql-comment">$&</span>');
      highlighted = highlighted.replace(/\/\*[\s\S]*?\*\//g, '<span class="sql-comment">$&</span>');
      
      return highlighted;
    }

    // Event listeners
    formatBtn?.addEventListener('click', () => {
      const sql = sqlInput.value.trim();
      if (sql) {
        try {
          const formatted = formatSQL(sql);
          const highlighted = highlightSQL(formatted);
          sqlOutput.innerHTML = highlighted;
          clearError();
        } catch (error) {
          showError(`Formatting error: ${error.message}`);
        }
      }
    });

    minifyBtn?.addEventListener('click', () => {
      const sql = sqlInput.value.trim();
      if (sql) {
        const minified = minifySQL(sql);
        sqlOutput.textContent = minified;
        clearError();
      }
    });

    copyBtn?.addEventListener('click', async () => {
      const text = sqlOutput.textContent;
      if (text) {
        try {
          await navigator.clipboard.writeText(text);
        } catch (err) {
          console.error('Failed to copy:', err);
        }
      }
    });

    pasteBtn?.addEventListener('click', async () => {
      try {
        const text = await navigator.clipboard.readText();
        sqlInput.value = text;
      } catch (err) {
        console.error('Failed to paste:', err);
      }
    });

    clearBtn?.addEventListener('click', () => {
      sqlInput.value = '';
      sqlOutput.textContent = '';
      clearError();
    });

    sampleBtn?.addEventListener('click', () => {
      const dialect = dialectSelect.value;
      const sample = sampleQueries[dialect] || sampleQueries.standard;
      sqlInput.value = sample;
      
      // Auto-format the sample
      const formatted = formatSQL(sample);
      const highlighted = highlightSQL(formatted);
      sqlOutput.innerHTML = highlighted;
    });

    downloadBtn?.addEventListener('click', () => {
      const text = sqlOutput.textContent;
      if (text) {
        const blob = new Blob([text], { type: 'text/sql' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'formatted-query.sql';
        a.click();
        URL.revokeObjectURL(url);
      }
    });

    // Reference tabs
    document.querySelectorAll('.ref-tab').forEach(tab => {
      tab.addEventListener('click', () => {
        const tabName = tab.getAttribute('data-tab');
        
        // Remove active from all tabs and content
        document.querySelectorAll('.ref-tab').forEach(t => t.classList.remove('active'));
        document.querySelectorAll('.ref-content').forEach(c => c.classList.remove('active'));
        
        // Add active to clicked tab
        tab.classList.add('active');
        const targetContent = document.getElementById(`${tabName}-tab`);
        targetContent?.classList.add('active');
      });
    });

    // Add click handlers for reference items to insert into input
    document.querySelectorAll('.keyword, .function, .operator').forEach(item => {
      item.addEventListener('click', () => {
        const text = item.textContent || '';
        const cursorPos = sqlInput.selectionStart;
        const currentValue = sqlInput.value;
        const newValue = currentValue.slice(0, cursorPos) + text + ' ' + currentValue.slice(cursorPos);
        sqlInput.value = newValue;
        sqlInput.focus();
        sqlInput.setSelectionRange(cursorPos + text.length + 1, cursorPos + text.length + 1);
      });
    });

    // Auto-format on input with debounce
    let timeout;
    sqlInput?.addEventListener('input', () => {
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        const sql = sqlInput.value.trim();
        if (sql && sql.length < 10000) { // Only auto-format for smaller queries
          try {
            const formatted = formatSQL(sql);
            const highlighted = highlightSQL(formatted);
            sqlOutput.innerHTML = highlighted;
            clearError();
          } catch (error) {
            // Silently fail on auto-format
          }
        }
      }, 1000);
    });

    // Initialize with sample
    const initialSample = sampleQueries.standard;
    sqlInput.value = initialSample;
    const formatted = formatSQL(initialSample);
    const highlighted = highlightSQL(formatted);
    sqlOutput.innerHTML = highlighted;
  })();
</script>

<style is:global>
  .sql-keyword {
    color: #00d4ff;
    font-weight: 600;
  }
  
  .sql-function {
    color: #ff9800;
    font-weight: 500;
  }
  
  .sql-string {
    color: #4caf50;
  }
  
  .sql-number {
    color: #ff00ff;
  }
  
  .sql-comment {
    color: #666;
    font-style: italic;
  }
</style>