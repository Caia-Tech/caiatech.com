---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Cron Expression Parser - Caiatech">
  <CaiatechToolLayout 
    title="Cron Expression Parser" 
    description="Parse and explain cron expressions"
    icon="‚è≤">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Cron Expression Display -->
      <div class="cron-expression-display">
        <div class="expression-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">CRON://expression</span>
          <div class="expression-actions">
            <button id="copy-expression" class="cyber-btn secondary">üìã Copy</button>
            <button id="validate-expression" class="cyber-btn primary">‚úì Validate</button>
          </div>
        </div>
        <div class="expression-container">
          <input type="text" id="cron-expression" value="0 0 * * *" class="expression-input" />
          <div class="field-labels">
            <span title="Minute (0-59)">MIN</span>
            <span title="Hour (0-23)">HOUR</span>
            <span title="Day of Month (1-31)">DAY</span>
            <span title="Month (1-12)">MON</span>
            <span title="Day of Week (0-7)">DOW</span>
          </div>
          <div id="expression-description" class="expression-description">
            Every day at midnight (00:00)
          </div>
        </div>
      </div>

      <!-- Presets Section -->
      <div class="presets-section">
        <h3 class="section-title">‚ö° QUICK PRESETS</h3>
        <div class="preset-grid">
          <button class="preset-btn" data-cron="* * * * *" data-desc="Every minute">
            <span class="preset-icon">‚è±</span>
            <span>Every minute</span>
          </button>
          <button class="preset-btn" data-cron="0 * * * *" data-desc="Every hour">
            <span class="preset-icon">üïê</span>
            <span>Every hour</span>
          </button>
          <button class="preset-btn" data-cron="0 0 * * *" data-desc="Daily at midnight">
            <span class="preset-icon">üåô</span>
            <span>Daily midnight</span>
          </button>
          <button class="preset-btn" data-cron="0 12 * * *" data-desc="Daily at noon">
            <span class="preset-icon">‚òÄÔ∏è</span>
            <span>Daily noon</span>
          </button>
          <button class="preset-btn" data-cron="0 0 * * 0" data-desc="Weekly on Sunday">
            <span class="preset-icon">üìÖ</span>
            <span>Weekly Sunday</span>
          </button>
          <button class="preset-btn" data-cron="0 0 1 * *" data-desc="Monthly on 1st">
            <span class="preset-icon">üìÜ</span>
            <span>Monthly 1st</span>
          </button>
          <button class="preset-btn" data-cron="0 0 1 1 *" data-desc="Yearly on Jan 1st">
            <span class="preset-icon">üéä</span>
            <span>Yearly Jan 1st</span>
          </button>
          <button class="preset-btn" data-cron="0 9-17 * * 1-5" data-desc="Business hours">
            <span class="preset-icon">üíº</span>
            <span>Business hours</span>
          </button>
        </div>
      </div>

      <!-- Visual Builder -->
      <div class="builder-section">
        <h3 class="section-title">üîß VISUAL BUILDER</h3>
        
        <div class="field-group">
          <label>Minute (0-59)</label>
          <div class="field-options">
            <label class="radio-option">
              <input type="radio" name="minute" value="*" checked>
              Every minute
            </label>
            <label class="radio-option">
              <input type="radio" name="minute" value="specific">
              Specific
            </label>
            <label class="radio-option">
              <input type="radio" name="minute" value="interval">
              Every N minutes
            </label>
          </div>
          <div class="field-inputs">
            <input type="number" id="minute-specific" min="0" max="59" placeholder="0" class="specific-input" disabled>
            <input type="number" id="minute-interval" min="1" max="59" placeholder="5" class="interval-input" disabled>
          </div>
        </div>

        <div class="field-group">
          <label>Hour (0-23)</label>
          <div class="field-options">
            <label class="radio-option">
              <input type="radio" name="hour" value="*" checked>
              Every hour
            </label>
            <label class="radio-option">
              <input type="radio" name="hour" value="specific">
              Specific
            </label>
            <label class="radio-option">
              <input type="radio" name="hour" value="range">
              Range
            </label>
          </div>
          <div class="field-inputs">
            <input type="number" id="hour-specific" min="0" max="23" placeholder="0" class="specific-input" disabled>
            <input type="number" id="hour-range-start" min="0" max="23" placeholder="9" class="range-input" disabled>
            <span class="range-separator">to</span>
            <input type="number" id="hour-range-end" min="0" max="23" placeholder="17" class="range-input" disabled>
          </div>
        </div>

        <div class="field-group">
          <label>Day of Week (0=Sunday)</label>
          <div class="field-options">
            <label class="radio-option">
              <input type="radio" name="dow" value="*" checked>
              Every day
            </label>
            <label class="radio-option">
              <input type="radio" name="dow" value="weekdays">
              Weekdays
            </label>
            <label class="radio-option">
              <input type="radio" name="dow" value="weekends">
              Weekends
            </label>
          </div>
        </div>
      </div>

      <!-- Next Runs Section -->
      <div class="next-runs-section">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">SCHEDULE://next.runs</span>
        </div>
        <div class="runs-container">
          <h3 class="runs-title">üïí Next Scheduled Runs</h3>
          <div id="next-runs-list" class="runs-list">
            <!-- Next runs will be populated here -->
          </div>
        </div>
      </div>

      <!-- Reference Section -->
      <div class="reference-section">
        <h3 class="section-title">üìñ CRON REFERENCE</h3>
        <div class="reference-grid">
          <div class="reference-card">
            <h4>Field Format</h4>
            <div class="format-table">
              <div class="format-row">
                <span class="field-name">Minute</span>
                <span class="field-range">0-59</span>
              </div>
              <div class="format-row">
                <span class="field-name">Hour</span>
                <span class="field-range">0-23</span>
              </div>
              <div class="format-row">
                <span class="field-name">Day</span>
                <span class="field-range">1-31</span>
              </div>
              <div class="format-row">
                <span class="field-name">Month</span>
                <span class="field-range">1-12</span>
              </div>
              <div class="format-row">
                <span class="field-name">Day of Week</span>
                <span class="field-range">0-7</span>
              </div>
            </div>
          </div>
          <div class="reference-card">
            <h4>Special Characters</h4>
            <div class="special-chars">
              <div class="char-item">
                <code>*</code>
                <span>Any value</span>
              </div>
              <div class="char-item">
                <code>,</code>
                <span>List (1,3,5)</span>
              </div>
              <div class="char-item">
                <code>-</code>
                <span>Range (1-5)</span>
              </div>
              <div class="char-item">
                <code>/</code>
                <span>Step (*/5)</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Cron Expression Parser" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Cron Expression Display */
  .cron-expression-display {
    background: var(--color-surface);
    border: 2px solid var(--color-accent);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.1);
  }

  .expression-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .expression-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .expression-container {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .expression-input {
    width: 100%;
    padding: 1rem;
    font-family: var(--font-mono);
    font-size: 1.8rem;
    font-weight: 600;
    text-align: center;
    border: 2px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    background: rgba(0, 0, 0, 0.3);
    color: var(--color-accent);
    letter-spacing: 0.3em;
    transition: all 0.3s;
  }

  .expression-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.3),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .expression-input.error {
    border-color: #ff5f57;
    background: rgba(255, 95, 87, 0.1);
  }

  .expression-input.valid {
    border-color: #28ca42;
    background: rgba(40, 202, 66, 0.05);
  }

  .field-labels {
    display: flex;
    justify-content: space-around;
    font-size: 0.8rem;
    color: var(--color-text-secondary);
    font-weight: 600;
    font-family: var(--font-mono);
  }

  .field-labels span {
    padding: 0.25rem 0.5rem;
    background: rgba(0, 212, 255, 0.1);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 4px;
    cursor: help;
  }

  .expression-description {
    padding: 1rem;
    background: linear-gradient(135deg, rgba(40, 202, 66, 0.1) 0%, rgba(0, 212, 255, 0.1) 100%);
    border: 1px solid rgba(40, 202, 66, 0.3);
    border-radius: 8px;
    font-size: 1.1rem;
    font-weight: 600;
    color: #28ca42;
    text-align: center;
    font-family: var(--font-mono);
  }

  /* Presets Section */
  .presets-section {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .section-title {
    margin: 0 0 1rem 0;
    color: var(--color-accent);
    font-size: 1rem;
    font-family: var(--font-mono);
    font-weight: 600;
    letter-spacing: 1px;
  }

  .preset-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    gap: 0.75rem;
  }

  .preset-btn {
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    cursor: pointer;
    font-size: 0.85rem;
    font-family: var(--font-mono);
    color: var(--color-text);
    transition: all 0.2s;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }

  .preset-btn:hover {
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 212, 255, 0.3);
  }

  .preset-icon {
    font-size: 1.5rem;
  }

  /* Visual Builder */
  .builder-section {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .field-group {
    margin-bottom: 1.5rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid rgba(0, 212, 255, 0.1);
  }

  .field-group:last-child {
    border-bottom: none;
    margin-bottom: 0;
  }

  .field-group > label {
    display: block;
    font-weight: 600;
    color: var(--color-accent);
    margin-bottom: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.9rem;
  }

  .field-options {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 0.75rem;
  }

  .radio-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-size: 0.9rem;
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
  }

  .radio-option input[type="radio"] {
    accent-color: var(--color-accent);
  }

  .field-inputs {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .specific-input,
  .interval-input,
  .range-input {
    padding: 0.5rem;
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 4px;
    background: rgba(0, 0, 0, 0.2);
    color: var(--color-text);
    font-family: var(--font-mono);
    width: 80px;
  }

  .specific-input:not(:disabled):focus,
  .interval-input:not(:disabled):focus,
  .range-input:not(:disabled):focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.2);
  }

  .specific-input:disabled,
  .interval-input:disabled,
  .range-input:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .range-separator {
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
  }

  /* Next Runs Section */
  .next-runs-section {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .runs-container {
    padding: 1.5rem;
  }

  .runs-title {
    margin: 0 0 1rem 0;
    color: var(--color-accent);
    font-size: 1rem;
    font-family: var(--font-mono);
  }

  .runs-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .run-item {
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 6px;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .run-date {
    font-weight: 600;
    color: var(--color-text);
  }

  .run-relative {
    color: var(--color-accent);
    font-size: 0.85rem;
  }

  /* Reference Section */
  .reference-section {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .reference-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
  }

  .reference-card {
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 8px;
    padding: 1rem;
  }

  .reference-card h4 {
    margin: 0 0 1rem 0;
    color: var(--color-accent);
    font-size: 0.9rem;
    font-family: var(--font-mono);
  }

  .format-table {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .format-row {
    display: grid;
    grid-template-columns: 80px 1fr;
    gap: 1rem;
    padding: 0.5rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    font-size: 0.85rem;
    font-family: var(--font-mono);
  }

  .field-name {
    font-weight: 600;
    color: var(--color-text);
  }

  .field-range {
    color: var(--color-accent);
  }

  .special-chars {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .char-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.5rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .char-item code {
    background: var(--color-accent);
    color: var(--color-background);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-weight: 600;
    min-width: 30px;
    text-align: center;
  }

  .char-item span {
    color: var(--color-text-secondary);
  }

  /* Cyber buttons */
  .cyber-btn {
    padding: 0.5rem 1rem;
    border: 1px solid var(--color-border);
    border-radius: 6px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.2s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn.secondary {
    border-color: rgba(0, 212, 255, 0.2);
    background: rgba(0, 0, 0, 0.2);
  }

  .cyber-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 3px 15px rgba(0, 212, 255, 0.3);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .preset-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .field-options {
      flex-direction: column;
      gap: 0.5rem;
    }

    .reference-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Cron Expression Parser Implementation
  (function() {
    const cronExpression = document.getElementById('cron-expression');
    const expressionDescription = document.getElementById('expression-description');
    const nextRunsList = document.getElementById('next-runs-list');

    let currentCron = '0 0 * * *';

    // Cron field descriptions
    const cronDescriptions = {
      '* * * * *': 'Every minute',
      '0 * * * *': 'Every hour at minute 0',
      '0 0 * * *': 'Every day at midnight (00:00)',
      '0 12 * * *': 'Every day at noon (12:00)',
      '0 0 * * 0': 'Every Sunday at midnight',
      '0 0 * * 1': 'Every Monday at midnight',
      '0 0 1 * *': 'On the first day of every month at midnight',
      '0 0 1 1 *': 'On January 1st at midnight (yearly)',
      '0 9-17 * * 1-5': 'Every hour from 9am to 5pm, Monday through Friday',
      '*/5 * * * *': 'Every 5 minutes',
      '*/15 * * * *': 'Every 15 minutes',
      '*/30 * * * *': 'Every 30 minutes',
      '0 */2 * * *': 'Every 2 hours',
      '0 0 */2 * *': 'Every 2 days',
      '0 0 * * 1-5': 'Every weekday at midnight',
      '0 0 * * 6,0': 'Every weekend at midnight'
    };

    function parseCronExpression(cron) {
      const parts = cron.trim().split(/\s+/);
      if (parts.length !== 5) return 'Invalid cron expression';

      const [minute, hour, day, month, dow] = parts;

      // Check for exact matches first
      if (cronDescriptions[cron]) {
        return cronDescriptions[cron];
      }

      // Build description dynamically
      let description = '';
      
      // Handle minute
      if (minute === '*') {
        description += 'Every minute';
      } else if (minute.startsWith('*/')) {
        const interval = minute.slice(2);
        description += `Every ${interval} minute${interval !== '1' ? 's' : ''}`;
      } else if (minute.includes(',')) {
        description += `At minute ${minute}`;
      } else if (minute.includes('-')) {
        description += `Minutes ${minute}`;
      } else {
        description += `At minute ${minute}`;
      }

      // Handle hour
      if (hour !== '*') {
        if (hour.includes('-')) {
          const [start, end] = hour.split('-');
          description += ` between ${start}:00 and ${end}:00`;
        } else if (hour.includes(',')) {
          description += ` at hours ${hour}`;
        } else if (hour.startsWith('*/')) {
          const interval = hour.slice(2);
          description += ` every ${interval} hours`;
        } else {
          const h = parseInt(hour);
          const period = h >= 12 ? 'PM' : 'AM';
          const displayHour = h > 12 ? h - 12 : (h === 0 ? 12 : h);
          description += ` at ${displayHour}:00 ${period}`;
        }
      }

      // Handle day of month
      if (day !== '*') {
        if (day === 'L') {
          description += ' on the last day of the month';
        } else if (day.includes(',')) {
          description += ` on days ${day} of the month`;
        } else if (day.includes('-')) {
          description += ` from day ${day} of the month`;
        } else if (day.startsWith('*/')) {
          const interval = day.slice(2);
          description += ` every ${interval} days`;
        } else {
          const suffix = day === '1' || day === '21' || day === '31' ? 'st' :
                        day === '2' || day === '22' ? 'nd' :
                        day === '3' || day === '23' ? 'rd' : 'th';
          description += ` on the ${day}${suffix}`;
        }
      }

      // Handle month
      if (month !== '*') {
        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                       'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        if (month.includes(',')) {
          const monthNames = month.split(',').map(m => months[parseInt(m) - 1]).join(', ');
          description += ` in ${monthNames}`;
        } else if (month.includes('-')) {
          const [start, end] = month.split('-');
          description += ` from ${months[parseInt(start) - 1]} to ${months[parseInt(end) - 1]}`;
        } else {
          description += ` in ${months[parseInt(month) - 1]}`;
        }
      }

      // Handle day of week
      if (dow !== '*') {
        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        if (dow === '1-5') {
          description += ' on weekdays';
        } else if (dow === '6,0' || dow === '0,6') {
          description += ' on weekends';
        } else if (dow.includes(',')) {
          const dayNames = dow.split(',').map(d => days[parseInt(d) % 7]).join(', ');
          description += ` on ${dayNames}`;
        } else if (dow.includes('-')) {
          const [start, end] = dow.split('-');
          description += ` from ${days[parseInt(start)]} to ${days[parseInt(end)]}`;
        } else {
          description += ` on ${days[parseInt(dow) % 7]}`;
        }
      }

      return description || 'Custom schedule';
    }

    function validateCronExpression(cron) {
      const parts = cron.trim().split(/\s+/);
      if (parts.length !== 5) return false;

      const [minute, hour, day, month, dow] = parts;

      // Validate minute (0-59)
      if (!isValidCronField(minute, 0, 59)) return false;
      
      // Validate hour (0-23)
      if (!isValidCronField(hour, 0, 23)) return false;
      
      // Validate day of month (1-31)
      if (!isValidCronField(day, 1, 31)) return false;
      
      // Validate month (1-12)
      if (!isValidCronField(month, 1, 12)) return false;
      
      // Validate day of week (0-7, where 0 and 7 are Sunday)
      if (!isValidCronField(dow, 0, 7)) return false;

      return true;
    }

    function isValidCronField(field, min, max) {
      if (field === '*' || field === '?' || field === 'L') return true;

      // Handle step values (*/n)
      if (field.startsWith('*/')) {
        const step = parseInt(field.slice(2));
        return !isNaN(step) && step >= 1 && step <= max;
      }

      // Handle ranges (n-m)
      if (field.includes('-')) {
        const parts = field.split('-');
        if (parts.length !== 2) return false;
        const [start, end] = parts.map(n => parseInt(n));
        return !isNaN(start) && !isNaN(end) && start >= min && end <= max && start <= end;
      }

      // Handle lists (n,m,o)
      if (field.includes(',')) {
        const values = field.split(',');
        return values.every(v => {
          const num = parseInt(v);
          return !isNaN(num) && num >= min && num <= max;
        });
      }

      // Handle single values
      const value = parseInt(field);
      return !isNaN(value) && value >= min && value <= max;
    }

    function getNextRuns(cron, count = 5) {
      if (!validateCronExpression(cron)) return [];

      const runs = [];
      const now = new Date();
      const parts = cron.split(' ');
      const [minuteField, hourField, dayField, monthField, dowField] = parts;

      // Start from next minute
      let current = new Date(now);
      current.setSeconds(0);
      current.setMilliseconds(0);
      current.setMinutes(current.getMinutes() + 1);

      let iterations = 0;
      const maxIterations = 60 * 24 * 365; // Check up to 1 year

      while (runs.length < count && iterations < maxIterations) {
        iterations++;

        if (matchesCronField(current.getMinutes(), minuteField, 0, 59) &&
            matchesCronField(current.getHours(), hourField, 0, 23) &&
            matchesCronField(current.getDate(), dayField, 1, 31) &&
            matchesCronField(current.getMonth() + 1, monthField, 1, 12) &&
            matchesCronField(current.getDay(), dowField, 0, 7)) {
          runs.push(new Date(current));
        }

        // Increment by 1 minute
        current.setMinutes(current.getMinutes() + 1);
      }

      return runs;
    }

    function matchesCronField(value, field, min, max) {
      if (field === '*' || field === '?') return true;

      // Handle step values
      if (field.startsWith('*/')) {
        const step = parseInt(field.slice(2));
        return value % step === 0;
      }

      // Handle ranges
      if (field.includes('-')) {
        const [start, end] = field.split('-').map(n => parseInt(n));
        return value >= start && value <= end;
      }

      // Handle lists
      if (field.includes(',')) {
        const values = field.split(',').map(n => parseInt(n));
        return values.includes(value) || (value === 7 && values.includes(0)); // Sunday can be 0 or 7
      }

      // Handle single values
      const singleValue = parseInt(field);
      return value === singleValue || (value === 7 && singleValue === 0); // Sunday can be 0 or 7
    }

    function formatDate(date) {
      return date.toLocaleString('en-US', {
        weekday: 'short',
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }

    function getRelativeTime(date) {
      const now = new Date();
      const diff = date.getTime() - now.getTime();
      const minutes = Math.floor(diff / 60000);
      const hours = Math.floor(minutes / 60);
      const days = Math.floor(hours / 24);

      if (minutes < 60) {
        return `in ${minutes} minute${minutes !== 1 ? 's' : ''}`;
      } else if (hours < 24) {
        return `in ${hours} hour${hours !== 1 ? 's' : ''}`;
      } else {
        return `in ${days} day${days !== 1 ? 's' : ''}`;
      }
    }

    function updateDisplay() {
      const cron = cronExpression.value.trim();
      currentCron = cron;

      // Update description
      expressionDescription.textContent = parseCronExpression(cron);

      // Validate and style input
      if (validateCronExpression(cron)) {
        cronExpression.classList.remove('error');
        cronExpression.classList.add('valid');
        
        // Update next runs
        const runs = getNextRuns(cron);
        nextRunsList.innerHTML = '';
        
        if (runs.length > 0) {
          runs.forEach(run => {
            const runItem = document.createElement('div');
            runItem.className = 'run-item';
            runItem.innerHTML = `
              <span class="run-date">${formatDate(run)}</span>
              <span class="run-relative">${getRelativeTime(run)}</span>
            `;
            nextRunsList.appendChild(runItem);
          });
        } else {
          nextRunsList.innerHTML = '<div class="run-item">No upcoming runs found</div>';
        }
      } else {
        cronExpression.classList.remove('valid');
        cronExpression.classList.add('error');
        expressionDescription.textContent = 'Invalid cron expression';
        nextRunsList.innerHTML = '<div class="run-item">Please enter a valid cron expression</div>';
      }
    }

    function buildCronFromForm() {
      const fields = ['minute', 'hour', 'day', 'month', 'dow'];
      const cronParts = ['*', '*', '*', '*', '*']; // Default all fields to *

      // Minute field
      const minuteRadio = document.querySelector('input[name="minute"]:checked');
      if (minuteRadio) {
        if (minuteRadio.value === 'specific') {
          const minuteInput = document.getElementById('minute-specific');
          if (minuteInput && minuteInput.value) {
            cronParts[0] = minuteInput.value;
          }
        } else if (minuteRadio.value === 'interval') {
          const intervalInput = document.getElementById('minute-interval');
          if (intervalInput && intervalInput.value) {
            cronParts[0] = `*/${intervalInput.value}`;
          }
        } else {
          cronParts[0] = minuteRadio.value;
        }
      }

      // Hour field
      const hourRadio = document.querySelector('input[name="hour"]:checked');
      if (hourRadio) {
        if (hourRadio.value === 'specific') {
          const hourInput = document.getElementById('hour-specific');
          if (hourInput && hourInput.value) {
            cronParts[1] = hourInput.value;
          }
        } else if (hourRadio.value === 'range') {
          const startInput = document.getElementById('hour-range-start');
          const endInput = document.getElementById('hour-range-end');
          if (startInput && endInput && startInput.value && endInput.value) {
            cronParts[1] = `${startInput.value}-${endInput.value}`;
          }
        } else {
          cronParts[1] = hourRadio.value;
        }
      }

      // Day of week field
      const dowRadio = document.querySelector('input[name="dow"]:checked');
      if (dowRadio) {
        if (dowRadio.value === 'weekdays') {
          cronParts[4] = '1-5';
        } else if (dowRadio.value === 'weekends') {
          cronParts[4] = '0,6';
        } else {
          cronParts[4] = dowRadio.value;
        }
      }

      return cronParts.join(' ');
    }

    // Event listeners
    cronExpression?.addEventListener('input', updateDisplay);

    // Preset buttons
    document.querySelectorAll('.preset-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const cron = btn.getAttribute('data-cron') || '';
        cronExpression.value = cron;
        updateDisplay();
      });
    });

    // Form field handlers
    document.querySelectorAll('input[type="radio"]').forEach(radio => {
      radio.addEventListener('change', (e) => {
        const target = e.target;
        const fieldName = target.name;
        const value = target.value;
        
        // Enable/disable related inputs
        const specificInput = document.getElementById(`${fieldName}-specific`);
        const intervalInput = document.getElementById(`${fieldName}-interval`);
        const rangeStartInput = document.getElementById(`${fieldName}-range-start`);
        const rangeEndInput = document.getElementById(`${fieldName}-range-end`);

        // Disable all inputs first
        [specificInput, intervalInput, rangeStartInput, rangeEndInput].forEach(input => {
          if (input) {
            input.disabled = true;
          }
        });

        // Enable relevant inputs
        if (value === 'specific' && specificInput) {
          specificInput.disabled = false;
        } else if (value === 'interval' && intervalInput) {
          intervalInput.disabled = false;
        } else if (value === 'range' && rangeStartInput && rangeEndInput) {
          rangeStartInput.disabled = false;
          rangeEndInput.disabled = false;
        }

        // Update cron expression
        const newCron = buildCronFromForm();
        cronExpression.value = newCron;
        updateDisplay();
      });
    });

    // Form input handlers
    document.querySelectorAll('.specific-input, .interval-input, .range-input').forEach(input => {
      input.addEventListener('input', () => {
        const newCron = buildCronFromForm();
        cronExpression.value = newCron;
        updateDisplay();
      });
    });

    // Copy button
    document.getElementById('copy-expression')?.addEventListener('click', async () => {
      try {
        await navigator.clipboard.writeText(cronExpression.value);
        const btn = document.getElementById('copy-expression');
        const originalText = btn.textContent;
        btn.textContent = '‚úì Copied!';
        setTimeout(() => {
          btn.textContent = originalText;
        }, 2000);
      } catch (err) {
        console.error('Failed to copy:', err);
      }
    });

    // Validate button
    document.getElementById('validate-expression')?.addEventListener('click', () => {
      updateDisplay();
      const isValid = validateCronExpression(cronExpression.value);
      if (isValid) {
        const btn = document.getElementById('validate-expression');
        const originalText = btn.textContent;
        btn.textContent = '‚úì Valid!';
        setTimeout(() => {
          btn.textContent = originalText;
        }, 2000);
      }
    });

    // Initialize
    updateDisplay();
  })();
</script>