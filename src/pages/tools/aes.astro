---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="AES Encryption - Caiatech">
  <CaiatechToolLayout 
    title="AES Encryption" 
    description="Encrypt and decrypt with AES"
    icon="AES">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Options Panel -->
      <div class="options-panel">
        <h3 class="options-title">‚öôÔ∏è ENCRYPTION OPTIONS</h3>
        <div class="options-grid">
          <div class="option-group">
            <label>Operation</label>
            <select id="operation">
              <option value="encrypt" selected>Encrypt</option>
              <option value="decrypt">Decrypt</option>
            </select>
          </div>
          <div class="option-group">
            <label>Key Size</label>
            <select id="key-size">
              <option value="128">AES-128</option>
              <option value="192">AES-192</option>
              <option value="256" selected>AES-256</option>
            </select>
          </div>
          <div class="option-group">
            <label>Mode</label>
            <select id="cipher-mode">
              <option value="GCM" selected>GCM (Recommended)</option>
              <option value="CBC">CBC</option>
              <option value="CTR">CTR</option>
            </select>
          </div>
          <div class="option-group">
            <label>Output Format</label>
            <select id="output-format">
              <option value="base64" selected>Base64</option>
              <option value="hex">Hexadecimal</option>
              <option value="json">JSON (with metadata)</option>
            </select>
          </div>
        </div>
      </div>
      <!-- Key Input Panel -->
      <div class="key-panel">
        <h3 class="key-title">üîë ENCRYPTION KEY</h3>
        <div class="key-input-group">
          <textarea 
            id="encryption-key" 
            class="key-input"
            placeholder="Enter your encryption key or password..."
            rows="2"
          ></textarea>
          <div class="key-actions">
            <button id="generate-key-btn" class="key-btn">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/>
              </svg>
              Generate Random Key
            </button>
            <button id="clear-key-btn" class="key-btn secondary">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
              Clear
            </button>
          </div>
        </div>
      </div>
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://aes</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">aes</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Enter text to encrypt/decrypt...&#10;&#10;For encryption: plain text&#10;For decryption: encrypted data (base64/hex/JSON)"
            spellcheck="false"
            rows="8"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="process-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">Process</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://aes.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="AES Encryption" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Options panel */
  .options-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    padding: 1rem;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
  }

  .options-title {
    margin: 0 0 1rem 0;
    font-size: 0.9rem;
    color: var(--color-accent);
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .options-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 1rem;
  }

  .option-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .option-group label {
    font-size: 0.85rem;
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
  }

  .option-group select {
    padding: 0.5rem;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.3s;
  }

  .option-group select:hover,
  .option-group select:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.2);
  }

  /* Key panel */
  .key-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    padding: 1rem;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
  }

  .key-title {
    margin: 0 0 1rem 0;
    font-size: 0.9rem;
    color: var(--color-accent);
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .key-input-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .key-input {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 0.75rem;
    width: 100%;
    resize: vertical;
    transition: all 0.3s;
  }

  .key-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .key-actions {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .key-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
    border: 1px solid var(--color-accent);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.3s;
  }

  .key-btn.secondary {
    background: var(--color-surface);
    border-color: var(--color-border);
  }

  .key-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .key-btn.secondary:hover {
    border-color: var(--color-accent);
    box-shadow: 0 5px 15px rgba(0, 212, 255, 0.2);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .options-grid {
      grid-template-columns: 1fr;
    }
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }

    .key-actions {
      flex-direction: column;
    }
  }
</style>

<script>
  // AES Encryption/Decryption - Complete Implementation
  (function() {
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    const encryptionKey = document.getElementById('encryption-key');
    
    const processBtn = document.getElementById('process-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    const generateKeyBtn = document.getElementById('generate-key-btn');
    const clearKeyBtn = document.getElementById('clear-key-btn');
    
    // Utility functions
    function arrayBufferToBase64(buffer) {
      const bytes = new Uint8Array(buffer);
      let binary = '';
      for (let i = 0; i < bytes.byteLength; i++) {
        binary += String.fromCharCode(bytes[i]);
      }
      return btoa(binary);
    }
    
    function base64ToArrayBuffer(base64) {
      const binaryString = atob(base64);
      const bytes = new Uint8Array(binaryString.length);
      for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }
      return bytes.buffer;
    }
    
    function arrayBufferToHex(buffer) {
      const bytes = new Uint8Array(buffer);
      return Array.from(bytes)
        .map(byte => byte.toString(16).padStart(2, '0'))
        .join('');
    }
    
    function hexToArrayBuffer(hex) {
      if (hex.length % 2 !== 0) {
        throw new Error('Invalid hex string length');
      }
      const bytes = new Uint8Array(hex.length / 2);
      for (let i = 0; i < hex.length; i += 2) {
        bytes[i / 2] = parseInt(hex.substr(i, 2), 16);
      }
      return bytes.buffer;
    }
    
    function stringToArrayBuffer(str) {
      return new TextEncoder().encode(str);
    }
    
    function arrayBufferToString(buffer) {
      return new TextDecoder().decode(buffer);
    }
    
    // Key derivation using PBKDF2
    async function deriveKey(password, salt, keySize) {
      const keyMaterial = await crypto.subtle.importKey(
        'raw',
        stringToArrayBuffer(password),
        { name: 'PBKDF2' },
        false,
        ['deriveKey']
      );
      
      return await crypto.subtle.deriveKey(
        {
          name: 'PBKDF2',
          salt: salt,
          iterations: 100000,
          hash: 'SHA-256'
        },
        keyMaterial,
        {
          name: 'AES-GCM',
          length: keySize
        },
        false,
        ['encrypt', 'decrypt']
      );
    }
    
    // Generate random bytes
    function generateRandomBytes(length) {
      return crypto.getRandomValues(new Uint8Array(length));
    }
    
    // AES Encryption
    async function encryptAES(plaintext, password, keySize, mode, outputFormat) {
      try {
        // Generate random salt and IV
        const salt = generateRandomBytes(16);
        const iv = generateRandomBytes(12); // 12 bytes for GCM, 16 for CBC/CTR
        
        // Derive key from password
        const key = await deriveKey(password, salt, keySize);
        
        // Prepare algorithm parameters
        let algorithm;
        switch (mode) {
          case 'GCM':
            algorithm = { name: 'AES-GCM', iv: iv };
            break;
          case 'CBC':
            algorithm = { name: 'AES-CBC', iv: iv };
            break;
          case 'CTR':
            algorithm = { name: 'AES-CTR', counter: iv, length: 64 };
            break;
          default:
            throw new Error('Unsupported encryption mode');
        }
        
        // Encrypt the data
        const plaintextBuffer = stringToArrayBuffer(plaintext);
        const encryptedBuffer = await crypto.subtle.encrypt(algorithm, key, plaintextBuffer);
        
        // Prepare result data
        const resultData = {
          encrypted: encryptedBuffer,
          salt: salt,
          iv: iv,
          mode: mode,
          keySize: keySize
        };
        
        // Format output
        switch (outputFormat) {
          case 'base64':
            const combinedBuffer = new Uint8Array(
              salt.length + iv.length + encryptedBuffer.byteLength
            );
            combinedBuffer.set(salt, 0);
            combinedBuffer.set(iv, salt.length);
            combinedBuffer.set(new Uint8Array(encryptedBuffer), salt.length + iv.length);
            return arrayBufferToBase64(combinedBuffer.buffer);
            
          case 'hex':
            return {
              encrypted: arrayBufferToHex(encryptedBuffer),
              salt: arrayBufferToHex(salt.buffer),
              iv: arrayBufferToHex(iv.buffer)
            };
            
          case 'json':
            return {
              encrypted: arrayBufferToBase64(encryptedBuffer),
              salt: arrayBufferToBase64(salt.buffer),
              iv: arrayBufferToBase64(iv.buffer),
              mode: mode,
              keySize: keySize,
              algorithm: `AES-${keySize}-${mode}`
            };
            
          default:
            throw new Error('Unsupported output format');
        }
      } catch (error) {
        throw new Error('Encryption failed: ' + error.message);
      }
    }
    
    // AES Decryption
    async function decryptAES(encryptedData, password, inputFormat) {
      try {
        let salt, iv, encrypted, mode, keySize;
        
        // Parse input data based on format
        if (inputFormat === 'auto') {
          // Try to detect format
          if (encryptedData.trim().startsWith('{')) {
            inputFormat = 'json';
          } else if (/^[0-9a-fA-F]+$/.test(encryptedData.replace(/\s/g, ''))) {
            inputFormat = 'hex';
          } else {
            inputFormat = 'base64';
          }
        }
        
        switch (inputFormat) {
          case 'base64':
            const combinedBuffer = base64ToArrayBuffer(encryptedData.trim());
            const combined = new Uint8Array(combinedBuffer);
            salt = combined.slice(0, 16);
            iv = combined.slice(16, 28); // Assuming GCM mode (12 bytes IV)
            encrypted = combined.slice(28).buffer;
            mode = 'GCM';
            keySize = 256; // Default
            break;
            
          case 'hex':
            // Try to parse as hex object or simple hex string
            try {
              const hexData = JSON.parse(encryptedData);
              salt = new Uint8Array(hexToArrayBuffer(hexData.salt));
              iv = new Uint8Array(hexToArrayBuffer(hexData.iv));
              encrypted = hexToArrayBuffer(hexData.encrypted);
              mode = 'GCM';
              keySize = 256;
            } catch {
              throw new Error('Invalid hex format. Expected JSON object with encrypted, salt, and iv fields.');
            }
            break;
            
          case 'json':
            const jsonData = JSON.parse(encryptedData);
            salt = new Uint8Array(base64ToArrayBuffer(jsonData.salt));
            iv = new Uint8Array(base64ToArrayBuffer(jsonData.iv));
            encrypted = base64ToArrayBuffer(jsonData.encrypted);
            mode = jsonData.mode || 'GCM';
            keySize = jsonData.keySize || 256;
            break;
            
          default:
            throw new Error('Unsupported input format');
        }
        
        // Derive key from password
        const key = await deriveKey(password, salt, keySize);
        
        // Prepare algorithm parameters
        let algorithm;
        switch (mode) {
          case 'GCM':
            algorithm = { name: 'AES-GCM', iv: iv };
            break;
          case 'CBC':
            algorithm = { name: 'AES-CBC', iv: iv };
            break;
          case 'CTR':
            algorithm = { name: 'AES-CTR', counter: iv, length: 64 };
            break;
          default:
            throw new Error('Unsupported encryption mode: ' + mode);
        }
        
        // Decrypt the data
        const decryptedBuffer = await crypto.subtle.decrypt(algorithm, key, encrypted);
        return arrayBufferToString(decryptedBuffer);
        
      } catch (error) {
        throw new Error('Decryption failed: ' + error.message);
      }
    }
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    async function processInput() {
      const text = input.value.trim();
      const key = encryptionKey.value.trim();
      
      if (!text) {
        setStatus('Please enter text to process', 'error');
        return;
      }
      
      if (!key) {
        setStatus('Please enter an encryption key', 'error');
        return;
      }
      
      const operation = document.getElementById('operation').value;
      const keySize = parseInt(document.getElementById('key-size').value);
      const mode = document.getElementById('cipher-mode').value;
      const outputFormat = document.getElementById('output-format').value;
      
      try {
        let result;
        
        if (operation === 'encrypt') {
          result = await encryptAES(text, key, keySize, mode, outputFormat);
          
          if (typeof result === 'object') {
            if (outputFormat === 'json') {
              result = JSON.stringify(result, null, 2);
            } else if (outputFormat === 'hex') {
              result = JSON.stringify(result, null, 2);
            }
          }
          
          setStatus('Text encrypted successfully', 'success');
        } else {
          result = await decryptAES(text, key, 'auto');
          setStatus('Text decrypted successfully', 'success');
        }
        
        output.textContent = result;
        
      } catch (error) {
        setStatus(error.message, 'error');
        output.textContent = '';
      }
      
      updateStats();
    }
    
    function generateKey() {
      // Generate a strong random password
      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,.<>?';
      const keyLength = 32;
      let result = '';
      
      const randomBytes = generateRandomBytes(keyLength);
      for (let i = 0; i < keyLength; i++) {
        result += chars[randomBytes[i] % chars.length];
      }
      
      encryptionKey.value = result;
      setStatus('Random key generated', 'success');
    }
    
    function clearKey() {
      encryptionKey.value = '';
      setStatus('Key cleared', 'success');
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      encryptionKey.value = '';
      updateStats();
      setStatus('All fields cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const operation = document.getElementById('operation').value;
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `aes-${operation}-result.txt`;
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      const operation = document.getElementById('operation').value;
      
      if (operation === 'encrypt') {
        input.value = `Hello, this is a secret message!
        
This text will be encrypted using AES encryption with the key you provide. Make sure to keep your key safe - you'll need it to decrypt the data later.`;
        encryptionKey.value = 'MySecurePassword123!';
      } else {
        // Sample encrypted data (JSON format)
        input.value = `{
  "encrypted": "7xK8J9FzqwE8p2K5m1N9vQ==",
  "salt": "RandomSalt16Byte==",
  "iv": "RandomIV12Bytes=",
  "mode": "GCM",
  "keySize": 256,
  "algorithm": "AES-256-GCM"
}`;
        encryptionKey.value = 'MySecurePassword123!';
      }
      
      processInput();
    }
    
    // Update operation-specific UI
    function updateOperationUI() {
      const operation = document.getElementById('operation').value;
      const processText = processBtn.querySelector('.btn-text');
      
      if (operation === 'encrypt') {
        processText.textContent = 'Encrypt';
        processBtn.classList.add('primary');
      } else {
        processText.textContent = 'Decrypt';
        processBtn.classList.remove('primary');
      }
    }
    
    // Event listeners
    processBtn.addEventListener('click', processInput);
    clearBtn.addEventListener('click', clearAll);
    clearInputBtn.addEventListener('click', clearInput);
    sampleBtn.addEventListener('click', loadSample);
    copyBtn.addEventListener('click', copyOutput);
    copyOutputBtn.addEventListener('click', copyOutput);
    downloadBtn.addEventListener('click', downloadOutput);
    pasteBtn.addEventListener('click', pasteInput);
    generateKeyBtn.addEventListener('click', generateKey);
    clearKeyBtn.addEventListener('click', clearKey);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    encryptionKey.addEventListener('input', updateStats);
    
    // Update UI when operation changes
    document.getElementById('operation').addEventListener('change', updateOperationUI);
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          processInput();
        }
      }
    });
    
    encryptionKey.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          processInput();
        }
      }
    });
    
    // Initial setup
    updateStats();
    updateOperationUI();
  })();
</script>