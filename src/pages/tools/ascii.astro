---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="ASCII Art Generator - Caiatech">
  <CaiatechToolLayout 
    title="ASCII Art Generator" 
    description="Convert text to ASCII art"
    icon="ASCII">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Options Panel -->
      <div class="options-panel">
        <h3 class="options-title">⚙️ ASCII OPTIONS</h3>
        <div class="options-grid">
          <div class="option-group">
            <label>Operation</label>
            <select id="operation">
              <option value="text-to-ascii" selected>Text to ASCII Values</option>
              <option value="ascii-to-text">ASCII Values to Text</option>
              <option value="char-info">Character Information</option>
              <option value="ascii-table">ASCII Table</option>
            </select>
          </div>
          <div class="option-group">
            <label>Output Format</label>
            <select id="output-format">
              <option value="decimal" selected>Decimal</option>
              <option value="hexadecimal">Hexadecimal</option>
              <option value="octal">Octal</option>
              <option value="binary">Binary</option>
            </select>
          </div>
          <div class="option-group checkbox-group">
            <label class="checkbox-option">
              <input type="checkbox" id="show-headers" checked>
              <span class="checkbox-custom"></span>
              <span>Show headers</span>
            </label>
            <label class="checkbox-option">
              <input type="checkbox" id="include-spaces" checked>
              <span class="checkbox-custom"></span>
              <span>Include spaces</span>
            </label>
          </div>
        </div>
      </div>
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://ascii</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">ascii</span>
            <span class="prompt-arrow">→</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Enter text or ASCII values...&#10;&#10;Text to ASCII: Hello World&#10;ASCII to Text: 72 101 108 108 111 32 87 111 114 108 100&#10;Character Info: A&#10;ASCII Table: (no input needed)"
            spellcheck="false"
            rows="6"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="process-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">Process</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">•</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://ascii.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="ASCII Art Generator" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Options panel */
  .options-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    padding: 1rem;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
  }

  .options-title {
    margin: 0 0 1rem 0;
    font-size: 0.9rem;
    color: var(--color-accent);
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .options-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .option-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .option-group label {
    font-size: 0.85rem;
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
  }

  .option-group select {
    padding: 0.5rem;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.3s;
  }

  .option-group select:hover,
  .option-group select:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.2);
  }

  .checkbox-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .checkbox-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .checkbox-option input[type="checkbox"] {
    display: none;
  }

  .checkbox-custom {
    width: 16px;
    height: 16px;
    border: 2px solid rgba(0, 212, 255, 0.3);
    border-radius: 3px;
    position: relative;
    transition: all 0.3s;
    flex-shrink: 0;
  }

  .checkbox-option input[type="checkbox"]:checked + .checkbox-custom {
    background: var(--color-accent);
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
  }

  .checkbox-option input[type="checkbox"]:checked + .checkbox-custom::after {
    content: '✓';
    position: absolute;
    top: -2px;
    left: 2px;
    color: var(--color-background);
    font-size: 12px;
    font-weight: bold;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .options-grid {
      grid-template-columns: 1fr;
    }
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // ASCII Tools - Complete Implementation
  (function() {
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const processBtn = document.getElementById('process-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    // ASCII conversion functions
    function textToAscii(text, format = 'decimal', includeSpaces = true, showHeaders = true) {
      if (!text) return '';
      
      let result = '';
      
      if (showHeaders) {
        result += `ASCII CONVERSION RESULTS\n`;
        result += `========================\n\n`;
        result += `Input: "${text}"\n`;
        result += `Length: ${text.length} characters\n`;
        result += `Format: ${format.charAt(0).toUpperCase() + format.slice(1)}\n\n`;
      }
      
      const characters = [];
      const values = [];
      
      for (let i = 0; i < text.length; i++) {
        const char = text[i];
        const charCode = text.charCodeAt(i);
        
        if (!includeSpaces && char === ' ') {
          continue;
        }
        
        characters.push(char === ' ' ? 'SPACE' : char);
        
        switch (format) {
          case 'decimal':
            values.push(charCode.toString());
            break;
          case 'hexadecimal':
            values.push('0x' + charCode.toString(16).toUpperCase().padStart(2, '0'));
            break;
          case 'octal':
            values.push('0' + charCode.toString(8));
            break;
          case 'binary':
            values.push('0b' + charCode.toString(2).padStart(8, '0'));
            break;
        }
      }
      
      // Create table
      if (showHeaders) {
        result += `Char    | ${format.charAt(0).toUpperCase() + format.slice(1)}\n`;
        result += `--------|-----------\n`;
      }
      
      for (let i = 0; i < characters.length; i++) {
        if (showHeaders) {
          result += `${characters[i].padEnd(7)} | ${values[i]}\n`;
        } else {
          result += values[i];
          if (i < values.length - 1) result += ' ';
        }
      }
      
      return result;
    }
    
    function asciiToText(asciiValues) {
      if (!asciiValues) return '';
      
      // Parse different formats
      const values = asciiValues.trim()
        .replace(/0x/g, '') // Remove hex prefix
        .replace(/0b/g, '') // Remove binary prefix
        .replace(/^0+/g, '0') // Handle octal
        .split(/[\s,]+/) // Split by spaces or commas
        .filter(val => val.length > 0);
      
      let result = '';
      let format = 'decimal';
      
      // Detect format
      if (asciiValues.includes('0x')) {
        format = 'hexadecimal';
      } else if (asciiValues.includes('0b')) {
        format = 'binary';
      } else if (values.some(val => val.startsWith('0') && val.length > 1)) {
        format = 'octal';
      }
      
      const showHeaders = document.getElementById('show-headers').checked;
      
      if (showHeaders) {
        result += `ASCII TO TEXT CONVERSION\n`;
        result += `========================\n\n`;
        result += `Input format: ${format.charAt(0).toUpperCase() + format.slice(1)}\n`;
        result += `Values: ${values.length}\n\n`;
      }
      
      let text = '';
      const invalidValues = [];
      
      for (const value of values) {
        try {
          let charCode;
          
          switch (format) {
            case 'hexadecimal':
              charCode = parseInt(value, 16);
              break;
            case 'binary':
              charCode = parseInt(value, 2);
              break;
            case 'octal':
              charCode = parseInt(value, 8);
              break;
            case 'decimal':
            default:
              charCode = parseInt(value, 10);
              break;
          }
          
          if (isNaN(charCode) || charCode < 0 || charCode > 127) {
            invalidValues.push(value);
          } else {
            text += String.fromCharCode(charCode);
          }
        } catch (error) {
          invalidValues.push(value);
        }
      }
      
      if (showHeaders) {
        result += `Converted text: "${text}"\n`;
        if (invalidValues.length > 0) {
          result += `\nInvalid values: ${invalidValues.join(', ')}\n`;
        }
      } else {
        result = text;
      }
      
      return result;
    }
    
    function getCharacterInfo(char) {
      if (!char || char.length === 0) return 'No character provided';
      
      // Use first character if multiple provided
      const c = char[0];
      const charCode = c.charCodeAt(0);
      
      let result = `CHARACTER INFORMATION\n`;
      result += `=====================\n\n`;
      result += `Character: "${c}"\n`;
      result += `Description: ${getCharacterDescription(c, charCode)}\n\n`;
      result += `ASCII Values:\n`;
      result += `  Decimal:     ${charCode}\n`;
      result += `  Hexadecimal: 0x${charCode.toString(16).toUpperCase().padStart(2, '0')}\n`;
      result += `  Octal:       0${charCode.toString(8)}\n`;
      result += `  Binary:      0b${charCode.toString(2).padStart(8, '0')}\n\n`;
      result += `Categories:\n`;
      result += `  Printable:   ${isPrintable(charCode) ? 'Yes' : 'No'}\n`;
      result += `  Control:     ${isControl(charCode) ? 'Yes' : 'No'}\n`;
      result += `  Digit:       ${isDigit(c) ? 'Yes' : 'No'}\n`;
      result += `  Letter:      ${isLetter(c) ? 'Yes' : 'No'}\n`;
      result += `  Uppercase:   ${isUppercase(c) ? 'Yes' : 'No'}\n`;
      result += `  Lowercase:   ${isLowercase(c) ? 'Yes' : 'No'}\n`;
      result += `  Whitespace:  ${isWhitespace(c) ? 'Yes' : 'No'}\n`;
      result += `  Punctuation: ${isPunctuation(c) ? 'Yes' : 'No'}\n`;
      
      return result;
    }
    
    function getCharacterDescription(char, charCode) {
      if (charCode >= 32 && charCode <= 126) {
        return 'Printable ASCII character';
      } else if (charCode < 32) {
        const controlNames = {
          0: 'NULL (NUL)', 1: 'Start of Heading (SOH)', 2: 'Start of Text (STX)',
          3: 'End of Text (ETX)', 4: 'End of Transmission (EOT)', 5: 'Enquiry (ENQ)',
          6: 'Acknowledgment (ACK)', 7: 'Bell (BEL)', 8: 'Backspace (BS)',
          9: 'Horizontal Tab (HT)', 10: 'Line Feed (LF)', 11: 'Vertical Tab (VT)',
          12: 'Form Feed (FF)', 13: 'Carriage Return (CR)', 14: 'Shift Out (SO)',
          15: 'Shift In (SI)', 16: 'Data Link Escape (DLE)', 17: 'Device Control 1 (DC1)',
          18: 'Device Control 2 (DC2)', 19: 'Device Control 3 (DC3)', 20: 'Device Control 4 (DC4)',
          21: 'Negative Acknowledgment (NAK)', 22: 'Synchronous Idle (SYN)', 23: 'End of Transmission Block (ETB)',
          24: 'Cancel (CAN)', 25: 'End of Medium (EM)', 26: 'Substitute (SUB)',
          27: 'Escape (ESC)', 28: 'File Separator (FS)', 29: 'Group Separator (GS)',
          30: 'Record Separator (RS)', 31: 'Unit Separator (US)'
        };
        return controlNames[charCode] || `Control character (${charCode})`;
      } else if (charCode === 127) {
        return 'Delete (DEL)';
      } else {
        return 'Extended ASCII character';
      }
    }
    
    function generateAsciiTable() {
      let result = `ASCII CHARACTER TABLE\n`;
      result += `=====================\n\n`;
      result += `Dec | Hex | Oct | Bin      | Char | Description\n`;
      result += `----|-----|-----|----------|------|-----------\n`;
      
      for (let i = 0; i <= 127; i++) {
        const dec = i.toString().padStart(3, ' ');
        const hex = i.toString(16).toUpperCase().padStart(2, '0');
        const oct = i.toString(8).padStart(3, '0');
        const bin = i.toString(2).padStart(8, '0');
        
        let char;
        let description;
        
        if (i < 32) {
          char = '^' + String.fromCharCode(i + 64);
          description = getCharacterDescription('', i).split(' (')[0];
        } else if (i === 32) {
          char = 'SP';
          description = 'Space';
        } else if (i === 127) {
          char = 'DEL';
          description = 'Delete';
        } else {
          char = String.fromCharCode(i);
          description = 'Printable';
        }
        
        result += `${dec} |  ${hex} | ${oct} | ${bin} |  ${char.padEnd(2)} | ${description}\n`;
      }
      
      return result;
    }
    
    // Helper functions
    function isPrintable(charCode) {
      return charCode >= 32 && charCode <= 126;
    }
    
    function isControl(charCode) {
      return (charCode >= 0 && charCode <= 31) || charCode === 127;
    }
    
    function isDigit(char) {
      return /\d/.test(char);
    }
    
    function isLetter(char) {
      return /[a-zA-Z]/.test(char);
    }
    
    function isUppercase(char) {
      return /[A-Z]/.test(char);
    }
    
    function isLowercase(char) {
      return /[a-z]/.test(char);
    }
    
    function isWhitespace(char) {
      return /\s/.test(char);
    }
    
    function isPunctuation(char) {
      return /[!"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~]/.test(char);
    }
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function processInput() {
      const operation = document.getElementById('operation').value;
      const outputFormat = document.getElementById('output-format').value;
      const showHeaders = document.getElementById('show-headers').checked;
      const includeSpaces = document.getElementById('include-spaces').checked;
      
      const text = input.value;
      
      if (operation !== 'ascii-table' && !text.trim()) {
        setStatus('Please enter some input', 'error');
        return;
      }
      
      try {
        let result = '';
        
        switch (operation) {
          case 'text-to-ascii':
            result = textToAscii(text, outputFormat, includeSpaces, showHeaders);
            setStatus('Text converted to ASCII values', 'success');
            break;
            
          case 'ascii-to-text':
            result = asciiToText(text);
            setStatus('ASCII values converted to text', 'success');
            break;
            
          case 'char-info':
            if (!text.trim()) {
              setStatus('Please enter a character', 'error');
              return;
            }
            result = getCharacterInfo(text.trim());
            setStatus('Character information generated', 'success');
            break;
            
          case 'ascii-table':
            result = generateAsciiTable();
            setStatus('ASCII table generated', 'success');
            break;
            
          default:
            setStatus('Unknown operation', 'error');
            return;
        }
        
        output.textContent = result;
        
      } catch (error) {
        setStatus('Error: ' + error.message, 'error');
        output.textContent = '';
      }
      
      updateStats();
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const operation = document.getElementById('operation').value;
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `ascii-${operation}-result.txt`;
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      const operation = document.getElementById('operation').value;
      
      switch (operation) {
        case 'text-to-ascii':
          input.value = 'Hello World! 123';
          break;
        case 'ascii-to-text':
          input.value = '72 101 108 108 111 32 87 111 114 108 100 33 32 49 50 51';
          break;
        case 'char-info':
          input.value = 'A';
          break;
        case 'ascii-table':
          input.value = '';
          break;
      }
      
      processInput();
    }
    
    // Update UI based on operation
    function updateOperationUI() {
      const operation = document.getElementById('operation').value;
      const outputFormatGroup = document.getElementById('output-format').closest('.option-group');
      
      if (operation === 'ascii-to-text' || operation === 'ascii-table') {
        outputFormatGroup.style.display = 'none';
      } else {
        outputFormatGroup.style.display = 'flex';
      }
    }
    
    // Event listeners
    processBtn.addEventListener('click', processInput);
    clearBtn.addEventListener('click', clearAll);
    clearInputBtn.addEventListener('click', clearInput);
    sampleBtn.addEventListener('click', loadSample);
    copyBtn.addEventListener('click', copyOutput);
    copyOutputBtn.addEventListener('click', copyOutput);
    downloadBtn.addEventListener('click', downloadOutput);
    pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Update UI when operation changes
    document.getElementById('operation').addEventListener('change', updateOperationUI);
    
    // Auto-process for ASCII table
    document.getElementById('operation').addEventListener('change', function() {
      if (this.value === 'ascii-table') {
        processInput();
      }
    });
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          processInput();
        }
      }
    });
    
    // Initial setup
    updateStats();
    updateOperationUI();
  })();
</script>