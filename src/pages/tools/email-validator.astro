---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Email Validator - Caiatech">
  <CaiatechToolLayout 
    title="Email Validator" 
    description="Validate email addresses"
    icon="@">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Options Panel -->
      <div class="options-panel">
        <h3 class="options-title">⚙️ VALIDATION OPTIONS</h3>
        <div class="options-grid">
          <div class="option-group">
            <label>Validation Mode</label>
            <select id="validation-mode">
              <option value="standard" selected>Standard (RFC 5322)</option>
              <option value="strict">Strict (No special chars)</option>
              <option value="simple">Simple (Basic format)</option>
            </select>
          </div>
          <div class="option-group">
            <label>Output Format</label>
            <select id="output-format">
              <option value="detailed" selected>Detailed Report</option>
              <option value="summary">Summary Only</option>
              <option value="json">JSON Format</option>
            </select>
          </div>
          <div class="option-group checkbox-group">
            <label class="checkbox-option">
              <input type="checkbox" id="check-mx" checked>
              <span class="checkbox-custom"></span>
              <span>Check domain format</span>
            </label>
            <label class="checkbox-option">
              <input type="checkbox" id="allow-unicode">
              <span class="checkbox-custom"></span>
              <span>Allow Unicode characters</span>
            </label>
          </div>
        </div>
      </div>
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://email-validator</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">email-validator</span>
            <span class="prompt-arrow">→</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Enter email addresses to validate (one per line)...&#10;example@domain.com&#10;user.name+tag@example.co.uk&#10;invalid.email@"
            spellcheck="false"
            rows="8"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="process-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">Process</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">•</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://email-validator.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Email Validator" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Options panel */
  .options-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    padding: 1rem;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
  }

  .options-title {
    margin: 0 0 1rem 0;
    font-size: 0.9rem;
    color: var(--color-accent);
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .options-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .option-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .option-group label {
    font-size: 0.85rem;
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
  }

  .option-group select {
    padding: 0.5rem;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.3s;
  }

  .option-group select:hover,
  .option-group select:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.2);
  }

  .checkbox-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .checkbox-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .checkbox-option input[type="checkbox"] {
    display: none;
  }

  .checkbox-custom {
    width: 16px;
    height: 16px;
    border: 2px solid rgba(0, 212, 255, 0.3);
    border-radius: 3px;
    position: relative;
    transition: all 0.3s;
    flex-shrink: 0;
  }

  .checkbox-option input[type="checkbox"]:checked + .checkbox-custom {
    background: var(--color-accent);
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
  }

  .checkbox-option input[type="checkbox"]:checked + .checkbox-custom::after {
    content: '✓';
    position: absolute;
    top: -2px;
    left: 2px;
    color: var(--color-background);
    font-size: 12px;
    font-weight: bold;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .options-grid {
      grid-template-columns: 1fr;
    }
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // Email Validator - Complete Implementation
  (function() {
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const processBtn = document.getElementById('process-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    // Email validation functions
    function validateEmail(email, mode = 'standard', options = {}) {
      const { checkMX = true, allowUnicode = false } = options;
      
      const result = {
        email: email.trim(),
        valid: false,
        errors: [],
        warnings: [],
        parts: {},
        score: 0
      };
      
      // Basic checks
      if (!email || typeof email !== 'string') {
        result.errors.push('Email is required');
        return result;
      }
      
      email = email.trim();
      result.email = email;
      
      // Length check
      if (email.length > 254) {
        result.errors.push('Email exceeds maximum length of 254 characters');
      }
      
      // Must contain @ symbol
      const atCount = (email.match(/@/g) || []).length;
      if (atCount === 0) {
        result.errors.push('Email must contain @ symbol');
        return result;
      } else if (atCount > 1) {
        result.errors.push('Email contains multiple @ symbols');
        return result;
      }
      
      // Split into local and domain parts
      const parts = email.split('@');
      const localPart = parts[0];
      const domainPart = parts[1];
      
      result.parts = {
        local: localPart,
        domain: domainPart
      };
      
      // Validate local part
      const localValidation = validateLocalPart(localPart, mode, { allowUnicode });
      result.errors.push(...localValidation.errors);
      result.warnings.push(...localValidation.warnings);
      
      // Validate domain part
      const domainValidation = validateDomainPart(domainPart, { checkMX, allowUnicode });
      result.errors.push(...domainValidation.errors);
      result.warnings.push(...domainValidation.warnings);
      
      // Calculate validity and score
      result.valid = result.errors.length === 0;
      result.score = calculateScore(result);
      
      return result;
    }
    
    function validateLocalPart(local, mode, options = {}) {
      const result = { errors: [], warnings: [] };
      const { allowUnicode = false } = options;
      
      if (!local) {
        result.errors.push('Local part (before @) cannot be empty');
        return result;
      }
      
      if (local.length > 64) {
        result.errors.push('Local part exceeds maximum length of 64 characters');
      }
      
      // Check for consecutive dots
      if (local.includes('..')) {
        result.errors.push('Local part cannot contain consecutive dots');
      }
      
      // Check start/end with dot
      if (local.startsWith('.') || local.endsWith('.')) {
        result.errors.push('Local part cannot start or end with a dot');
      }
      
      // Mode-specific validation
      switch (mode) {
        case 'simple':
          if (!/^[a-zA-Z0-9._-]+$/.test(local)) {
            result.errors.push('Simple mode: local part can only contain letters, numbers, dots, underscores, and hyphens');
          }
          break;
          
        case 'strict':
          if (!/^[a-zA-Z0-9._-]+$/.test(local)) {
            result.errors.push('Strict mode: local part contains invalid characters');
          }
          if (local.includes('+')) {
            result.errors.push('Strict mode: plus signs not allowed');
          }
          break;
          
        case 'standard':
        default:
          // RFC 5322 compliant validation
          const allowedChars = allowUnicode 
            ? /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-\u0080-\uFFFF]+$/
            : /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+$/;
            
          if (!allowedChars.test(local)) {
            if (allowUnicode) {
              result.errors.push('Local part contains invalid characters (even with Unicode enabled)');
            } else {
              result.errors.push('Local part contains invalid characters');
              result.warnings.push('Try enabling "Allow Unicode characters" if this email uses non-ASCII characters');
            }
          }
          
          // Check for quoted strings (advanced)
          if (local.includes('"')) {
            result.warnings.push('Quoted strings in local part are uncommon and may not be supported by all systems');
          }
          break;
      }
      
      // Common warnings
      if (local.includes('+')) {
        result.warnings.push('Plus addressing (email+tag) may not be supported by all email providers');
      }
      
      if (local.includes('_')) {
        result.warnings.push('Underscores in email addresses may cause compatibility issues');
      }
      
      return result;
    }
    
    function validateDomainPart(domain, options = {}) {
      const result = { errors: [], warnings: [] };
      const { checkMX = true, allowUnicode = false } = options;
      
      if (!domain) {
        result.errors.push('Domain part (after @) cannot be empty');
        return result;
      }
      
      if (domain.length > 253) {
        result.errors.push('Domain exceeds maximum length of 253 characters');
      }
      
      // Check for IP address (not recommended but valid)
      if (domain.startsWith('[') && domain.endsWith(']')) {
        const ip = domain.slice(1, -1);
        if (isValidIP(ip)) {
          result.warnings.push('IP address domains are valid but not recommended');
        } else {
          result.errors.push('Invalid IP address format in domain');
        }
        return result;
      }
      
      // Split into labels
      const labels = domain.split('.');
      
      if (labels.length < 2) {
        result.errors.push('Domain must contain at least one dot (e.g., example.com)');
      }
      
      // Validate each label
      for (let i = 0; i < labels.length; i++) {
        const label = labels[i];
        
        if (label.length === 0) {
          result.errors.push('Domain contains empty label (consecutive dots)');
          continue;
        }
        
        if (label.length > 63) {
          result.errors.push(`Domain label "${label}" exceeds maximum length of 63 characters`);
        }
        
        // Check label format
        const labelRegex = allowUnicode
          ? /^[a-zA-Z0-9\u0080-\uFFFF]([a-zA-Z0-9\u0080-\uFFFF-]{0,61}[a-zA-Z0-9\u0080-\uFFFF])?$/
          : /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/;
          
        if (!labelRegex.test(label)) {
          if (allowUnicode) {
            result.errors.push(`Domain label "${label}" contains invalid characters`);
          } else {
            result.errors.push(`Domain label "${label}" contains invalid characters`);
            if (/[\u0080-\uFFFF]/.test(label)) {
              result.warnings.push('Domain contains Unicode characters - try enabling "Allow Unicode characters"');
            }
          }
        }
        
        // Check for leading/trailing hyphens
        if (label.startsWith('-') || label.endsWith('-')) {
          result.errors.push(`Domain label "${label}" cannot start or end with hyphen`);
        }
      }
      
      // Check TLD
      const tld = labels[labels.length - 1];
      if (tld && !/^[a-zA-Z]{2,}$/.test(tld)) {
        if (!/^[a-zA-Z]/.test(tld)) {
          result.errors.push('Top-level domain must start with a letter');
        } else if (tld.length < 2) {
          result.errors.push('Top-level domain must be at least 2 characters');
        } else {
          result.warnings.push('Top-level domain contains non-letter characters');
        }
      }
      
      // Domain format checks if enabled
      if (checkMX && labels.length >= 2) {
        // Basic format validation (we can't actually check MX records in browser)
        if (!tld || tld.length < 2) {
          result.warnings.push('Domain format may not support MX records');
        }
      }
      
      return result;
    }
    
    function isValidIP(ip) {
      // Simple IP validation (IPv4)
      const parts = ip.split('.');
      if (parts.length !== 4) return false;
      
      return parts.every(part => {
        const num = parseInt(part, 10);
        return !isNaN(num) && num >= 0 && num <= 255 && part === num.toString();
      });
    }
    
    function calculateScore(result) {
      let score = 100;
      
      // Deduct points for errors and warnings
      score -= result.errors.length * 25;
      score -= result.warnings.length * 5;
      
      return Math.max(0, score);
    }
    
    function formatResults(results, format) {
      switch (format) {
        case 'summary':
          return formatSummary(results);
        case 'json':
          return JSON.stringify(results, null, 2);
        case 'detailed':
        default:
          return formatDetailed(results);
      }
    }
    
    function formatSummary(results) {
      const total = results.length;
      const valid = results.filter(r => r.valid).length;
      const invalid = total - valid;
      
      let output = `EMAIL VALIDATION SUMMARY\n`;
      output += `========================\n\n`;
      output += `Total emails: ${total}\n`;
      output += `✓ Valid: ${valid}\n`;
      output += `✗ Invalid: ${invalid}\n`;
      output += `Success rate: ${total > 0 ? ((valid / total) * 100).toFixed(1) : 0}%\n\n`;
      
      if (invalid > 0) {
        output += `INVALID EMAILS:\n`;
        results.filter(r => !r.valid).forEach(result => {
          output += `✗ ${result.email}\n`;
          result.errors.forEach(error => {
            output += `  - ${error}\n`;
          });
        });
      }
      
      return output;
    }
    
    function formatDetailed(results) {
      let output = `EMAIL VALIDATION RESULTS\n`;
      output += `========================\n\n`;
      
      results.forEach((result, index) => {
        output += `[${index + 1}] ${result.email}\n`;
        output += `Status: ${result.valid ? '✓ VALID' : '✗ INVALID'}\n`;
        output += `Score: ${result.score}/100\n`;
        
        if (result.parts.local && result.parts.domain) {
          output += `Local: "${result.parts.local}"\n`;
          output += `Domain: "${result.parts.domain}"\n`;
        }
        
        if (result.errors.length > 0) {
          output += `Errors:\n`;
          result.errors.forEach(error => {
            output += `  ✗ ${error}\n`;
          });
        }
        
        if (result.warnings.length > 0) {
          output += `Warnings:\n`;
          result.warnings.forEach(warning => {
            output += `  ⚠ ${warning}\n`;
          });
        }
        
        output += `\n`;
      });
      
      return output;
    }
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function processInput() {
      const text = input.value.trim();
      if (!text) {
        setStatus('Please enter email addresses to validate', 'error');
        return;
      }
      
      // Get validation options
      const validationMode = document.getElementById('validation-mode').value;
      const outputFormat = document.getElementById('output-format').value;
      const checkMX = document.getElementById('check-mx').checked;
      const allowUnicode = document.getElementById('allow-unicode').checked;
      
      // Split emails by lines and filter out empty lines
      const emails = text.split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0);
      
      if (emails.length === 0) {
        setStatus('No valid email addresses found', 'error');
        return;
      }
      
      try {
        // Validate each email
        const results = emails.map(email => 
          validateEmail(email, validationMode, { checkMX, allowUnicode })
        );
        
        // Format output
        const formattedOutput = formatResults(results, outputFormat);
        output.textContent = formattedOutput;
        
        // Update status
        const validCount = results.filter(r => r.valid).length;
        const totalCount = results.length;
        
        if (validCount === totalCount) {
          setStatus(`All ${totalCount} emails are valid!`, 'success');
        } else if (validCount === 0) {
          setStatus(`All ${totalCount} emails are invalid`, 'error');
        } else {
          setStatus(`${validCount}/${totalCount} emails are valid`, 'success');
        }
        
      } catch (error) {
        setStatus('Validation error: ' + error.message, 'error');
        output.textContent = '';
      }
      
      updateStats();
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'email-validation-results.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      input.value = `john.doe@example.com
user+tag@domain.co.uk
test@subdomain.example.org
invalid.email@
another@invalid
valid123@test-domain.com
user_name@site.info
email.with.dots@example.com
toolong.localpart.that.exceeds.sixtyfour.characters.limit@example.com
normal@xn--fsq.com`;
      processInput();
    }
    
    // Event listeners
    processBtn.addEventListener('click', processInput);
    clearBtn.addEventListener('click', clearAll);
    clearInputBtn.addEventListener('click', clearInput);
    sampleBtn.addEventListener('click', loadSample);
    copyBtn.addEventListener('click', copyOutput);
    copyOutputBtn.addEventListener('click', copyOutput);
    downloadBtn.addEventListener('click', downloadOutput);
    pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          processInput();
        }
      }
    });
    
    // Re-validate when options change
    const validationMode = document.getElementById('validation-mode');
    const outputFormat = document.getElementById('output-format');
    const checkMX = document.getElementById('check-mx');
    const allowUnicode = document.getElementById('allow-unicode');
    
    [validationMode, outputFormat, checkMX, allowUnicode].forEach(element => {
      element.addEventListener('change', () => {
        if (input.value.trim()) {
          processInput();
        }
      });
    });
    
    // Initial stats
    updateStats();
  })();
</script>