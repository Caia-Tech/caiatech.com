---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Favicon Generator - Caiatech">
  <CaiatechToolLayout 
    title="Favicon Generator" 
    description="Generate favicons from images"
    icon="üîñ">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://favicon</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">favicon</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <div class="favicon-input-section">
            <div class="input-group">
              <label for="favicon-name">Favicon Name:</label>
              <input 
                id="favicon-name" 
                class="terminal-input text-input"
                type="text"
                placeholder="e.g., MyWebsite"
                spellcheck="false"
              />
            </div>
            
            <div class="input-group">
              <label for="site-url">Website URL:</label>
              <input 
                id="site-url" 
                class="terminal-input text-input"
                type="url"
                placeholder="https://example.com"
                spellcheck="false"
              />
            </div>
            
            <div class="input-group">
              <label for="theme-color">Theme Color:</label>
              <input 
                id="theme-color" 
                class="terminal-input color-input"
                type="color"
                value="#00d4ff"
              />
            </div>
            
            <div class="input-group">
              <label for="favicon-text">Emoji/Text (for simple favicon):</label>
              <input 
                id="favicon-text" 
                class="terminal-input text-input"
                type="text"
                placeholder="üîñ or A or 42"
                maxlength="2"
                spellcheck="false"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="generate-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">üîñ Generate</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="preview-btn" class="cyber-btn secondary">
            <span class="btn-text">üëÅÔ∏è Preview</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy HTML</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://favicon.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Favicon Generator" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .favicon-input-section {
    display: grid;
    gap: 1rem;
  }

  .input-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .input-group label {
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
    font-size: 0.9rem;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .text-input {
    min-height: auto;
    height: auto;
    padding: 0.75rem;
  }

  .color-input {
    min-height: auto;
    height: 50px;
    padding: 0.5rem;
    cursor: pointer;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // Favicon Generator Tool
  (function() {
    const faviconName = document.getElementById('favicon-name');
    const siteUrl = document.getElementById('site-url');
    const themeColor = document.getElementById('theme-color');
    const faviconText = document.getElementById('favicon-text');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const generateBtn = document.getElementById('generate-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const previewBtn = document.getElementById('preview-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    function updateStats() {
      const totalInput = faviconName.value.length + siteUrl.value.length + faviconText.value.length;
      inputLength.textContent = totalInput;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function generateFavicon() {
      const name = faviconName.value.trim() || 'Website';
      const url = siteUrl.value.trim() || 'https://example.com';
      const color = themeColor.value;
      const text = faviconText.value.trim() || 'üîñ';
      
      try {
        const faviconHtml = generateFaviconHtml(name, url, color, text);
        output.textContent = faviconHtml;
        setStatus('Favicon HTML generated!', 'success');
        updateStats();
      } catch (error) {
        setStatus('Generation failed: ' + error.message, 'error');
      }
    }
    
    function generateFaviconHtml(name, url, color, text) {
      let result = '';
      result += '‚îå‚îÄ‚îÄ‚îÄ FAVICON HTML GENERATOR ‚îÄ‚îÄ‚îÄ‚îê\\n';
      result += '‚îÇ                               ‚îÇ\\n';
      result += `‚îÇ Site: ${name.padEnd(23)}‚îÇ\\n`;
      result += `‚îÇ URL: ${url.padEnd(24)}‚îÇ\\n`;
      result += `‚îÇ Theme: ${color.padEnd(21)}‚îÇ\\n`;
      result += `‚îÇ Icon: ${text.padEnd(23)}‚îÇ\\n`;
      result += '‚îÇ                               ‚îÇ\\n';
      result += '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\\n\\n';
      
      result += 'HTML HEAD TAGS:\\n';
      result += '‚îÄ'.repeat(50) + '\\n';
      
      // Basic favicon tags
      result += '<!-- Basic Favicon -->\\n';
      result += '<link rel=\"icon\" type=\"image/x-icon\" href=\"/favicon.ico\">\\n';
      result += '<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\">\\n';
      result += '<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\">\\n\\n';
      
      // Apple touch icons
      result += '<!-- Apple Touch Icons -->\\n';
      result += '<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\">\\n';
      result += '<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/apple-touch-icon-152x152.png\">\\n';
      result += '<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144.png\">\\n';
      result += '<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/apple-touch-icon-120x120.png\">\\n';
      result += '<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/apple-touch-icon-76x76.png\">\\n\\n';
      
      // Android/Chrome
      result += '<!-- Android/Chrome -->\\n';
      result += '<link rel=\"manifest\" href=\"/site.webmanifest\">\\n';
      result += '<meta name=\"theme-color\" content=\"' + color + '\">\\n\\n';
      
      // Microsoft tiles
      result += '<!-- Microsoft Tiles -->\\n';
      result += '<meta name=\"msapplication-TileColor\" content=\"' + color + '\">\\n';
      result += '<meta name=\"msapplication-TileImage\" content=\"/mstile-144x144.png\">\\n';
      result += '<meta name=\"msapplication-config\" content=\"/browserconfig.xml\">\\n\\n';
      
      // Safari
      result += '<!-- Safari -->\\n';
      result += '<link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"' + color + '\">\\n\\n';
      
      // Generate simple data URI favicon using text/emoji
      if (text && text.length <= 2) {
        const svgFavicon = generateSvgFavicon(text, color);
        result += '<!-- Simple SVG Favicon (Data URI) -->\\n';
        result += '<link rel=\"icon\" href=\"' + svgFavicon + '\" type=\"image/svg+xml\">\\n\\n';
      }
      
      // Site manifest
      result += 'SITE.WEBMANIFEST:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      const manifest = generateWebManifest(name, url, color, text);
      result += manifest + '\\n\\n';
      
      // Browserconfig.xml
      result += 'BROWSERCONFIG.XML:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      const browserconfig = generateBrowserConfig(color);
      result += browserconfig + '\\n\\n';
      
      // Instructions
      result += 'SETUP INSTRUCTIONS:\\n';
      result += '‚îÄ'.repeat(40) + '\\n';
      result += '1. Create favicon files in these sizes:\\n';
      result += '   ‚Ä¢ favicon.ico (16x16, 32x32, 48x48)\\n';
      result += '   ‚Ä¢ favicon-16x16.png\\n';
      result += '   ‚Ä¢ favicon-32x32.png\\n';
      result += '   ‚Ä¢ apple-touch-icon.png (180x180)\\n';
      result += '   ‚Ä¢ mstile-144x144.png\\n\\n';
      
      result += '2. Add the HTML tags to your <head> section\\n\\n';
      
      result += '3. Create site.webmanifest and browserconfig.xml\\n\\n';
      
      result += '4. Upload all files to your website root directory\\n\\n';
      
      result += 'RECOMMENDED TOOLS:\\n';
      result += '‚îÄ'.repeat(30) + '\\n';
      result += '‚Ä¢ RealFaviconGenerator.net\\n';
      result += '‚Ä¢ Favicon.io\\n';
      result += '‚Ä¢ Canva (for design)\\n';
      result += '‚Ä¢ GIMP/Photoshop (for editing)\\n';
      
      return result;
    }
    
    function generateSvgFavicon(text, color) {
      const svg = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
  <rect width="32" height="32" fill="${color}" rx="4"/>
  <text x="16" y="22" text-anchor="middle" font-family="Arial, sans-serif" font-size="18" fill="white">${text}</text>
</svg>`;
      return 'data:image/svg+xml;base64,' + btoa(svg);
    }
    
    function generateWebManifest(name, url, color, text) {
      return JSON.stringify({
        name: name,
        short_name: name,
        start_url: url,
        display: 'standalone',
        background_color: color,
        theme_color: color,
        icons: [
          {
            src: '/android-chrome-192x192.png',
            sizes: '192x192',
            type: 'image/png'
          },
          {
            src: '/android-chrome-512x512.png',
            sizes: '512x512',
            type: 'image/png'
          }
        ]
      }, null, 2);
    }
    
    function generateBrowserConfig(color) {
      return `<?xml version="1.0" encoding="utf-8"?>
<browserconfig>
  <msapplication>
    <tile>
      <square150x150logo src="/mstile-150x150.png"/>
      <TileColor>${color}</TileColor>
    </tile>
  </msapplication>
</browserconfig>`;
    }
    
    function previewFavicon() {
      const text = faviconText.value.trim() || 'üîñ';
      const color = themeColor.value;
      
      if (!text) {
        setStatus('Enter text/emoji for preview', 'error');
        return;
      }
      
      try {
        const svgDataUri = generateSvgFavicon(text, color);
        
        // Create a temporary preview window
        const previewWindow = window.open('', 'favicon-preview', 'width=400,height=300');
        previewWindow.document.write(`
          <html>
            <head>
              <title>Favicon Preview</title>
              <link rel="icon" href="${svgDataUri}" type="image/svg+xml">
              <style>
                body { 
                  font-family: Arial, sans-serif; 
                  text-align: center; 
                  padding: 20px; 
                  background: #1a1a1a; 
                  color: white; 
                }
                .preview-icon { 
                  width: 64px; 
                  height: 64px; 
                  margin: 20px auto;
                  display: block;
                }
              </style>
            </head>
            <body>
              <h2>Favicon Preview</h2>
              <p>Check the browser tab for the favicon!</p>
              <img src="${svgDataUri}" class="preview-icon" alt="Favicon Preview">
              <p>Size: 64x64px preview</p>
              <button onclick="window.close()">Close</button>
            </body>
          </html>
        `);
        
        setStatus('Preview opened in new window', 'success');
      } catch (error) {
        setStatus('Preview failed: ' + error.message, 'error');
      }
    }
    
    function clearAll() {
      faviconName.value = '';
      siteUrl.value = '';
      themeColor.value = '#00d4ff';
      faviconText.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      faviconName.value = '';
      siteUrl.value = '';
      faviconText.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('HTML copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'favicon-setup.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        if (text.includes('http')) {
          siteUrl.value = text;
        } else {
          faviconName.value = text;
        }
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      faviconName.value = 'My Awesome Website';
      siteUrl.value = 'https://mysite.com';
      themeColor.value = '#ff6b35';
      faviconText.value = 'üöÄ';
      generateFavicon();
    }
    
    // Event listeners
    if (generateBtn) generateBtn.addEventListener('click', generateFavicon);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (previewBtn) previewBtn.addEventListener('click', previewFavicon);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    [faviconName, siteUrl, faviconText].forEach(input => {
      input.addEventListener('input', updateStats);
    });
    
    // Keyboard shortcuts
    [faviconName, siteUrl, faviconText].forEach(input => {
      input.addEventListener('keydown', function(e) {
        if (e.ctrlKey || e.metaKey) {
          if (e.key === 'Enter') {
            generateFavicon();
          }
        }
      });
    });
    
    // Initial stats
    updateStats();
  })();
</script>