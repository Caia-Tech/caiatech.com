---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Text Diff Checker - Caiatech">
  <CaiatechToolLayout 
    title="Text Diff Checker" 
    description="Compare and find differences between texts"
    icon="±">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="diff-tool">
      <!-- Options Panel -->
      <div class="terminal-panel options-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">CONFIG://diff.options</span>
          <div class="terminal-actions">
            <div class="view-toggles">
              <button id="side-by-side-btn" class="toggle-btn active">Side-by-Side</button>
              <button id="unified-btn" class="toggle-btn">Unified</button>
            </div>
          </div>
        </div>
        <div class="terminal-body">
          <div class="options-grid">
            <label class="option-checkbox">
              <input type="checkbox" id="ignore-whitespace">
              <span class="checkmark"></span>
              <span>Ignore whitespace</span>
            </label>
            
            <label class="option-checkbox">
              <input type="checkbox" id="ignore-case">
              <span class="checkmark"></span>
              <span>Ignore case</span>
            </label>
            
            <label class="option-checkbox">
              <input type="checkbox" id="ignore-empty-lines">
              <span class="checkmark"></span>
              <span>Ignore empty lines</span>
            </label>
            
            <label class="option-checkbox">
              <input type="checkbox" id="word-level-diff">
              <span class="checkmark"></span>
              <span>Word-level diff</span>
            </label>
          </div>
        </div>
      </div>

      <!-- Input Sections -->
      <div class="input-sections">
        <div class="terminal-panel input-section">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">ORIGINAL://text.left</span>
            <div class="terminal-actions">
              <button class="terminal-action" id="paste-left-btn" title="Paste">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                  <rect x="8" y="2" width="8" height="4" rx="1"/>
                </svg>
              </button>
              <button class="terminal-action" id="clear-left-btn" title="Clear">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
                </svg>
              </button>
              <label for="file-left" class="terminal-action" title="Upload File">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                  <polyline points="17 8 12 3 7 8"/>
                  <line x1="12" y1="3" x2="12" y2="15"/>
                </svg>
                <input type="file" id="file-left" accept=".txt,.js,.html,.css,.json,.xml,.md" style="display: none;">
              </label>
            </div>
          </div>
          <div class="terminal-body">
            <div class="terminal-prompt">
              <span class="prompt-symbol">$</span>
              <span class="prompt-text">original</span>
              <span class="prompt-arrow">→</span>
            </div>
            <textarea 
              id="text-left" 
              class="diff-input"
              placeholder="Paste or type your original text here..."
              spellcheck="false"
            ></textarea>
            <div class="text-stats" id="stats-left">0 lines, 0 characters</div>
          </div>
        </div>

        <div class="terminal-panel input-section">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">MODIFIED://text.right</span>
            <div class="terminal-actions">
              <button class="terminal-action" id="paste-right-btn" title="Paste">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                  <rect x="8" y="2" width="8" height="4" rx="1"/>
                </svg>
              </button>
              <button class="terminal-action" id="clear-right-btn" title="Clear">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
                </svg>
              </button>
              <label for="file-right" class="terminal-action" title="Upload File">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                  <polyline points="17 8 12 3 7 8"/>
                  <line x1="12" y1="3" x2="12" y2="15"/>
                </svg>
                <input type="file" id="file-right" accept=".txt,.js,.html,.css,.json,.xml,.md" style="display: none;">
              </label>
            </div>
          </div>
          <div class="terminal-body">
            <div class="terminal-prompt">
              <span class="prompt-symbol">$</span>
              <span class="prompt-text">modified</span>
              <span class="prompt-arrow">→</span>
            </div>
            <textarea 
              id="text-right" 
              class="diff-input"
              placeholder="Paste or type your modified text here..."
              spellcheck="false"
            ></textarea>
            <div class="text-stats" id="stats-right">0 lines, 0 characters</div>
          </div>
        </div>
      </div>

      <!-- Action Center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="compare-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M5 12h14M12 5l7 7-7 7"/>
              </svg>
              Compare Texts
            </span>
          </button>
          <button id="swap-btn" class="cyber-btn secondary">
            <span class="btn-text">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M7 16l4-4-4-4M15 8l4 4-4 4"/>
              </svg>
              Swap
            </span>
          </button>
          <button id="load-sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="download-diff-btn" class="cyber-btn secondary" style="display: none;">
            <span class="btn-text">Download Diff</span>
          </button>
        </div>
        
        <!-- Status bar with stats -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready to compare</span>
          </div>
          <div class="diff-stats" id="diff-summary" style="display: none;">
            <span class="stat-item">+<span id="additions-count">0</span></span>
            <span class="stat-separator">•</span>
            <span class="stat-item">-<span id="deletions-count">0</span></span>
            <span class="stat-separator">•</span>
            <span class="stat-item">~<span id="modifications-count">0</span></span>
            <span class="stat-separator">•</span>
            <span class="stat-item"><span id="similarity-percent">100%</span> similar</span>
          </div>
        </div>
      </div>

      <!-- Diff Results -->
      <div class="terminal-panel diff-result-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://diff.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-diff-btn" title="Copy Diff">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div id="diff-result">
            <div class="result-placeholder">
              <div class="placeholder-icon">📊</div>
              <h4>Ready to Compare</h4>
              <p>Enter text in both fields and click "Compare Texts" to see the differences.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Text Diff Checker" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .diff-tool {
    display: grid;
    gap: 1.5rem;
  }

  .input-sections {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
  }

  @media (max-width: 768px) {
    .input-sections {
      grid-template-columns: 1fr;
    }
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Options Panel Styles */
  .options-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 1rem;
  }

  .option-checkbox {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    cursor: pointer;
    padding: 0.75rem;
    border-radius: 6px;
    transition: all 0.2s;
    font-family: var(--font-mono);
    font-size: 0.9rem;
  }

  .option-checkbox:hover {
    background: rgba(0, 212, 255, 0.1);
  }

  .option-checkbox input[type="checkbox"] {
    display: none;
  }

  .checkmark {
    width: 18px;
    height: 18px;
    border: 2px solid rgba(0, 212, 255, 0.3);
    border-radius: 4px;
    position: relative;
    transition: all 0.2s;
  }

  .option-checkbox input:checked + .checkmark {
    background: var(--color-accent);
    border-color: var(--color-accent);
  }

  .option-checkbox input:checked + .checkmark::after {
    content: '✓';
    position: absolute;
    color: var(--color-bg);
    font-weight: bold;
    font-size: 0.7rem;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .view-toggles {
    display: flex;
    border: 1px solid rgba(0, 212, 255, 0.3);
    border-radius: 6px;
    overflow: hidden;
  }

  .toggle-btn {
    padding: 0.5rem 1rem;
    border: none;
    background: transparent;
    color: var(--color-text);
    cursor: pointer;
    transition: all 0.2s;
    border-right: 1px solid rgba(0, 212, 255, 0.3);
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .toggle-btn:last-child {
    border-right: none;
  }

  .toggle-btn:hover {
    background: rgba(0, 212, 255, 0.1);
  }

  .toggle-btn.active {
    background: var(--color-accent);
    color: var(--color-bg);
  }

  /* Diff Input Styles */
  .diff-input {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
    line-height: 1.5;
  }

  .diff-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .text-stats {
    margin-top: 0.75rem;
    padding: 0.5rem 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 4px;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text-secondary);
  }

  /* Result Placeholder */
  .result-placeholder {
    text-align: center;
    padding: 3rem;
    color: var(--color-text-secondary);
  }

  .placeholder-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
  }

  .result-placeholder h4 {
    margin: 0 0 1rem 0;
    color: var(--color-text);
    font-family: var(--font-mono);
  }

  .result-placeholder p {
    margin: 0;
    font-family: var(--font-mono);
    font-size: 0.9rem;
  }

  /* Diff Stats */
  .diff-stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .diff-stats .stat-item {
    color: var(--color-text);
  }

  /* Diff View Styles */
  .diff-view {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    line-height: 1.4;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 6px;
    overflow: hidden;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .diff-line {
    display: flex;
    align-items: flex-start;
    padding: 0.25rem 0;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .diff-line:last-child {
    border-bottom: none;
  }

  .line-number {
    width: 50px;
    padding: 0 0.75rem;
    color: var(--color-text-secondary);
    text-align: right;
    flex-shrink: 0;
    font-size: 0.8rem;
    opacity: 0.7;
  }

  .line-content {
    flex: 1;
    padding: 0 0.75rem;
    white-space: pre-wrap;
    word-break: break-word;
  }

  /* Diff line types */
  .diff-line.addition {
    background: rgba(40, 202, 66, 0.1);
    border-left: 3px solid #28ca42;
  }

  .diff-line.deletion {
    background: rgba(255, 95, 87, 0.1);
    border-left: 3px solid #ff5f57;
  }

  .diff-line.modification {
    background: rgba(255, 189, 46, 0.1);
    border-left: 3px solid #ffbd2e;
  }

  .diff-line.unchanged {
    background: transparent;
    border-left: 3px solid transparent;
  }

  /* Side-by-side view */
  .side-by-side .left-pane,
  .side-by-side .right-pane {
    overflow-x: auto;
  }

  /* Unified view */
  .unified .diff-line {
    font-family: var(--font-mono);
  }

  /* Legend */
  .legend {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .legend-color {
    width: 16px;
    height: 16px;
    border-radius: 3px;
  }

  .legend-color.addition {
    background: #28ca42;
  }

  .legend-color.deletion {
    background: #ff5f57;
  }

  .legend-color.modification {
    background: #ffbd2e;
  }

  .legend-color.unchanged {
    background: var(--color-text-secondary);
    opacity: 0.3;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr;
      gap: 0.75rem;
    }

    .options-grid {
      grid-template-columns: 1fr 1fr;
    }

    .diff-stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }

    .view-toggles {
      flex-direction: column;
    }

    .toggle-btn {
      border-right: none;
      border-bottom: 1px solid rgba(0, 212, 255, 0.3);
    }

    .toggle-btn:last-child {
      border-bottom: none;
    }
  }
</style>

<script>
  // Text Diff Checker - JavaScript Implementation
  const textLeft = document.getElementById('text-left');
  const textRight = document.getElementById('text-right');
  const diffResult = document.getElementById('diff-result');
  const diffSummary = document.getElementById('diff-summary');
  const status = document.getElementById('status');
  const statusText = status.querySelector('.status-text');
  
  const ignoreWhitespace = document.getElementById('ignore-whitespace');
  const ignoreCase = document.getElementById('ignore-case');
  const ignoreEmptyLines = document.getElementById('ignore-empty-lines');
  const wordLevelDiff = document.getElementById('word-level-diff');
  
  let viewMode = 'side-by-side';
  
  const sampleData = {
    left: `function calculateSum(a, b) {
  return a + b;
}

function calculateProduct(a, b) {
  return a * b;
}

console.log('Math utilities loaded');`,
    right: `function calculateSum(a, b) {
  // Added parameter validation
  if (typeof a !== 'number' || typeof b !== 'number') {
    throw new Error('Parameters must be numbers');
  }
  return a + b;
}

function calculateProduct(a, b, c = 1) {
  return a * b * c;
}

function calculateDivision(a, b) {
  if (b === 0) {
    throw new Error('Division by zero');
  }
  return a / b;
}

console.log('Enhanced math utilities loaded');`
  };
  
  function updateStats() {
    const leftStats = document.getElementById('stats-left');
    const rightStats = document.getElementById('stats-right');
    
    if (leftStats) {
      const leftLines = textLeft.value.split('\n').length;
      const leftChars = textLeft.value.length;
      leftStats.textContent = `${leftLines} lines, ${leftChars} characters`;
    }
    
    if (rightStats) {
      const rightLines = textRight.value.split('\n').length;
      const rightChars = textRight.value.length;
      rightStats.textContent = `${rightLines} lines, ${rightChars} characters`;
    }
  }
  
  function setStatus(text, type = 'normal') {
    status.className = 'status-indicator ' + type;
    statusText.textContent = text;
    
    if (type !== 'normal') {
      setTimeout(() => {
        status.className = 'status-indicator';
        statusText.textContent = 'Ready to compare';
      }, 3000);
    }
  }
  
  function preprocessText(text) {
    let processed = text;
    
    if (ignoreCase && ignoreCase.checked) {
      processed = processed.toLowerCase();
    }
    
    if (ignoreWhitespace && ignoreWhitespace.checked) {
      processed = processed.replace(/\s+/g, ' ').trim();
    }
    
    return processed;
  }
  
  function generateDiff() {
    const leftText = textLeft.value;
    const rightText = textRight.value;
    
    if (!leftText && !rightText) {
      setStatus('Please enter text in both fields', 'error');
      return;
    }
    
    setStatus('Comparing texts...', 'processing');
    
    try {
      const leftLines = leftText.split('\n');
      const rightLines = rightText.split('\n');
      
      let processedLeft = leftLines;
      let processedRight = rightLines;
      
      if (ignoreEmptyLines && ignoreEmptyLines.checked) {
        processedLeft = leftLines.filter(line => line.trim() !== '');
        processedRight = rightLines.filter(line => line.trim() !== '');
      }
      
      const diff = computeDiff(processedLeft, processedRight);
      displayDiff(diff);
      updateSummary(diff);
      
      if (diffSummary) diffSummary.style.display = 'flex';
      document.getElementById('download-diff-btn').style.display = 'inline-block';
      
      setStatus('Comparison complete', 'success');
    } catch (error) {
      setStatus('Comparison failed', 'error');
      console.error('Diff error:', error);
    }
  }
  
  function computeDiff(left, right) {
    const diff = [];
    let leftIndex = 0;
    let rightIndex = 0;
    
    while (leftIndex < left.length || rightIndex < right.length) {
      const leftLine = left[leftIndex];
      const rightLine = right[rightIndex];
      
      if (leftIndex >= left.length) {
        // Only right lines remaining (additions)
        diff.push({
          type: 'addition',
          leftLineNum: null,
          rightLineNum: rightIndex + 1,
          content: rightLine || '',
          leftContent: '',
          rightContent: rightLine || ''
        });
        rightIndex++;
      } else if (rightIndex >= right.length) {
        // Only left lines remaining (deletions)
        diff.push({
          type: 'deletion',
          leftLineNum: leftIndex + 1,
          rightLineNum: null,
          content: leftLine || '',
          leftContent: leftLine || '',
          rightContent: ''
        });
        leftIndex++;
      } else {
        const processedLeft = preprocessText(leftLine);
        const processedRight = preprocessText(rightLine);
        
        if (processedLeft === processedRight) {
          // Lines are identical
          diff.push({
            type: 'unchanged',
            leftLineNum: leftIndex + 1,
            rightLineNum: rightIndex + 1,
            content: leftLine,
            leftContent: leftLine,
            rightContent: rightLine
          });
          leftIndex++;
          rightIndex++;
        } else {
          // Lines are different
          diff.push({
            type: 'modification',
            leftLineNum: leftIndex + 1,
            rightLineNum: rightIndex + 1,
            content: rightLine,
            leftContent: leftLine,
            rightContent: rightLine
          });
          leftIndex++;
          rightIndex++;
        }
      }
    }
    
    return diff;
  }
  
  function displayDiff(diff) {
    if (!diffResult) return;
    
    if (viewMode === 'side-by-side') {
      displaySideBySideDiff(diff);
    } else {
      displayUnifiedDiff(diff);
    }
  }
  
  function displaySideBySideDiff(diff) {
    const html = `
      <div class="diff-view side-by-side">
        <div style="display: grid; grid-template-columns: 1fr 1fr;">
          <div class="left-pane" style="border-right: 1px solid rgba(0, 212, 255, 0.2);">
            <div style="padding: 0.75rem 1rem; background: rgba(0, 0, 0, 0.2); font-weight: 600; border-bottom: 1px solid rgba(0, 212, 255, 0.2); font-family: var(--font-mono); color: var(--color-accent);">
              ORIGINAL
            </div>
            ${diff.map(line => `
              <div class="diff-line ${line.type}">
                <span class="line-number">${line.leftLineNum || ''}</span>
                <span class="line-content">${escapeHtml(line.leftContent)}</span>
              </div>
            `).join('')}
          </div>
          <div class="right-pane">
            <div style="padding: 0.75rem 1rem; background: rgba(0, 0, 0, 0.2); font-weight: 600; border-bottom: 1px solid rgba(0, 212, 255, 0.2); font-family: var(--font-mono); color: var(--color-accent);">
              MODIFIED
            </div>
            ${diff.map(line => `
              <div class="diff-line ${line.type}">
                <span class="line-number">${line.rightLineNum || ''}</span>
                <span class="line-content">${escapeHtml(line.rightContent)}</span>
              </div>
            `).join('')}
          </div>
        </div>
      </div>
    `;
    
    diffResult.innerHTML = html;
  }
  
  function displayUnifiedDiff(diff) {
    const html = `
      <div class="diff-view unified">
        <div style="padding: 0.75rem 1rem; background: rgba(0, 0, 0, 0.2); font-weight: 600; border-bottom: 1px solid rgba(0, 212, 255, 0.2); font-family: var(--font-mono); color: var(--color-accent);">
          UNIFIED DIFF
        </div>
        ${diff.map(line => {
          let prefix = ' ';
          let content = line.content;
          
          if (line.type === 'addition') {
            prefix = '+';
          } else if (line.type === 'deletion') {
            prefix = '-';
          } else if (line.type === 'modification') {
            return `
              <div class="diff-line deletion">
                <span class="line-number">${line.leftLineNum || ''}</span>
                <span class="line-content">-${escapeHtml(line.leftContent)}</span>
              </div>
              <div class="diff-line addition">
                <span class="line-number">${line.rightLineNum || ''}</span>
                <span class="line-content">+${escapeHtml(line.rightContent)}</span>
              </div>
            `;
          }
          
          return `
            <div class="diff-line ${line.type}">
              <span class="line-number">${line.leftLineNum || line.rightLineNum || ''}</span>
              <span class="line-content">${prefix}${escapeHtml(content)}</span>
            </div>
          `;
        }).join('')}
      </div>
    `;
    
    diffResult.innerHTML = html;
  }
  
  function updateSummary(diff) {
    const additions = diff.filter(line => line.type === 'addition').length;
    const deletions = diff.filter(line => line.type === 'deletion').length;
    const modifications = diff.filter(line => line.type === 'modification').length;
    const unchanged = diff.filter(line => line.type === 'unchanged').length;
    
    const total = diff.length;
    const similarity = total > 0 ? Math.round((unchanged / total) * 100) : 100;
    
    document.getElementById('additions-count').textContent = additions.toString();
    document.getElementById('deletions-count').textContent = deletions.toString();
    document.getElementById('modifications-count').textContent = modifications.toString();
    document.getElementById('similarity-percent').textContent = `${similarity}%`;
  }
  
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
  
  // Event listeners
  textLeft.addEventListener('input', updateStats);
  textRight.addEventListener('input', updateStats);
  
  document.getElementById('side-by-side-btn')?.addEventListener('click', (e) => {
    viewMode = 'side-by-side';
    document.querySelectorAll('.toggle-btn').forEach(btn => btn.classList.remove('active'));
    e.target.classList.add('active');
    if (diffResult.querySelector('.diff-view')) {
      generateDiff();
    }
  });
  
  document.getElementById('unified-btn')?.addEventListener('click', (e) => {
    viewMode = 'unified';
    document.querySelectorAll('.toggle-btn').forEach(btn => btn.classList.remove('active'));
    e.target.classList.add('active');
    if (diffResult.querySelector('.diff-view')) {
      generateDiff();
    }
  });
  
  document.getElementById('compare-btn')?.addEventListener('click', generateDiff);
  
  document.getElementById('swap-btn')?.addEventListener('click', () => {
    const temp = textLeft.value;
    textLeft.value = textRight.value;
    textRight.value = temp;
    updateStats();
    if (diffResult.querySelector('.diff-view')) {
      generateDiff();
    }
  });
  
  // File upload handlers
  document.getElementById('file-left')?.addEventListener('change', async (e) => {
    const file = e.target.files?.[0];
    if (file) {
      const text = await file.text();
      textLeft.value = text;
      updateStats();
    }
  });
  
  document.getElementById('file-right')?.addEventListener('change', async (e) => {
    const file = e.target.files?.[0];
    if (file) {
      const text = await file.text();
      textRight.value = text;
      updateStats();
    }
  });
  
  // Action buttons
  document.getElementById('paste-left-btn')?.addEventListener('click', async () => {
    try {
      const text = await navigator.clipboard.readText();
      textLeft.value = text;
      updateStats();
      setStatus('Text pasted', 'success');
    } catch (err) {
      setStatus('Paste failed', 'error');
    }
  });
  
  document.getElementById('paste-right-btn')?.addEventListener('click', async () => {
    try {
      const text = await navigator.clipboard.readText();
      textRight.value = text;
      updateStats();
      setStatus('Text pasted', 'success');
    } catch (err) {
      setStatus('Paste failed', 'error');
    }
  });
  
  document.getElementById('clear-left-btn')?.addEventListener('click', () => {
    textLeft.value = '';
    updateStats();
    setStatus('Text cleared', 'success');
  });
  
  document.getElementById('clear-right-btn')?.addEventListener('click', () => {
    textRight.value = '';
    updateStats();
    setStatus('Text cleared', 'success');
  });
  
  document.getElementById('load-sample-btn')?.addEventListener('click', () => {
    textLeft.value = sampleData.left;
    textRight.value = sampleData.right;
    updateStats();
    generateDiff();
    setStatus('Sample data loaded', 'success');
  });
  
  document.getElementById('download-diff-btn')?.addEventListener('click', () => {
    const diffContent = diffResult.textContent || '';
    const blob = new Blob([diffContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'diff-result.txt';
    a.click();
    URL.revokeObjectURL(url);
    setStatus('Diff downloaded', 'success');
  });
  
  document.getElementById('copy-diff-btn')?.addEventListener('click', async () => {
    const diffContent = diffResult.textContent || '';
    if (!diffContent) {
      setStatus('Nothing to copy', 'error');
      return;
    }
    
    try {
      await navigator.clipboard.writeText(diffContent);
      setStatus('Diff copied to clipboard', 'success');
    } catch (err) {
      setStatus('Copy failed', 'error');
    }
  });
  
  // Option change handlers
  [ignoreWhitespace, ignoreCase, ignoreEmptyLines, wordLevelDiff].forEach(checkbox => {
    checkbox?.addEventListener('change', () => {
      if (diffResult.querySelector('.diff-view')) {
        generateDiff();
      }
    });
  });
  
  // Initialize
  updateStats();
</script>