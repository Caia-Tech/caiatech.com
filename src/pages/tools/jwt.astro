---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="JWT Decoder - Caiatech">
  <CaiatechToolLayout 
    title="JWT Decoder" 
    description="Decode and verify JWT tokens"
    icon="JWT">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="jwt-tool">
      <!-- JWT Input Panel -->
      <div class="terminal-panel jwt-input-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://jwt.token</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="paste-btn" title="Paste Token">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
            <button class="terminal-action" id="clear-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="sample-btn" title="Load Sample">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                <polyline points="14,2 14,8 20,8"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">jwt.decode</span>
            <span class="prompt-arrow">→</span>
          </div>
          <textarea 
            id="jwt-input" 
            class="jwt-input-field"
            placeholder="Paste your JWT token here..."
            spellcheck="false"
          ></textarea>
          <div class="token-status" id="token-status">
            <span class="status-icon">⚡</span>
            <span class="status-message">Ready to decode</span>
            <span class="token-length" id="token-length">0 characters</span>
          </div>
        </div>
      </div>

      <!-- JWT Parts Display -->
      <div class="jwt-parts-grid">
        <!-- Header Part -->
        <div class="terminal-panel jwt-part header-part">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">HEADER://jwt.header</span>
            <div class="terminal-actions">
              <button class="terminal-action" id="copy-header-btn" title="Copy Header">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="part-content">
              <label>Encoded:</label>
              <div id="header-encoded" class="encoded-text">-</div>
              <label>Decoded:</label>
              <pre id="header-decoded" class="decoded-json">-</pre>
            </div>
          </div>
        </div>

        <!-- Payload Part -->
        <div class="terminal-panel jwt-part payload-part">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">PAYLOAD://jwt.payload</span>
            <div class="terminal-actions">
              <button class="terminal-action" id="copy-payload-btn" title="Copy Payload">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="part-content">
              <label>Encoded:</label>
              <div id="payload-encoded" class="encoded-text">-</div>
              <label>Decoded:</label>
              <pre id="payload-decoded" class="decoded-json">-</pre>
            </div>
          </div>
        </div>

        <!-- Signature Part -->
        <div class="terminal-panel jwt-part signature-part">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">SIGNATURE://jwt.signature</span>
            <div class="terminal-actions">
              <button class="terminal-action" id="copy-signature-btn" title="Copy Signature">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <div class="part-content">
              <label>Encoded:</label>
              <div id="signature-encoded" class="encoded-text">-</div>
              <label>Algorithm:</label>
              <div id="algorithm-info" class="algorithm-info">-</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Token Information -->
      <div class="terminal-panel token-info-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INFO://jwt.analysis</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-info-btn" title="Copy Analysis">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="info-grid">
            <div class="info-item">
              <label>Algorithm:</label>
              <span id="info-algorithm" class="info-value">-</span>
            </div>
            <div class="info-item">
              <label>Type:</label>
              <span id="info-type" class="info-value">-</span>
            </div>
            <div class="info-item">
              <label>Subject:</label>
              <span id="info-subject" class="info-value">-</span>
            </div>
            <div class="info-item">
              <label>Issued At:</label>
              <span id="info-iat" class="info-value">-</span>
            </div>
            <div class="info-item">
              <label>Expires At:</label>
              <span id="info-exp" class="info-value">-</span>
            </div>
            <div class="info-item">
              <label>Status:</label>
              <span id="info-status" class="info-value status-badge">-</span>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="JWT Decoder" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .jwt-tool {
    display: grid;
    gap: 1.5rem;
  }

  .jwt-parts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  @media (max-width: 768px) {
    .jwt-parts-grid {
      grid-template-columns: 1fr;
    }
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* JWT-specific styles */
  .jwt-input-field {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 1rem;
    width: 100%;
    min-height: 120px;
    resize: vertical;
    transition: all 0.3s;
  }

  .jwt-input-field:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .token-status {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1rem;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 6px;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-icon {
    color: var(--color-accent);
    font-size: 1rem;
  }

  .status-message {
    color: var(--color-text);
    flex: 1;
    margin-left: 0.5rem;
  }

  .token-length {
    color: var(--color-text-secondary);
    font-size: 0.8rem;
  }

  .part-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .part-content label {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 1px;
    margin: 0;
  }

  .encoded-text {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    padding: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text-secondary);
    word-break: break-all;
    max-height: 80px;
    overflow-y: auto;
    line-height: 1.4;
  }

  .decoded-json {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    padding: 1rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text);
    white-space: pre-wrap;
    margin: 0;
    max-height: 200px;
    overflow-y: auto;
    line-height: 1.5;
  }

  .algorithm-info {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    padding: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    color: var(--color-accent);
  }

  .header-part {
    border-top: 3px solid #28ca42;
  }

  .payload-part {
    border-top: 3px solid var(--color-accent);
  }

  .signature-part {
    border-top: 3px solid #ffbd2e;
  }

  .info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .info-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 6px;
  }

  .info-item label {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin: 0;
  }

  .info-value {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    color: var(--color-text);
    word-break: break-word;
    text-align: right;
    flex: 1;
    margin-left: 1rem;
  }

  .status-badge {
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .status-badge.valid {
    background: rgba(40, 202, 66, 0.2);
    color: #28ca42;
    border: 1px solid #28ca42;
  }

  .status-badge.expired {
    background: rgba(255, 95, 87, 0.2);
    color: #ff5f57;
    border: 1px solid #ff5f57;
  }

  .status-badge.future {
    background: rgba(255, 189, 46, 0.2);
    color: #ffbd2e;
    border: 1px solid #ffbd2e;
  }

  /* Token status states */
  .token-status.valid {
    border-color: rgba(40, 202, 66, 0.3);
    background: rgba(40, 202, 66, 0.1);
  }

  .token-status.valid .status-icon {
    color: #28ca42;
  }

  .token-status.invalid {
    border-color: rgba(255, 95, 87, 0.3);
    background: rgba(255, 95, 87, 0.1);
  }

  .token-status.invalid .status-icon {
    color: #ff5f57;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .info-grid {
      grid-template-columns: 1fr;
    }

    .info-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .info-value {
      text-align: left;
      margin-left: 0;
    }

    .token-status {
      flex-direction: column;
      gap: 0.5rem;
      text-align: center;
    }
  }
</style>

<script>
  // JWT Decoder - JavaScript Implementation
  const jwtInput = document.getElementById('jwt-input');
  const tokenStatus = document.getElementById('token-status');
  const tokenLength = document.getElementById('token-length');
  const statusMessage = tokenStatus.querySelector('.status-message');
  const statusIcon = tokenStatus.querySelector('.status-icon');
  
  const headerEncoded = document.getElementById('header-encoded');
  const headerDecoded = document.getElementById('header-decoded');
  const payloadEncoded = document.getElementById('payload-encoded');
  const payloadDecoded = document.getElementById('payload-decoded');
  const signatureEncoded = document.getElementById('signature-encoded');
  const algorithmInfo = document.getElementById('algorithm-info');
  
  const infoAlgorithm = document.getElementById('info-algorithm');
  const infoType = document.getElementById('info-type');
  const infoSubject = document.getElementById('info-subject');
  const infoIat = document.getElementById('info-iat');
  const infoExp = document.getElementById('info-exp');
  const infoStatus = document.getElementById('info-status');
  
  const sampleJWT = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE4MzE2MjM5MDIyfQ.Ks_BdfH0ojmEfFo5Sfv6vDy5VRrLKfvqZkJSbgKe7Cc";
  
  function base64UrlDecode(str) {
    const padding = '='.repeat((4 - str.length % 4) % 4);
    const base64 = (str + padding).replace(/-/g, '+').replace(/_/g, '/');
    try {
      return atob(base64);
    } catch (e) {
      throw new Error('Invalid base64url encoding');
    }
  }
  
  function formatTimestamp(timestamp) {
    if (!timestamp) return '-';
    const date = new Date(timestamp * 1000);
    const now = new Date();
    const isExpired = date < now;
    const relative = isExpired ? ' (expired)' : ' (valid)';
    return date.toLocaleString() + relative;
  }
  
  function clearResults() {
    headerEncoded.textContent = '-';
    headerDecoded.textContent = '-';
    payloadEncoded.textContent = '-';
    payloadDecoded.textContent = '-';
    signatureEncoded.textContent = '-';
    algorithmInfo.textContent = '-';
    
    infoAlgorithm.textContent = '-';
    infoType.textContent = '-';
    infoSubject.textContent = '-';
    infoIat.textContent = '-';
    infoExp.textContent = '-';
    infoStatus.textContent = '-';
    infoStatus.className = 'info-value status-badge';
  }
  
  function setTokenStatus(message, type = 'ready', icon = '⚡') {
    statusMessage.textContent = message;
    statusIcon.textContent = icon;
    tokenStatus.className = 'token-status ' + type;
  }
  
  function analyzeJWT() {
    const token = jwtInput.value.trim();
    
    if (!token) {
      clearResults();
      setTokenStatus('Ready to decode', 'ready', '⚡');
      return;
    }
    
    try {
      const parts = token.split('.');
      
      if (parts.length !== 3) {
        throw new Error('Invalid JWT format - must have 3 parts');
      }
      
      // Decode header
      const headerJson = base64UrlDecode(parts[0]);
      const header = JSON.parse(headerJson);
      headerEncoded.textContent = parts[0];
      headerDecoded.textContent = JSON.stringify(header, null, 2);
      
      // Decode payload
      const payloadJson = base64UrlDecode(parts[1]);
      const payload = JSON.parse(payloadJson);
      payloadEncoded.textContent = parts[1];
      payloadDecoded.textContent = JSON.stringify(payload, null, 2);
      
      // Display signature
      signatureEncoded.textContent = parts[2];
      algorithmInfo.textContent = header.alg || 'Unknown';
      
      // Update info panel
      infoAlgorithm.textContent = header.alg || 'Unknown';
      infoType.textContent = header.typ || 'JWT';
      infoSubject.textContent = payload.sub || '-';
      infoIat.textContent = formatTimestamp(payload.iat);
      infoExp.textContent = formatTimestamp(payload.exp);
      
      // Determine status
      const now = Math.floor(Date.now() / 1000);
      if (payload.exp && payload.exp < now) {
        infoStatus.textContent = 'Expired';
        infoStatus.className = 'info-value status-badge expired';
      } else if (payload.nbf && payload.nbf > now) {
        infoStatus.textContent = 'Not Yet Valid';
        infoStatus.className = 'info-value status-badge future';
      } else {
        infoStatus.textContent = 'Valid';
        infoStatus.className = 'info-value status-badge valid';
      }
      
      setTokenStatus('JWT decoded successfully', 'valid', '✅');
      
    } catch (error) {
      clearResults();
      setTokenStatus(`Invalid JWT: ${error.message}`, 'invalid', '❌');
    }
  }
  
  function updateStats() {
    const chars = jwtInput.value.length;
    tokenLength.textContent = `${chars} characters`;
  }
  
  // Copy functions
  async function copyToClipboard(text, buttonId) {
    if (!text || text === '-') return;
    
    try {
      await navigator.clipboard.writeText(text);
      const button = document.getElementById(buttonId);
      if (button) {
        const originalContent = button.innerHTML;
        button.innerHTML = '✓';
        button.style.color = '#28ca42';
        setTimeout(() => {
          button.innerHTML = originalContent;
          button.style.color = '';
        }, 2000);
      }
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  }
  
  // Event listeners
  jwtInput.addEventListener('input', () => {
    updateStats();
    analyzeJWT();
  });
  
  document.getElementById('paste-btn')?.addEventListener('click', async () => {
    try {
      const text = await navigator.clipboard.readText();
      jwtInput.value = text;
      updateStats();
      analyzeJWT();
    } catch (err) {
      console.error('Failed to paste:', err);
    }
  });
  
  document.getElementById('clear-btn')?.addEventListener('click', () => {
    jwtInput.value = '';
    updateStats();
    analyzeJWT();
  });
  
  document.getElementById('sample-btn')?.addEventListener('click', () => {
    jwtInput.value = sampleJWT;
    updateStats();
    analyzeJWT();
  });
  
  document.getElementById('copy-header-btn')?.addEventListener('click', () => {
    copyToClipboard(headerDecoded.textContent, 'copy-header-btn');
  });
  
  document.getElementById('copy-payload-btn')?.addEventListener('click', () => {
    copyToClipboard(payloadDecoded.textContent, 'copy-payload-btn');
  });
  
  document.getElementById('copy-signature-btn')?.addEventListener('click', () => {
    copyToClipboard(signatureEncoded.textContent, 'copy-signature-btn');
  });
  
  document.getElementById('copy-info-btn')?.addEventListener('click', () => {
    const info = {
      algorithm: infoAlgorithm.textContent,
      type: infoType.textContent,
      subject: infoSubject.textContent,
      issuedAt: infoIat.textContent,
      expiresAt: infoExp.textContent,
      status: infoStatus.textContent
    };
    copyToClipboard(JSON.stringify(info, null, 2), 'copy-info-btn');
  });
  
  // Initialize
  updateStats();
  analyzeJWT();
</script>