---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Sitemap Generator - Caiatech">
  <CaiatechToolLayout 
    title="Sitemap Generator" 
    description="Generate XML sitemaps"
    icon="🗺">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://sitemap</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">sitemap</span>
            <span class="prompt-arrow">→</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Enter URLs (one per line) or website domain to crawl..."
            spellcheck="false"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="sitemap-options">
          <label for="base-url">Base URL:</label>
          <input type="url" id="base-url" placeholder="https://example.com" class="url-input">
          
          <label for="change-freq">Change Frequency:</label>
          <select id="change-freq" class="format-select">
            <option value="daily">Daily</option>
            <option value="weekly" selected>Weekly</option>
            <option value="monthly">Monthly</option>
            <option value="yearly">Yearly</option>
            <option value="never">Never</option>
          </select>
          
          <label for="priority">Default Priority:</label>
          <select id="priority" class="format-select">
            <option value="0.1">0.1 (Low)</option>
            <option value="0.5" selected>0.5 (Medium)</option>
            <option value="0.8">0.8 (High)</option>
            <option value="1.0">1.0 (Highest)</option>
          </select>
        </div>

        <div class="control-grid">
          <button id="generate-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">🗺 Generate Sitemap</span>
          </button>
          <button id="validate-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">✓ Validate</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">•</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://sitemap.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Sitemap Generator" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Sitemap options */
  .sitemap-options {
    display: grid;
    grid-template-columns: auto 1fr auto 1fr auto 1fr;
    gap: 1rem;
    align-items: center;
    margin-bottom: 1rem;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .sitemap-options label {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .url-input,
  .format-select {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 4px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    padding: 0.4rem 0.6rem;
    transition: all 0.3s;
    cursor: pointer;
  }

  .url-input:focus,
  .format-select:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.2);
  }

  .format-select option {
    background: var(--color-surface);
    color: var(--color-text);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }

    .sitemap-options {
      grid-template-columns: 1fr;
      gap: 0.5rem;
    }
  }
</style>

<script>
  // XML Sitemap Generator
  (function() {
    // DOM elements
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const baseUrl = document.getElementById('base-url');
    const changeFreq = document.getElementById('change-freq');
    const priority = document.getElementById('priority');
    
    const generateBtn = document.getElementById('generate-btn');
    const validateBtn = document.getElementById('validate-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function validateUrl(url) {
      try {
        new URL(url);
        return true;
      } catch {
        return false;
      }
    }
    
    function normalizeUrl(url, baseUrlValue) {
      // If URL is already absolute, return as is
      if (url.startsWith('http://') || url.startsWith('https://')) {
        return url;
      }
      
      // If we have a base URL, construct the full URL
      if (baseUrlValue) {
        const base = baseUrlValue.replace(/\/$/, ''); // Remove trailing slash
        const path = url.startsWith('/') ? url : '/' + url;
        return base + path;
      }
      
      // Return as relative URL with protocol assumption
      return url.startsWith('/') ? url : '/' + url;
    }
    
    function escapeXml(unsafe) {
      return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }
    
    function generateSitemap() {
      const urls = input.value.trim().split('\n').filter(url => url.trim());
      if (urls.length === 0) {
        setStatus('Please enter URLs to generate sitemap', 'error');
        return;
      }
      
      setStatus('Generating XML sitemap...', 'working');
      
      const baseUrlValue = baseUrl.value.trim();
      const changeFreqValue = changeFreq.value;
      const priorityValue = priority.value;
      const currentDate = new Date().toISOString().split('T')[0];
      
      // Validate base URL if provided
      if (baseUrlValue && !validateUrl(baseUrlValue)) {
        setStatus('Invalid base URL format', 'error');
        return;
      }
      
      let sitemap = '<?xml version="1.0" encoding="UTF-8"?>\n';
      sitemap += '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n';
      
      const processedUrls = new Set();
      let validUrls = 0;
      let invalidUrls = 0;
      
      urls.forEach(url => {
        const trimmedUrl = url.trim();
        if (!trimmedUrl) return;
        
        // Normalize the URL
        const fullUrl = normalizeUrl(trimmedUrl, baseUrlValue);
        
        // Skip duplicates
        if (processedUrls.has(fullUrl)) {
          return;
        }
        processedUrls.add(fullUrl);
        
        // Check if it's a valid URL (if it's absolute)
        if (fullUrl.startsWith('http') && !validateUrl(fullUrl)) {
          invalidUrls++;
          return;
        }
        
        validUrls++;
        
        sitemap += '  <url>\n';
        sitemap += '    <loc>' + escapeXml(fullUrl) + '</loc>\n';
        sitemap += '    <lastmod>' + currentDate + '</lastmod>\n';
        sitemap += '    <changefreq>' + changeFreqValue + '</changefreq>\n';
        sitemap += '    <priority>' + priorityValue + '</priority>\n';
        sitemap += '  </url>\n';
      });
      
      sitemap += '</urlset>';
      
      // Display results with statistics
      let result = '╔════════════════════════════════════════╗\n';
      result += '║         XML SITEMAP GENERATED          ║\n';
      result += '╚════════════════════════════════════════╝\n\n';
      
      result += 'GENERATION STATISTICS:\n';
      result += '─'.repeat(40) + '\n';
      result += '• Total URLs processed: ' + urls.length + '\n';
      result += '• Valid URLs added: ' + validUrls + '\n';
      result += '• Invalid/duplicate URLs: ' + invalidUrls + '\n';
      result += '• Base URL: ' + (baseUrlValue || 'Not specified') + '\n';
      result += '• Change frequency: ' + changeFreqValue + '\n';
      result += '• Default priority: ' + priorityValue + '\n';
      result += '• Generated on: ' + currentDate + '\n\n';
      
      result += 'XML SITEMAP:\n';
      result += '─'.repeat(40) + '\n';
      result += sitemap + '\n\n';
      
      result += 'NEXT STEPS:\n';
      result += '─'.repeat(40) + '\n';
      result += '1. Save the XML as "sitemap.xml"\n';
      result += '2. Upload to your website root directory\n';
      result += '3. Add to robots.txt: "Sitemap: ' + (baseUrlValue || 'https://yoursite.com') + '/sitemap.xml"\n';
      result += '4. Submit to search engines (Google Search Console, Bing Webmaster)\n';
      result += '5. Validate using online sitemap validators';
      
      output.textContent = result;
      setStatus('Sitemap generated successfully!', 'success');
      updateStats();
    }
    
    function validateSitemap() {
      const sitemapContent = output.textContent;
      if (!sitemapContent || !sitemapContent.includes('<?xml')) {
        setStatus('No XML sitemap found to validate', 'error');
        return;
      }
      
      setStatus('Validating sitemap...', 'working');
      
      const xmlMatch = sitemapContent.match(/<\?xml[\s\S]*?<\/urlset>/);
      if (!xmlMatch) {
        setStatus('No valid XML sitemap structure found', 'error');
        return;
      }
      
      const xmlContent = xmlMatch[0];
      const urls = (xmlContent.match(/<url>/g) || []).length;
      const locs = (xmlContent.match(/<loc>/g) || []).length;
      const lastmods = (xmlContent.match(/<lastmod>/g) || []).length;
      
      // Basic validation checks
      const issues = [];
      const warnings = [];
      
      if (urls !== locs) {
        issues.push('Mismatch between <url> and <loc> elements');
      }
      
      if (urls > 50000) {
        warnings.push('Sitemap contains more than 50,000 URLs (consider splitting)');
      }
      
      // Check for required elements
      if (!xmlContent.includes('xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"')) {
        issues.push('Missing required XML namespace');
      }
      
      if (!xmlContent.startsWith('<?xml')) {
        issues.push('Missing XML declaration');
      }
      
      // Validate URL format in a sample
      const locMatches = xmlContent.match(/<loc>(.*?)<\/loc>/g);
      if (locMatches) {
        const sampleUrls = locMatches.slice(0, 5);
        sampleUrls.forEach((locTag, index) => {
          const url = locTag.replace(/<\/?loc>/g, '');
          if (url.startsWith('http') && !validateUrl(url.replace(/&amp;/g, '&'))) {
            warnings.push('URL ' + (index + 1) + ' may have formatting issues');
          }
        });
      }
      
      // Generate validation report
      let validationReport = '╔════════════════════════════════════════╗\n';
      validationReport += '║         SITEMAP VALIDATION             ║\n';
      validationReport += '╚════════════════════════════════════════╝\n\n';
      
      if (issues.length === 0) {
        validationReport += '✅ VALIDATION PASSED\n\n';
        validationReport += 'Your sitemap is properly formatted!\n\n';
      } else {
        validationReport += '❌ VALIDATION FAILED\n\n';
        validationReport += 'ISSUES FOUND:\n';
        validationReport += '─'.repeat(40) + '\n';
        issues.forEach((issue, i) => {
          validationReport += (i + 1) + '. ' + issue + '\n';
        });
        validationReport += '\n';
      }
      
      if (warnings.length > 0) {
        validationReport += 'WARNINGS:\n';
        validationReport += '─'.repeat(40) + '\n';
        warnings.forEach((warning, i) => {
          validationReport += (i + 1) + '. ' + warning + '\n';
        });
        validationReport += '\n';
      }
      
      validationReport += 'ANALYSIS:\n';
      validationReport += '─'.repeat(40) + '\n';
      validationReport += 'Total URLs: ' + urls + '\n';
      validationReport += 'Has lastmod dates: ' + (lastmods > 0 ? 'Yes' : 'No') + '\n';
      validationReport += 'File size: ~' + Math.round(xmlContent.length / 1024) + ' KB\n';
      
      if (xmlContent.length > 10485760) { // 10MB
        validationReport += '⚠️ File size exceeds 10MB limit\n';
      }
      
      validationReport += '\nRECOMMENDATIONS:\n';
      validationReport += '─'.repeat(40) + '\n';
      validationReport += '• Test sitemap with Google Search Console\n';
      validationReport += '• Update sitemap regularly when content changes\n';
      validationReport += '• Consider using sitemap index for large sites\n';
      validationReport += '• Monitor crawl stats in webmaster tools';
      
      output.textContent = validationReport;
      updateStats();
      
      if (issues.length === 0) {
        setStatus('Validation passed!', 'success');
      } else {
        setStatus('Validation failed (' + issues.length + ' issues)', 'error');
      }
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      baseUrl.value = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      // Check if it's XML sitemap content
      const isXml = text.includes('<?xml') && text.includes('<urlset');
      const xmlMatch = isXml ? text.match(/<\?xml[\s\S]*?<\/urlset>/) : null;
      
      let filename, content, mimeType;
      if (xmlMatch) {
        filename = 'sitemap.xml';
        content = xmlMatch[0];
        mimeType = 'application/xml';
      } else {
        filename = 'sitemap-report.txt';
        content = text;
        mimeType = 'text/plain';
      }
      
      const blob = new Blob([content], { type: mimeType });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded ' + filename, 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      baseUrl.value = 'https://example.com';
      input.value = '/' + '\n' +
                    '/about' + '\n' +
                    '/products' + '\n' +
                    '/products/widget-1' + '\n' +
                    '/products/widget-2' + '\n' +
                    '/blog' + '\n' +
                    '/blog/post-1' + '\n' +
                    '/blog/post-2' + '\n' +
                    '/contact' + '\n' +
                    '/privacy' + '\n' +
                    '/terms';
      generateSitemap();
    }
    
    // Event listeners
    if (generateBtn) generateBtn.addEventListener('click', generateSitemap);
    if (validateBtn) validateBtn.addEventListener('click', validateSitemap);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Auto-generate on settings change
    [baseUrl, changeFreq, priority].forEach(element => {
      if (element) {
        element.addEventListener('change', () => {
          if (input.value.trim() && output.textContent && !output.textContent.includes('VALIDATION')) {
            generateSitemap();
          }
        });
      }
    });
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          generateSitemap();
        }
      }
    });
    
    // Initial stats
    updateStats();
    setStatus('Ready - Enter URLs to generate sitemap', 'normal');
  })();
</script>