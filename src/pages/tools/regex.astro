---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Regex Tester - Caiatech">
  <CaiatechToolLayout 
    title="Regex Tester" 
    description="Test and debug regular expressions"
    icon=".*">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="regex-tool">
      <!-- Pattern Input Panel -->
      <div class="terminal-panel pattern-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">PATTERN://regex.expression</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-pattern-btn" title="Clear Pattern">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="sample-pattern-btn" title="Load Sample Pattern">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                <polyline points="14,2 14,8 20,8"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">regex</span>
            <span class="prompt-arrow">→</span>
          </div>
          <div class="pattern-input-container">
            <span class="regex-delimiter">/</span>
            <input 
              type="text" 
              id="regex-pattern" 
              class="pattern-input"
              placeholder="Enter your regex pattern here..."
              spellcheck="false"
            >
            <span class="regex-delimiter">/</span>
            <input 
              type="text" 
              id="regex-flags" 
              class="flags-input"
              placeholder="flags"
              spellcheck="false"
            >
          </div>
          <div class="flags-buttons">
            <button class="flag-btn" data-flag="g" title="Global - Find all matches">g</button>
            <button class="flag-btn" data-flag="i" title="Case Insensitive">i</button>
            <button class="flag-btn" data-flag="m" title="Multiline">m</button>
            <button class="flag-btn" data-flag="s" title="Dotall - . matches newlines">s</button>
            <button class="flag-btn" data-flag="u" title="Unicode">u</button>
            <button class="flag-btn" data-flag="y" title="Sticky">y</button>
          </div>
          <div id="pattern-error" class="error-message"></div>
        </div>
      </div>

      <!-- Test Text Panel -->
      <div class="terminal-panel test-text-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://test.string</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="paste-text-btn" title="Paste Text">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
            <button class="terminal-action" id="clear-text-btn" title="Clear Text">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="sample-text-btn" title="Load Sample Text">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                <polyline points="14,2 14,8 20,8"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">test</span>
            <span class="prompt-arrow">→</span>
          </div>
          <textarea 
            id="test-text" 
            class="test-input"
            placeholder="Enter text to test your regex against..."
            spellcheck="false"
          ></textarea>
        </div>
      </div>

      <!-- Results Panel -->
      <div class="terminal-panel results-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">RESULTS://matches</span>
          <div class="terminal-actions">
            <div class="match-stats">
              <span id="match-count">0 matches</span>
            </div>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">highlighted</span>
          </div>
          <div id="highlighted-text" class="highlighted-text">Enter a regex pattern and test text...</div>
          
          <div class="matches-details">
            <div class="terminal-prompt">
              <span class="prompt-symbol">></span>
              <span class="prompt-text">matches</span>
            </div>
            <div id="matches-list" class="matches-list"></div>
          </div>
        </div>
      </div>

      <!-- Quick Reference Panel -->
      <div class="terminal-panel cheat-sheet-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">REFERENCE://regex.cheatsheet</span>
        </div>
        <div class="terminal-body">
          <div class="cheat-sheet-grid">
            <div class="cheat-group">
              <h4>Character Classes</h4>
              <div class="cheat-items">
                <button class="cheat-item" data-pattern="\\d" title="Any digit (0-9)">\d</button>
                <button class="cheat-item" data-pattern="\\w" title="Word character">\w</button>
                <button class="cheat-item" data-pattern="\\s" title="Whitespace">\s</button>
                <button class="cheat-item" data-pattern="." title="Any character">.</button>
              </div>
            </div>
            
            <div class="cheat-group">
              <h4>Quantifiers</h4>
              <div class="cheat-items">
                <button class="cheat-item" data-pattern="*" title="0 or more">*</button>
                <button class="cheat-item" data-pattern="+" title="1 or more">+</button>
                <button class="cheat-item" data-pattern="?" title="0 or 1">?</button>
                <button class="cheat-item" data-pattern="{2,5}" title="Between 2 and 5">&#123;n,m&#125;</button>
              </div>
            </div>
            
            <div class="cheat-group">
              <h4>Anchors</h4>
              <div class="cheat-items">
                <button class="cheat-item" data-pattern="^" title="Start of string">^</button>
                <button class="cheat-item" data-pattern="$" title="End of string">$</button>
                <button class="cheat-item" data-pattern="\\b" title="Word boundary">\b</button>
              </div>
            </div>
            
            <div class="cheat-group">
              <h4>Groups</h4>
              <div class="cheat-items">
                <button class="cheat-item" data-pattern="()" title="Capture group">()</button>
                <button class="cheat-item" data-pattern="(?:)" title="Non-capture group">(?:)</button>
                <button class="cheat-item" data-pattern="[]" title="Character set">[]</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Regex Tester" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .regex-tool {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Regex-specific styles */
  .pattern-input-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .regex-delimiter {
    font-family: var(--font-mono);
    font-size: 1.2rem;
    color: var(--color-accent);
    font-weight: bold;
  }

  .pattern-input {
    flex: 1;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 1rem;
    padding: 0.75rem;
    transition: all 0.3s;
  }

  .pattern-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
  }

  .flags-input {
    width: 60px;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 0.75rem;
    text-align: center;
    transition: all 0.3s;
  }

  .flags-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
  }

  .flags-buttons {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    margin-bottom: 1rem;
  }

  .flag-btn {
    width: 32px;
    height: 32px;
    border: 1px solid rgba(0, 212, 255, 0.3);
    border-radius: 4px;
    background: transparent;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.2s;
  }

  .flag-btn:hover {
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .flag-btn.active {
    background: var(--color-accent);
    color: var(--color-bg);
    border-color: var(--color-accent);
  }

  .test-input {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 1rem;
    width: 100%;
    min-height: 150px;
    resize: vertical;
    transition: all 0.3s;
    line-height: 1.5;
  }

  .test-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .match-stats {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-accent);
    font-weight: 600;
  }

  .highlighted-text {
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 6px;
    padding: 1rem;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    line-height: 1.6;
    white-space: pre-wrap;
    word-wrap: break-word;
    min-height: 100px;
    margin-bottom: 1.5rem;
    color: var(--color-text);
  }

  .match-highlight {
    background: linear-gradient(135deg, rgba(255, 189, 46, 0.8) 0%, rgba(255, 235, 59, 0.8) 100%);
    padding: 0.1rem 0.3rem;
    border-radius: 3px;
    font-weight: bold;
    color: var(--color-bg);
    box-shadow: 0 0 5px rgba(255, 189, 46, 0.5);
  }

  .matches-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    max-height: 300px;
    overflow-y: auto;
  }

  .match-item {
    background: rgba(0, 212, 255, 0.1);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    padding: 0.75rem;
  }

  .match-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .match-index {
    font-weight: 600;
    color: var(--color-accent);
  }

  .match-position {
    color: var(--color-text-secondary);
  }

  .match-value {
    font-family: var(--font-mono);
    background: rgba(0, 0, 0, 0.3);
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid rgba(0, 212, 255, 0.1);
    word-break: break-all;
    color: var(--color-text);
  }

  .cheat-sheet-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 1.5rem;
  }

  .cheat-group h4 {
    margin: 0 0 0.75rem 0;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .cheat-items {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .cheat-item {
    padding: 0.4rem 0.8rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 4px;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text);
    cursor: pointer;
    transition: all 0.2s;
  }

  .cheat-item:hover {
    background: var(--color-accent);
    color: var(--color-bg);
    border-color: var(--color-accent);
    transform: translateY(-1px);
    box-shadow: 0 2px 10px rgba(0, 212, 255, 0.3);
  }

  .error-message {
    padding: 0.75rem;
    background: rgba(255, 95, 87, 0.1);
    color: #ff5f57;
    border: 1px solid rgba(255, 95, 87, 0.3);
    border-radius: 6px;
    display: none;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-top: 1rem;
  }

  .error-message.show {
    display: block;
    animation: shake 0.5s ease-in-out;
  }

  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Empty state */
  .matches-list:empty::after {
    content: 'No matches found';
    display: block;
    text-align: center;
    color: var(--color-text-secondary);
    padding: 2rem;
    font-family: var(--font-mono);
    font-style: italic;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .pattern-input-container {
      flex-wrap: wrap;
      gap: 0.75rem;
    }

    .flags-buttons {
      justify-content: center;
    }

    .cheat-sheet-grid {
      grid-template-columns: 1fr;
    }

    .match-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.25rem;
    }
  }
</style>

<script>
  // Regex Tester - JavaScript Implementation
  const patternInput = document.getElementById('regex-pattern');
  const flagsInput = document.getElementById('regex-flags');
  const testTextInput = document.getElementById('test-text');
  const highlightedText = document.getElementById('highlighted-text');
  const matchesList = document.getElementById('matches-list');
  const matchCount = document.getElementById('match-count');
  const patternError = document.getElementById('pattern-error');
  
  const samplePatterns = [
    { pattern: '\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', text: 'Contact us at john@example.com or support@caiatech.com for help.', description: 'Email validation' },
    { pattern: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b', text: 'Server IPs: 192.168.1.1, 10.0.0.1, and 255.255.255.0', description: 'IP address matching' },
    { pattern: 'https?://[^\\s]+', text: 'Visit https://caiatech.com or http://example.org for more info', description: 'URL matching' },
    { pattern: '\\b\\d{3}-\\d{3}-\\d{4}\\b', text: 'Call us at 555-123-4567 or 800-555-0199', description: 'Phone number' }
  ];
  
  let currentSampleIndex = 0;
  
  function showError(message) {
    patternError.textContent = message;
    patternError.classList.add('show');
  }
  
  function clearError() {
    patternError.textContent = '';
    patternError.classList.remove('show');
  }
  
  function testRegex() {
    const pattern = patternInput.value;
    const flags = flagsInput.value;
    const testText = testTextInput.value;
    
    if (!pattern) {
      highlightedText.textContent = testText || 'Enter a regex pattern and test text...';
      matchesList.innerHTML = '';
      matchCount.textContent = '0 matches';
      clearError();
      return;
    }
    
    try {
      const regex = new RegExp(pattern, flags);
      const matches = [...testText.matchAll(regex)];
      
      // Update match count
      matchCount.textContent = `${matches.length} match${matches.length === 1 ? '' : 'es'}`;
      
      // Highlight matches in text
      if (matches.length > 0) {
        let highlightedContent = testText;
        let offset = 0;
        
        matches.forEach((match) => {
          const start = match.index + offset;
          const end = start + match[0].length;
          const before = highlightedContent.slice(0, start);
          const matchText = highlightedContent.slice(start, end);
          const after = highlightedContent.slice(end);
          
          highlightedContent = before + `<span class="match-highlight">${escapeHtml(matchText)}</span>` + after;
          offset += '<span class="match-highlight"></span>'.length;
        });
        
        highlightedText.innerHTML = highlightedContent;
      } else {
        highlightedText.textContent = testText;
      }
      
      // Display match details
      if (matches.length > 0) {
        const matchItems = matches.map((match, index) => {
          const groups = match.slice(1).map((group, groupIndex) => 
            group !== undefined ? `<div><strong>Group ${groupIndex + 1}:</strong> "${escapeHtml(group)}"</div>` : ''
          ).join('');
          
          return `
            <div class="match-item">
              <div class="match-header">
                <span class="match-index">Match ${index + 1}</span>
                <span class="match-position">Position ${match.index}-${match.index + match[0].length - 1}</span>
              </div>
              <div class="match-value">"${escapeHtml(match[0])}"</div>
              ${groups}
            </div>
          `;
        });
        matchesList.innerHTML = matchItems.join('');
      } else {
        matchesList.innerHTML = '';
      }
      
      clearError();
    } catch (error) {
      showError(`Invalid regex: ${error.message}`);
      highlightedText.textContent = testText;
      matchesList.innerHTML = '';
      matchCount.textContent = '0 matches';
    }
  }
  
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
  
  // Event listeners
  patternInput.addEventListener('input', testRegex);
  flagsInput.addEventListener('input', testRegex);
  testTextInput.addEventListener('input', testRegex);
  
  // Flag buttons
  document.querySelectorAll('.flag-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const flag = e.target.getAttribute('data-flag');
      const currentFlags = flagsInput.value;
      
      if (currentFlags.includes(flag)) {
        flagsInput.value = currentFlags.replace(flag, '');
        btn.classList.remove('active');
      } else {
        flagsInput.value = currentFlags + flag;
        btn.classList.add('active');
      }
      
      testRegex();
    });
  });
  
  // Cheat sheet items
  document.querySelectorAll('.cheat-item').forEach(item => {
    item.addEventListener('click', (e) => {
      const pattern = e.target.getAttribute('data-pattern');
      patternInput.value += pattern;
      testRegex();
      patternInput.focus();
    });
  });
  
  // Action buttons
  document.getElementById('clear-pattern-btn')?.addEventListener('click', () => {
    patternInput.value = '';
    flagsInput.value = '';
    document.querySelectorAll('.flag-btn').forEach(btn => btn.classList.remove('active'));
    testRegex();
  });
  
  document.getElementById('clear-text-btn')?.addEventListener('click', () => {
    testTextInput.value = '';
    testRegex();
  });
  
  document.getElementById('sample-pattern-btn')?.addEventListener('click', () => {
    const sample = samplePatterns[currentSampleIndex];
    patternInput.value = sample.pattern;
    flagsInput.value = 'g';
    document.querySelector('[data-flag="g"]')?.classList.add('active');
    currentSampleIndex = (currentSampleIndex + 1) % samplePatterns.length;
    testRegex();
  });
  
  document.getElementById('sample-text-btn')?.addEventListener('click', () => {
    const sample = samplePatterns[currentSampleIndex > 0 ? currentSampleIndex - 1 : 0];
    testTextInput.value = sample.text;
    testRegex();
  });
  
  document.getElementById('paste-text-btn')?.addEventListener('click', async () => {
    try {
      const text = await navigator.clipboard.readText();
      testTextInput.value = text;
      testRegex();
    } catch (err) {
      console.error('Failed to paste:', err);
    }
  });
  
  // Initialize with sample
  const firstSample = samplePatterns[0];
  patternInput.value = firstSample.pattern;
  testTextInput.value = firstSample.text;
  flagsInput.value = 'g';
  document.querySelector('[data-flag="g"]')?.classList.add('active');
  testRegex();
</script>