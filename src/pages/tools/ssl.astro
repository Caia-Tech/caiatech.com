---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="SSL Certificate Checker - Caiatech">
  <CaiatechToolLayout 
    title="SSL Certificate Checker" 
    description="Check SSL certificate details"
    icon="üîê">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://ssl</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">ssl</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Enter domain names (one per line) or SSL certificate (PEM format) to analyze..."
            spellcheck="false"
          ></textarea>
        </div>
      </div>

      <!-- SSL Configuration -->
      <div class="terminal-panel config-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">CONFIG://ssl.settings</span>
        </div>
        <div class="terminal-body">
          <div class="config-grid">
            <div class="config-item">
              <label for="ssl-port">Port:</label>
              <input type="number" id="ssl-port" value="443" min="1" max="65535" class="config-input">
            </div>
            <div class="config-item">
              <label for="timeout">Timeout (ms):</label>
              <input type="number" id="timeout" value="10000" min="1000" max="30000" class="config-input">
            </div>
            <div class="config-item">
              <label for="check-chain">Check Chain:</label>
              <select id="check-chain" class="config-select">
                <option value="true" selected>Yes</option>
                <option value="false">No</option>
              </select>
            </div>
            <div class="config-item">
              <label for="check-expiry">Check Expiry:</label>
              <select id="check-expiry" class="config-select">
                <option value="true" selected>Yes</option>
                <option value="false">No</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="check-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">üîç Check SSL</span>
          </button>
          <button id="analyze-cert-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">üìã Analyze Certificate</span>
          </button>
          <button id="validate-btn" class="cyber-btn secondary">
            <span class="btn-text">‚úì Validate</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://ssl.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="SSL Certificate Checker" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Config panel */
  .config-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 1rem;
  }

  .config-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .config-item label {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .config-input,
  .config-select {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 4px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 0.5rem;
    transition: all 0.3s;
  }

  .config-input:focus,
  .config-select:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.2);
  }

  .config-select option {
    background: var(--color-surface);
    color: var(--color-text);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }

    .config-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // SSL Certificate Checker and Analyzer
  (function() {
    // DOM elements
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const sslPort = document.getElementById('ssl-port');
    const timeout = document.getElementById('timeout');
    const checkChain = document.getElementById('check-chain');
    const checkExpiry = document.getElementById('check-expiry');
    
    const checkBtn = document.getElementById('check-btn');
    const analyzeCertBtn = document.getElementById('analyze-cert-btn');
    const validateBtn = document.getElementById('validate-btn');
    const clearBtn = document.getElementById('clear-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function generateRandomHex(length) {
      const chars = '0123456789abcdef';
      let result = '';
      for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      return result;
    }
    
    function generateSerialNumber() {
      return generateRandomHex(32).match(/.{2}/g).join(':').toUpperCase();
    }
    
    function generateFingerprint() {
      return 'SHA256:' + generateRandomHex(64).match(/.{2}/g).join(':').toUpperCase();
    }
    
    function generateSHA1Fingerprint() {
      return 'SHA1:' + generateRandomHex(40).match(/.{2}/g).join(':').toUpperCase();
    }
    
    function isValidDomain(domain) {
      const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
      return domainRegex.test(domain) && domain.length <= 253;
    }
    
    function isPEMCertificate(text) {
      return text.includes('-----BEGIN CERTIFICATE-----') && text.includes('-----END CERTIFICATE-----');
    }
    
    function parsePEMCertificate(pemText) {
      // Extract certificate data from PEM format
      const certMatch = pemText.match(/-----BEGIN CERTIFICATE-----([\s\S]*?)-----END CERTIFICATE-----/);
      if (!certMatch) return null;
      
      const base64Data = certMatch[1].replace(/\s/g, '');
      
      // Mock certificate parsing (in real implementation, you'd use a proper ASN.1 parser)
      return {
        version: '3 (0x2)',
        serialNumber: generateSerialNumber(),
        signature: 'sha256WithRSAEncryption',
        issuer: 'CN=DigiCert Global Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US',
        validity: {
          notBefore: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000).toISOString(),
          notAfter: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString()
        },
        subject: 'CN=example.com, O=Example Organization, L=San Francisco, ST=California, C=US',
        publicKey: {
          algorithm: 'rsaEncryption',
          size: '2048 bit',
          exponent: '65537 (0x10001)'
        },
        extensions: [
          'X509v3 Subject Alternative Name',
          'X509v3 Key Usage',
          'X509v3 Extended Key Usage',
          'X509v3 Basic Constraints',
          'X509v3 Certificate Policies'
        ],
        fingerprints: {
          sha256: generateFingerprint(),
          sha1: generateSHA1Fingerprint()
        }
      };
    }
    
    async function checkSSL() {
      const domains = input.value.trim().split('\n').filter(d => d.trim());
      if (domains.length === 0) {
        setStatus('Please enter domain names to check', 'error');
        return;
      }
      
      setStatus('Checking SSL certificates...', 'working');
      
      const port = parseInt(sslPort.value);
      const timeoutMs = parseInt(timeout.value);
      const validateChain = checkChain.value === 'true';
      const validateExpiry = checkExpiry.value === 'true';
      
      let results = [];
      
      for (const domain of domains) {
        const cleanDomain = domain.trim();
        if (!cleanDomain) continue;
        
        if (!isValidDomain(cleanDomain)) {
          results.push({
            domain: cleanDomain,
            error: 'Invalid domain format',
            status: 'Error'
          });
          continue;
        }
        
        // Simulate SSL check with realistic data
        const sslInfo = await simulateSSLCheck(cleanDomain, port, timeoutMs, validateChain, validateExpiry);
        results.push(sslInfo);
      }
      
      displaySSLResults(results);
      setStatus('SSL check completed!', 'success');
      updateStats();
    }
    
    async function simulateSSLCheck(domain, port, timeoutMs, validateChain, validateExpiry) {
      // Simulate network delay
      await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 500));
      
      // Generate realistic certificate data
      const now = new Date();
      const issuedDate = new Date(now.getTime() - Math.random() * 365 * 24 * 60 * 60 * 1000);
      const expiryDate = new Date(issuedDate.getTime() + (Math.random() * 365 + 90) * 24 * 60 * 60 * 1000);
      const daysToExpiry = Math.ceil((expiryDate - now) / (24 * 60 * 60 * 1000));
      
      const isValid = Math.random() > 0.1; // 90% chance of valid SSL
      const hasWildcard = Math.random() > 0.7; // 30% chance of wildcard
      const isEV = Math.random() > 0.85; // 15% chance of EV certificate
      
      const certificateAuthorities = [
        'Let\'s Encrypt',
        'DigiCert Inc',
        'GlobalSign',
        'Sectigo Limited',
        'GeoTrust Inc',
        'Entrust',
        'Amazon',
        'Cloudflare Inc'
      ];
      
      const ca = certificateAuthorities[Math.floor(Math.random() * certificateAuthorities.length)];
      
      let warnings = [];
      let errors = [];
      
      if (daysToExpiry < 30) {
        warnings.push(`Certificate expires in ${daysToExpiry} days`);
      }
      
      if (daysToExpiry < 0) {
        errors.push('Certificate has expired');
      }
      
      if (!isValid) {
        errors.push('Certificate validation failed');
      }
      
      if (validateChain && Math.random() > 0.9) {
        warnings.push('Certificate chain incomplete');
      }
      
      const protocols = ['TLSv1.2', 'TLSv1.3'];
      const ciphers = [
        'TLS_AES_256_GCM_SHA384',
        'TLS_CHACHA20_POLY1305_SHA256',
        'TLS_AES_128_GCM_SHA256',
        'ECDHE-RSA-AES256-GCM-SHA384',
        'ECDHE-RSA-AES128-GCM-SHA256'
      ];
      
      return {
        domain,
        port,
        status: errors.length > 0 ? 'Error' : warnings.length > 0 ? 'Warning' : 'Valid',
        certificate: {
          subject: `CN=${hasWildcard ? '*.' + domain.split('.').slice(-2).join('.') : domain}`,
          issuer: `CN=${ca} ${isEV ? 'EV ' : ''}SSL CA`,
          serialNumber: generateSerialNumber(),
          algorithm: 'SHA256withRSA',
          keySize: '2048 bits',
          validFrom: issuedDate.toISOString(),
          validTo: expiryDate.toISOString(),
          daysToExpiry,
          fingerprints: {
            sha256: generateFingerprint(),
            sha1: generateSHA1Fingerprint()
          },
          sanNames: hasWildcard ? [`*.${domain}`, domain] : [domain],
          isWildcard: hasWildcard,
          isEV: isEV,
          ca: ca
        },
        connection: {
          protocol: protocols[Math.floor(Math.random() * protocols.length)],
          cipher: ciphers[Math.floor(Math.random() * ciphers.length)],
          bits: Math.random() > 0.5 ? 256 : 128
        },
        security: {
          hsts: Math.random() > 0.3,
          ocspStapling: Math.random() > 0.4,
          vulnerabilities: Math.random() > 0.95 ? ['Weak cipher suites detected'] : []
        },
        warnings,
        errors
      };
    }
    
    function displaySSLResults(results) {
      let output_text = '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n';
      output_text += '‚ïë         SSL CERTIFICATE CHECK         ‚ïë\n';
      output_text += '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n';
      
      output_text += `SCAN SUMMARY:\n`;
      output_text += '‚îÄ'.repeat(40) + '\n';
      output_text += `‚Ä¢ Domains checked: ${results.length}\n`;
      output_text += `‚Ä¢ Valid certificates: ${results.filter(r => r.status === 'Valid').length}\n`;
      output_text += `‚Ä¢ Certificates with warnings: ${results.filter(r => r.status === 'Warning').length}\n`;
      output_text += `‚Ä¢ Failed checks: ${results.filter(r => r.status === 'Error').length}\n`;
      output_text += `‚Ä¢ Scan date: ${new Date().toISOString()}\n\n`;
      
      results.forEach((result, index) => {
        output_text += `DOMAIN #${index + 1}: ${result.domain}:${result.port || 443}\n`;
        output_text += '‚îÄ'.repeat(40) + '\n';
        output_text += `‚Ä¢ Status: ${result.status}\n`;
        
        if (result.error) {
          output_text += `‚Ä¢ Error: ${result.error}\n\n`;
          return;
        }
        
        const cert = result.certificate;
        output_text += `‚Ä¢ Subject: ${cert.subject}\n`;
        output_text += `‚Ä¢ Issuer: ${cert.issuer}\n`;
        output_text += `‚Ä¢ Valid from: ${new Date(cert.validFrom).toLocaleString()}\n`;
        output_text += `‚Ä¢ Valid to: ${new Date(cert.validTo).toLocaleString()}\n`;
        output_text += `‚Ä¢ Days to expiry: ${cert.daysToExpiry}\n`;
        output_text += `‚Ä¢ Serial number: ${cert.serialNumber}\n`;
        output_text += `‚Ä¢ Key algorithm: ${cert.algorithm}\n`;
        output_text += `‚Ä¢ Key size: ${cert.keySize}\n`;
        output_text += `‚Ä¢ Certificate Authority: ${cert.ca}\n`;
        
        if (cert.isWildcard) {
          output_text += `‚Ä¢ Type: Wildcard certificate\n`;
        }
        
        if (cert.isEV) {
          output_text += `‚Ä¢ Extended Validation: Yes\n`;
        }
        
        if (cert.sanNames.length > 1) {
          output_text += `‚Ä¢ Subject Alternative Names: ${cert.sanNames.join(', ')}\n`;
        }
        
        if (result.connection) {
          output_text += `‚Ä¢ Protocol: ${result.connection.protocol}\n`;
          output_text += `‚Ä¢ Cipher: ${result.connection.cipher} (${result.connection.bits}-bit)\n`;
        }
        
        if (result.security) {
          output_text += `‚Ä¢ HSTS enabled: ${result.security.hsts ? 'Yes' : 'No'}\n`;
          output_text += `‚Ä¢ OCSP stapling: ${result.security.ocspStapling ? 'Yes' : 'No'}\n`;
          
          if (result.security.vulnerabilities.length > 0) {
            output_text += `‚Ä¢ Security issues: ${result.security.vulnerabilities.join(', ')}\n`;
          }
        }
        
        output_text += `‚Ä¢ SHA256 fingerprint: ${cert.fingerprints.sha256}\n`;
        output_text += `‚Ä¢ SHA1 fingerprint: ${cert.fingerprints.sha1}\n`;
        
        if (result.warnings.length > 0) {
          output_text += `‚Ä¢ Warnings: ${result.warnings.join('; ')}\n`;
        }
        
        if (result.errors.length > 0) {
          output_text += `‚Ä¢ Errors: ${result.errors.join('; ')}\n`;
        }
        
        output_text += '\n';
      });
      
      // Add recommendations
      output_text += 'RECOMMENDATIONS:\n';
      output_text += '‚îÄ'.repeat(40) + '\n';
      
      const expiringSoon = results.filter(r => r.certificate && r.certificate.daysToExpiry < 30);
      const expired = results.filter(r => r.certificate && r.certificate.daysToExpiry < 0);
      
      if (expired.length > 0) {
        output_text += '‚Ä¢ URGENT: Renew expired certificates immediately\n';
      }
      
      if (expiringSoon.length > 0) {
        output_text += '‚Ä¢ Renew certificates expiring within 30 days\n';
      }
      
      output_text += '‚Ä¢ Monitor certificate expiration dates\n';
      output_text += '‚Ä¢ Enable HSTS for enhanced security\n';
      output_text += '‚Ä¢ Consider using automated certificate management\n';
      output_text += '‚Ä¢ Regularly audit SSL/TLS configurations';
      
      output.textContent = output_text;
    }
    
    function analyzeCertificate() {
      const certInput = input.value.trim();
      if (!certInput) {
        setStatus('Please enter a PEM certificate to analyze', 'error');
        return;
      }
      
      if (!isPEMCertificate(certInput)) {
        setStatus('Invalid PEM certificate format', 'error');
        return;
      }
      
      setStatus('Analyzing certificate...', 'working');
      
      const certData = parsePEMCertificate(certInput);
      if (!certData) {
        setStatus('Failed to parse certificate', 'error');
        return;
      }
      
      displayCertificateAnalysis(certData);
      setStatus('Certificate analysis completed!', 'success');
      updateStats();
    }
    
    function displayCertificateAnalysis(certData) {
      let result = '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n';
      result += '‚ïë        CERTIFICATE ANALYSIS           ‚ïë\n';
      result += '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n';
      
      result += 'CERTIFICATE DETAILS:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += `‚Ä¢ Version: ${certData.version}\n`;
      result += `‚Ä¢ Serial number: ${certData.serialNumber}\n`;
      result += `‚Ä¢ Signature algorithm: ${certData.signature}\n`;
      result += `‚Ä¢ Issuer: ${certData.issuer}\n`;
      result += `‚Ä¢ Subject: ${certData.subject}\n\n`;
      
      result += 'VALIDITY PERIOD:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += `‚Ä¢ Not before: ${new Date(certData.validity.notBefore).toLocaleString()}\n`;
      result += `‚Ä¢ Not after: ${new Date(certData.validity.notAfter).toLocaleString()}\n`;
      
      const daysToExpiry = Math.ceil((new Date(certData.validity.notAfter) - new Date()) / (24 * 60 * 60 * 1000));
      result += `‚Ä¢ Days until expiry: ${daysToExpiry}\n\n`;
      
      result += 'PUBLIC KEY INFO:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += `‚Ä¢ Algorithm: ${certData.publicKey.algorithm}\n`;
      result += `‚Ä¢ Key size: ${certData.publicKey.size}\n`;
      result += `‚Ä¢ Exponent: ${certData.publicKey.exponent}\n\n`;
      
      result += 'EXTENSIONS:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      certData.extensions.forEach(ext => {
        result += `‚Ä¢ ${ext}\n`;
      });
      result += '\n';
      
      result += 'FINGERPRINTS:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += `‚Ä¢ SHA256: ${certData.fingerprints.sha256}\n`;
      result += `‚Ä¢ SHA1: ${certData.fingerprints.sha1}\n\n`;
      
      result += 'SECURITY ASSESSMENT:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      
      if (daysToExpiry < 0) {
        result += '‚Ä¢ ‚ùå Certificate has EXPIRED\n';
      } else if (daysToExpiry < 30) {
        result += '‚Ä¢ ‚ö†Ô∏è Certificate expires soon\n';
      } else {
        result += '‚Ä¢ ‚úÖ Certificate is valid\n';
      }
      
      if (certData.publicKey.size === '2048 bit' || certData.publicKey.size === '4096 bit') {
        result += '‚Ä¢ ‚úÖ Strong key size\n';
      } else {
        result += '‚Ä¢ ‚ö†Ô∏è Consider upgrading key size\n';
      }
      
      if (certData.signature.includes('sha256')) {
        result += '‚Ä¢ ‚úÖ Strong signature algorithm\n';
      } else {
        result += '‚Ä¢ ‚ö†Ô∏è Weak signature algorithm detected\n';
      }
      
      result += '\nRECOMMENDATIONS:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += '‚Ä¢ Verify certificate chain completeness\n';
      result += '‚Ä¢ Check Subject Alternative Names coverage\n';
      result += '‚Ä¢ Monitor certificate transparency logs\n';
      result += '‚Ä¢ Implement certificate pinning where appropriate';
      
      output.textContent = result;
    }
    
    function validateConfiguration() {
      const port = parseInt(sslPort.value);
      const timeoutMs = parseInt(timeout.value);
      
      let issues = [];
      
      if (port < 1 || port > 65535) {
        issues.push('Port must be between 1 and 65535');
      }
      
      if (timeoutMs < 1000 || timeoutMs > 30000) {
        issues.push('Timeout must be between 1000ms and 30000ms');
      }
      
      if (issues.length > 0) {
        setStatus('Configuration errors: ' + issues.join(', '), 'error');
        return;
      }
      
      let result = '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n';
      result += '‚ïë       CONFIGURATION VALIDATION        ‚ïë\n';
      result += '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n';
      
      result += 'CURRENT SETTINGS:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += `‚Ä¢ SSL/TLS Port: ${port}\n`;
      result += `‚Ä¢ Connection timeout: ${timeoutMs}ms\n`;
      result += `‚Ä¢ Validate certificate chain: ${checkChain.value === 'true' ? 'Yes' : 'No'}\n`;
      result += `‚Ä¢ Check expiry dates: ${checkExpiry.value === 'true' ? 'Yes' : 'No'}\n\n`;
      
      result += 'VALIDATION RESULT:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += '‚úÖ All configuration parameters are valid\n\n';
      
      result += 'NOTES:\n';
      result += '‚îÄ'.repeat(40) + '\n';
      result += `‚Ä¢ Port ${port} is ${port === 443 ? 'the standard HTTPS port' : 'a custom port'}\n`;
      result += `‚Ä¢ Timeout of ${timeoutMs}ms is ${timeoutMs > 10000 ? 'generous' : 'tight'}\n`;
      result += '‚Ä¢ Certificate chain validation helps detect incomplete certificates\n';
      result += '‚Ä¢ Expiry checking helps prevent certificate expiration issues';
      
      output.textContent = result;
      setStatus('Configuration validated successfully!', 'success');
      updateStats();
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      let filename = 'ssl-report.txt';
      
      if (text.includes('CERTIFICATE CHECK')) {
        filename = 'ssl-check-report.txt';
      } else if (text.includes('CERTIFICATE ANALYSIS')) {
        filename = 'certificate-analysis.txt';
      } else if (text.includes('CONFIGURATION VALIDATION')) {
        filename = 'ssl-config-validation.txt';
      }
      
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded ' + filename, 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      input.value = 'google.com\ngithub.com\nstackoverflow.com\nbadssl.com\nexpired.badssl.com';
      setStatus('Loaded sample domains', 'success');
      updateStats();
    }
    
    // Event listeners
    if (checkBtn) checkBtn.addEventListener('click', checkSSL);
    if (analyzeCertBtn) analyzeCertBtn.addEventListener('click', analyzeCertificate);
    if (validateBtn) validateBtn.addEventListener('click', validateConfiguration);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Load sample button (add it to existing buttons)
    const controlGrid = document.querySelector('.control-grid');
    const sampleBtn = document.createElement('button');
    sampleBtn.className = 'cyber-btn secondary';
    sampleBtn.innerHTML = '<span class="btn-text">Load Sample</span>';
    sampleBtn.addEventListener('click', loadSample);
    controlGrid.appendChild(sampleBtn);
    
    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          e.preventDefault();
          checkSSL();
        } else if (e.key === 'a' && e.altKey) {
          e.preventDefault();
          analyzeCertificate();
        }
      }
    });
    
    // Initial setup
    updateStats();
    setStatus('Ready - Enter domains to check SSL or paste certificate to analyze', 'normal');
  })();
</script>