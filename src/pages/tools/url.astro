---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="URL Validator & Analyzer - Caiatech">
  <CaiatechToolLayout 
    title="URL Validator & Analyzer" 
    description="Validate, analyze and decode URLs"
    icon="🔗">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://url</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">url</span>
            <span class="prompt-arrow">→</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Enter URLs to validate and analyze (one per line)..."
            spellcheck="false"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="process-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">🔗 Validate URLs</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">•</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://url.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="URL Validator & Analyzer" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // URL Validator & Analyzer
  (function() {
    // DOM elements
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const processBtn = document.getElementById('process-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    // URL Analysis Functions
    function analyzeURL(urlString) {
      const analysis = {
        originalUrl: urlString,
        isValid: false,
        validationErrors: [],
        components: {},
        security: {
          isHttps: false,
          isHttp: false,
          hasPort: false,
          hasSensitiveInfo: false,
          riskLevel: 'Low',
          warnings: []
        },
        encoding: {
          encoded: '',
          decoded: '',
          hasEncodedChars: false,
          encodingIssues: []
        },
        metadata: {
          length: urlString.length,
          domainLevels: 0,
          pathSegments: 0,
          queryParams: 0,
          hasFragment: false
        }
      };
      
      try {
        // Try to create a URL object for basic validation
        const url = new URL(urlString);
        analysis.isValid = true;
        
        // Extract components
        analysis.components = {
          protocol: url.protocol,
          hostname: url.hostname,
          port: url.port || (url.protocol === 'https:' ? '443' : url.protocol === 'http:' ? '80' : ''),
          pathname: url.pathname,
          search: url.search,
          hash: url.hash,
          origin: url.origin
        };
        
        // Security analysis
        analysis.security.isHttps = url.protocol === 'https:';
        analysis.security.isHttp = url.protocol === 'http:';
        analysis.security.hasPort = url.port !== '';
        
        // Check for sensitive information
        const sensitivePatterns = [
          /password/i, /pwd/i, /pass/i, /token/i, /key/i, /secret/i,
          /api_key/i, /auth/i, /credential/i, /login/i
        ];
        analysis.security.hasSensitiveInfo = sensitivePatterns.some(pattern => 
          pattern.test(urlString));
        
        // Risk assessment
        if (!analysis.security.isHttps && analysis.security.isHttp) {
          analysis.security.warnings.push('Using insecure HTTP protocol');
          analysis.security.riskLevel = 'Medium';
        }
        
        if (analysis.security.hasSensitiveInfo) {
          analysis.security.warnings.push('URL may contain sensitive information');
          analysis.security.riskLevel = 'High';
        }
        
        if (url.hostname.includes('localhost') || url.hostname.startsWith('127.') || url.hostname.startsWith('192.168.') || url.hostname.startsWith('10.')) {
          analysis.security.warnings.push('Local or private network URL detected');
        }
        
        // Encoding analysis
        try {
          analysis.encoding.encoded = encodeURIComponent(urlString);
          analysis.encoding.decoded = decodeURIComponent(urlString);
          analysis.encoding.hasEncodedChars = urlString !== analysis.encoding.decoded;
          
          if (analysis.encoding.hasEncodedChars) {
            analysis.encoding.encodingIssues.push('URL contains encoded characters');
          }
        } catch (e) {
          analysis.encoding.encodingIssues.push('URL encoding/decoding error: ' + e.message);
        }
        
        // Metadata
        analysis.metadata.length = urlString.length;
        analysis.metadata.domainLevels = url.hostname.split('.').length;
        analysis.metadata.pathSegments = url.pathname.split('/').filter(seg => seg).length;
        analysis.metadata.hasFragment = url.hash !== '';
        
        if (url.search) {
          const searchParams = new URLSearchParams(url.search);
          analysis.metadata.queryParams = Array.from(searchParams.keys()).length;
        }
        
        if (analysis.security.warnings.length === 0) {
          analysis.security.warnings.push('No security issues detected');
        }
        
      } catch (error) {
        analysis.isValid = false;
        analysis.validationErrors.push(error.message);
        
        // Try to extract some information even from invalid URLs
        const protocolMatch = urlString.match(/^([a-zA-Z][a-zA-Z0-9+.-]*):/);
        if (protocolMatch) {
          analysis.components.protocol = protocolMatch[1] + ':';
        }
        
        analysis.metadata.length = urlString.length;
      }
      
      return analysis;
    }
    
    function validateDomain(hostname) {
      if (!hostname) return { isValid: false, issues: ['Empty hostname'] };
      
      const issues = [];
      let isValid = true;
      
      // Basic domain validation
      const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
      
      if (!domainRegex.test(hostname)) {
        isValid = false;
        issues.push('Invalid domain format');
      }
      
      if (hostname.length > 253) {
        isValid = false;
        issues.push('Domain name too long (max 253 characters)');
      }
      
      const labels = hostname.split('.');
      for (const label of labels) {
        if (label.length > 63) {
          isValid = false;
          issues.push(`Label '${label}' too long (max 63 characters)`);
        }
      }
      
      return { isValid, issues };
    }
    
    function processInput() {
      const text = input.value.trim();
      if (!text) {
        setStatus('Please enter URLs to validate', 'error');
        return;
      }
      
      setStatus('Validating URLs...', 'working');
      
      try {
        const urls = text.split('\n')
          .map(line => line.trim())
          .filter(line => line);
        
        if (urls.length === 0) {
          setStatus('No URLs found', 'error');
          return;
        }
        
        const analyses = urls.map(url => analyzeURL(url));
        const result = formatAnalysisResults(analyses);
        
        output.textContent = result;
        setStatus('URL validation complete!', 'success');
        updateStats();
        
      } catch (error) {
        setStatus('Validation error: ' + error.message, 'error');
        output.textContent = 'Error: ' + error.message;
        updateStats();
      }
    }
    
    function formatAnalysisResults(analyses) {
      let result = '╔════════════════════════════════════════╗\n';
      result += '║         URL VALIDATION RESULTS         ║\n';
      result += '╚════════════════════════════════════════╝\n\n';
      
      // Summary
      const validCount = analyses.filter(a => a.isValid).length;
      const invalidCount = analyses.length - validCount;
      const riskCounts = {
        'Low': analyses.filter(a => a.security.riskLevel === 'Low').length,
        'Medium': analyses.filter(a => a.security.riskLevel === 'Medium').length,
        'High': analyses.filter(a => a.security.riskLevel === 'High').length
      };
      
      result += 'VALIDATION SUMMARY:\n';
      result += '─'.repeat(40) + '\n';
      result += '• Total URLs: ' + analyses.length + '\n';
      result += '• Valid URLs: ' + validCount + ' ✅\n';
      result += '• Invalid URLs: ' + invalidCount + ' ❌\n';
      result += '• Risk Assessment:\n';
      result += '  - Low Risk: ' + riskCounts.Low + ' 🟢\n';
      result += '  - Medium Risk: ' + riskCounts.Medium + ' 🟡\n';
      result += '  - High Risk: ' + riskCounts.High + ' 🔴\n\n';
      
      // Individual URL analysis
      analyses.forEach((analysis, index) => {
        result += 'URL #' + (index + 1) + ':\n';
        result += '─'.repeat(20) + '\n';
        result += '• Original: ' + analysis.originalUrl + '\n';
        result += '• Status: ' + (analysis.isValid ? 'Valid ✅' : 'Invalid ❌') + '\n';
        
        if (!analysis.isValid) {
          result += '• Errors: ' + analysis.validationErrors.join(', ') + '\n';
        }
        
        if (analysis.isValid) {
          result += '• Protocol: ' + analysis.components.protocol + '\n';
          result += '• Domain: ' + analysis.components.hostname + '\n';
          result += '• Port: ' + (analysis.components.port || 'default') + '\n';
          result += '• Path: ' + (analysis.components.pathname || '/') + '\n';
          
          if (analysis.components.search) {
            result += '• Query: ' + analysis.components.search + '\n';
          }
          
          if (analysis.components.hash) {
            result += '• Fragment: ' + analysis.components.hash + '\n';
          }
        }
        
        // Security analysis
        result += '• Security Risk: ' + analysis.security.riskLevel;
        if (analysis.security.riskLevel === 'High') result += ' 🔴';
        else if (analysis.security.riskLevel === 'Medium') result += ' 🟡';
        else result += ' 🟢';
        result += '\n';
        
        result += '• Security Notes:\n';
        analysis.security.warnings.forEach(warning => {
          result += '  - ' + warning + '\n';
        });
        
        // Encoding information
        if (analysis.encoding.hasEncodedChars) {
          result += '• Encoding: Contains encoded characters\n';
          result += '  - Decoded: ' + analysis.encoding.decoded + '\n';
        }
        
        // Metadata
        result += '• Length: ' + analysis.metadata.length + ' characters\n';
        result += '• Domain Levels: ' + analysis.metadata.domainLevels + '\n';
        result += '• Path Segments: ' + analysis.metadata.pathSegments + '\n';
        result += '• Query Parameters: ' + analysis.metadata.queryParams + '\n';
        result += '• Has Fragment: ' + (analysis.metadata.hasFragment ? 'Yes' : 'No') + '\n';
        
        result += '\n';
      });
      
      // Additional recommendations
      result += 'RECOMMENDATIONS:\n';
      result += '─'.repeat(40) + '\n';
      result += '• Use HTTPS for all URLs when possible\n';
      result += '• Avoid putting sensitive information in URLs\n';
      result += '• Keep URLs under 2000 characters for compatibility\n';
      result += '• Use proper URL encoding for special characters\n';
      result += '• Validate URLs server-side in production applications\n\n';
      
      result += 'COMMON URL ISSUES:\n';
      result += '─'.repeat(40) + '\n';
      result += '• Missing protocol (http:// or https://)\n';
      result += '• Invalid characters in domain names\n';
      result += '• Unencoded spaces and special characters\n';
      result += '• Malformed query parameters\n';
      result += '• URLs that are too long for some browsers';
      
      return result;
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'url-validation-report.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded validation report', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      const samples = [
        'https://example.com/search?q=hello+world&lang=en',
        'http://insecure-site.com/login?password=123',
        'https://api.example.com/v1/users/123',
        'ftp://files.example.com/document.pdf',
        'https://sub.domain.example.org:8080/path/to/resource?param=value#section',
        'mailto:user@example.com',
        'https://localhost:3000/dev/test',
        'https://very-long-domain-name-that-might-cause-issues.example.com/extremely/long/path/with/many/segments/that/could/potentially/exceed/url/length/limits',
        'https://example.com/path with spaces/file.html',
        'https://user:pass@secure.example.com/private/data'
      ];
      
      // Select a few random samples
      const selectedSamples = [];
      const numSamples = Math.min(4, samples.length);
      const usedIndices = new Set();
      
      while (selectedSamples.length < numSamples) {
        const randomIndex = Math.floor(Math.random() * samples.length);
        if (!usedIndices.has(randomIndex)) {
          usedIndices.add(randomIndex);
          selectedSamples.push(samples[randomIndex]);
        }
      }
      
      input.value = selectedSamples.join('\n');
      processInput();
    }
    
    // Event listeners
    if (processBtn) processBtn.addEventListener('click', processInput);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          processInput();
        }
      }
    });
    
    // Initial stats
    updateStats();
    setStatus('Ready - Enter URLs to validate and analyze', 'normal');
  })();
</script>
</script>