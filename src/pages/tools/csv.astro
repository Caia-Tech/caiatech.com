---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="CSV to JSON Converter - Caiatech">
  <CaiatechToolLayout 
    title="CSV ‚Üî JSON Converter" 
    description="Convert between CSV and JSON formats with flexible options"
    icon="CSV">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Mode selector -->
      <div class="mode-selector">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">MODE://conversion.type</span>
        </div>
        <div class="mode-container">
          <h3 class="mode-title">üîÑ CONVERSION MODE</h3>
          <div class="mode-options">
            <label class="radio-option">
              <input type="radio" name="mode" value="csv-to-json" checked>
              <span class="radio-custom"></span>
              <span class="radio-label">CSV ‚Üí JSON</span>
            </label>
            <label class="radio-option">
              <input type="radio" name="mode" value="json-to-csv">
              <span class="radio-custom"></span>
              <span class="radio-label">JSON ‚Üí CSV</span>
            </label>
          </div>
        </div>
      </div>

      <!-- CSV Options -->
      <div class="options-panel" id="csv-options">
        <h3 class="options-title">‚öôÔ∏è CSV OPTIONS</h3>
        <div class="options-grid">
          <div class="option-group">
            <label>Delimiter</label>
            <select id="delimiter">
              <option value="," selected>Comma (,)</option>
              <option value=";">Semicolon (;)</option>
              <option value="\t">Tab</option>
              <option value="|">Pipe (|)</option>
            </select>
          </div>
          <div class="option-group">
            <label>Quote Character</label>
            <select id="quote-char">
              <option value='"' selected>Double Quote (")</option>
              <option value="'">Single Quote (')</option>
            </select>
          </div>
          <div class="option-group checkbox-group">
            <label class="checkbox-option">
              <input type="checkbox" id="has-header" checked>
              <span class="checkbox-custom"></span>
              <span>First row is header</span>
            </label>
            <label class="checkbox-option">
              <input type="checkbox" id="trim-whitespace" checked>
              <span class="checkbox-custom"></span>
              <span>Trim whitespace</span>
            </label>
          </div>
        </div>
      </div>
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title" id="input-title">INPUT://csv</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">csv</span>
            <span class="prompt-arrow">‚Üí</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Paste your CSV data here...\nname,age,city\nJohn,25,New York\nJane,30,Los Angeles"
            spellcheck="false"
            rows="10"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="process-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">Process</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">‚Ä¢</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title" id="output-title">OUTPUT://json</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="CSV ‚Üî JSON Converter" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Mode selector */
  .mode-selector {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
  }

  .mode-container {
    padding: 1rem;
  }

  .mode-title {
    margin: 0 0 1rem 0;
    font-size: 0.9rem;
    color: var(--color-accent);
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .mode-options {
    display: flex;
    gap: 2rem;
  }

  .radio-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-size: 0.9rem;
    color: var(--color-text-secondary);
  }

  .radio-option input[type="radio"] {
    display: none;
  }

  .radio-custom {
    width: 18px;
    height: 18px;
    border: 2px solid rgba(0, 212, 255, 0.3);
    border-radius: 50%;
    position: relative;
    transition: all 0.3s;
  }

  .radio-option input[type="radio"]:checked + .radio-custom {
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
  }

  .radio-option input[type="radio"]:checked + .radio-custom::after {
    content: '';
    position: absolute;
    top: 4px;
    left: 4px;
    width: 6px;
    height: 6px;
    background: var(--color-accent);
    border-radius: 50%;
    box-shadow: 0 0 10px var(--color-accent);
  }

  .radio-label {
    font-family: var(--font-mono);
  }

  /* Options panel */
  .options-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    padding: 1rem;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
  }

  .options-title {
    margin: 0 0 1rem 0;
    font-size: 0.9rem;
    color: var(--color-accent);
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .options-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .option-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .option-group label {
    font-size: 0.85rem;
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
  }

  .option-group select {
    padding: 0.5rem;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 6px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.3s;
  }

  .option-group select:hover,
  .option-group select:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.2);
  }

  .checkbox-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .checkbox-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .checkbox-option input[type="checkbox"] {
    display: none;
  }

  .checkbox-custom {
    width: 16px;
    height: 16px;
    border: 2px solid rgba(0, 212, 255, 0.3);
    border-radius: 3px;
    position: relative;
    transition: all 0.3s;
    flex-shrink: 0;
  }

  .checkbox-option input[type="checkbox"]:checked + .checkbox-custom {
    background: var(--color-accent);
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
  }

  .checkbox-option input[type="checkbox"]:checked + .checkbox-custom::after {
    content: '‚úì';
    position: absolute;
    top: -2px;
    left: 2px;
    color: var(--color-background);
    font-size: 12px;
    font-weight: bold;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .mode-options {
      flex-direction: column;
      gap: 1rem;
    }
    
    .options-grid {
      grid-template-columns: 1fr;
    }
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // CSV ‚Üî JSON Converter - Complete Implementation
  (function() {
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    const inputTitle = document.getElementById('input-title');
    const outputTitle = document.getElementById('output-title');
    
    const processBtn = document.getElementById('process-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    // CSV parsing functions
    function parseCSV(csvString, delimiter = ',', quoteChar = '"', hasHeader = true, trimWhitespace = true) {
      const lines = csvString.trim().split('\n');
      const result = [];
      
      if (lines.length === 0) return result;
      
      // Parse header if exists
      let headers = null;
      let startIndex = 0;
      
      if (hasHeader) {
        headers = parseCSVLine(lines[0], delimiter, quoteChar, trimWhitespace);
        startIndex = 1;
      }
      
      // Parse data rows
      for (let i = startIndex; i < lines.length; i++) {
        const row = parseCSVLine(lines[i], delimiter, quoteChar, trimWhitespace);
        
        if (headers) {
          // Create object with headers as keys
          const obj = {};
          headers.forEach((header, index) => {
            obj[header] = row[index] || '';
          });
          result.push(obj);
        } else {
          // Return as array
          result.push(row);
        }
      }
      
      return result;
    }
    
    function parseCSVLine(line, delimiter, quoteChar, trimWhitespace) {
      const row = [];
      let current = '';
      let inQuotes = false;
      let i = 0;
      
      while (i < line.length) {
        const char = line[i];
        
        if (char === quoteChar) {
          if (inQuotes && line[i + 1] === quoteChar) {
            // Escaped quote
            current += quoteChar;
            i += 2;
          } else {
            // Toggle quote state
            inQuotes = !inQuotes;
            i++;
          }
        } else if (char === delimiter && !inQuotes) {
          // Field separator
          row.push(trimWhitespace ? current.trim() : current);
          current = '';
          i++;
        } else {
          current += char;
          i++;
        }
      }
      
      // Add final field
      row.push(trimWhitespace ? current.trim() : current);
      return row;
    }
    
    function jsonToCSV(jsonData, delimiter = ',', quoteChar = '"') {
      if (!Array.isArray(jsonData) || jsonData.length === 0) {
        throw new Error('Input must be a non-empty array');
      }
      
      // Get headers from first object
      const headers = Object.keys(jsonData[0]);
      const rows = [];
      
      // Add header row
      rows.push(headers.map(h => escapeCSVField(h, delimiter, quoteChar)).join(delimiter));
      
      // Add data rows
      jsonData.forEach(obj => {
        const row = headers.map(header => {
          const value = obj[header];
          return escapeCSVField(value !== undefined ? String(value) : '', delimiter, quoteChar);
        });
        rows.push(row.join(delimiter));
      });
      
      return rows.join('\n');
    }
    
    function escapeCSVField(field, delimiter, quoteChar) {
      // Quote field if it contains delimiter, quote char, or newline
      if (field.includes(delimiter) || field.includes(quoteChar) || field.includes('\n')) {
        return quoteChar + field.replace(new RegExp(quoteChar, 'g'), quoteChar + quoteChar) + quoteChar;
      }
      return field;
    }
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function processInput() {
      const text = input.value.trim();
      if (!text) {
        setStatus('Please enter some input', 'error');
        return;
      }
      
      const mode = document.querySelector('input[name="mode"]:checked').value;
      const delimiter = document.getElementById('delimiter').value === '\\t' ? '\t' : document.getElementById('delimiter').value;
      const quoteChar = document.getElementById('quote-char').value;
      const hasHeader = document.getElementById('has-header').checked;
      const trimWhitespace = document.getElementById('trim-whitespace').checked;
      
      try {
        let result;
        
        if (mode === 'csv-to-json') {
          // Parse CSV to JSON
          result = parseCSV(text, delimiter, quoteChar, hasHeader, trimWhitespace);
          output.textContent = JSON.stringify(result, null, 2);
          setStatus('CSV converted to JSON', 'success');
        } else {
          // Parse JSON to CSV
          const jsonData = JSON.parse(text);
          result = jsonToCSV(jsonData, delimiter, quoteChar);
          output.textContent = result;
          setStatus('JSON converted to CSV', 'success');
        }
        
      } catch (error) {
        setStatus('Error: ' + error.message, 'error');
        output.textContent = '';
      }
      
      updateStats();
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const mode = document.querySelector('input[name="mode"]:checked').value;
      const extension = mode === 'csv-to-json' ? '.json' : '.csv';
      const mimeType = mode === 'csv-to-json' ? 'application/json' : 'text/csv';
      
      const blob = new Blob([text], { type: mimeType });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'converted-data' + extension;
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      const mode = document.querySelector('input[name="mode"]:checked').value;
      
      if (mode === 'csv-to-json') {
        input.value = `name,age,department,salary,start_date
John Doe,28,Engineering,75000,2022-01-15
Jane Smith,32,Marketing,65000,2021-03-20
Mike Johnson,25,Engineering,68000,2023-02-10
Sarah Wilson,29,Sales,58000,2022-07-01
David Brown,35,Management,85000,2020-05-15`;
      } else {
        input.value = `[
  {
    "name": "John Doe",
    "age": 28,
    "department": "Engineering",
    "salary": 75000,
    "start_date": "2022-01-15"
  },
  {
    "name": "Jane Smith",
    "age": 32,
    "department": "Marketing",
    "salary": 65000,
    "start_date": "2021-03-20"
  },
  {
    "name": "Mike Johnson",
    "age": 25,
    "department": "Engineering",
    "salary": 68000,
    "start_date": "2023-02-10"
  }
]`;
      }
      
      processInput();
    }
    
    function updateUI() {
      const mode = document.querySelector('input[name="mode"]:checked').value;
      
      if (mode === 'csv-to-json') {
        inputTitle.textContent = 'INPUT://csv';
        outputTitle.textContent = 'OUTPUT://json';
        input.placeholder = 'Paste your CSV data here...\nname,age,city\nJohn,25,New York\nJane,30,Los Angeles';
      } else {
        inputTitle.textContent = 'INPUT://json';
        outputTitle.textContent = 'OUTPUT://csv';
        input.placeholder = 'Paste your JSON array here...\n[\n  {"name": "John", "age": 25},\n  {"name": "Jane", "age": 30}\n]';
      }
    }
    
    // Event listeners
    processBtn.addEventListener('click', processInput);
    clearBtn.addEventListener('click', clearAll);
    clearInputBtn.addEventListener('click', clearInput);
    sampleBtn.addEventListener('click', loadSample);
    copyBtn.addEventListener('click', copyOutput);
    copyOutputBtn.addEventListener('click', copyOutput);
    downloadBtn.addEventListener('click', downloadOutput);
    pasteBtn.addEventListener('click', pasteInput);
    
    // Mode change listener
    document.querySelectorAll('input[name="mode"]').forEach(radio => {
      radio.addEventListener('change', () => {
        updateUI();
        output.textContent = '';
        updateStats();
      });
    });
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          processInput();
        }
      }
    });
    
    // Initial setup
    updateUI();
    updateStats();
  })();
</script>