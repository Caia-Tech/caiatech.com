---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Base64 Encoder/Decoder - Caiatech">
  <CaiatechToolLayout 
    title="Base64 Encoder/Decoder" 
    description="Encode and decode Base64 strings"
    icon="b64">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="base64-tool">
      <div class="tool-grid">
        <!-- Input Panel -->
        <div class="terminal-panel input-panel">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">INPUT://base64</span>
            <div class="terminal-actions">
              <select id="mode-select" class="mode-select">
                <option value="encode">Encode</option>
                <option value="decode">Decode</option>
              </select>
              <button class="terminal-action" id="paste-btn" title="Paste">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                  <rect x="8" y="2" width="8" height="4" rx="1"/>
                </svg>
              </button>
              <button class="terminal-action" id="clear-btn" title="Clear">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <textarea 
              id="text-input" 
              class="terminal-input"
              placeholder="Enter text to encode/decode..."
              spellcheck="false"
            ></textarea>
            <div id="error-message" class="error-message"></div>
          </div>
        </div>

        <!-- Output Panel -->
        <div class="terminal-panel output-panel">
          <div class="terminal-header">
            <div class="terminal-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <span class="terminal-title">OUTPUT://result</span>
            <div class="terminal-actions">
              <label class="checkbox-label">
                <input type="checkbox" id="url-safe">
                URL Safe
              </label>
              <button class="terminal-action" id="copy-btn" title="Copy">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2"/>
                  <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
                </svg>
              </button>
              <button class="terminal-action" id="download-btn" title="Download">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                  <polyline points="7 10 12 15 17 10"/>
                  <line x1="12" y1="15" x2="12" y2="3"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="terminal-body">
            <textarea 
              id="text-output" 
              class="terminal-output"
              readonly
              placeholder="Result will appear here..."
              spellcheck="false"
            ></textarea>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Base64 Encoder/Decoder" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .base64-tool {
    width: 100%;
  }

  .tool-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
    min-height: 500px;
  }

  @media (max-width: 768px) {
    .tool-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
    align-items: center;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    height: calc(100% - 60px);
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    flex: 1;
    resize: none;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Mode select and controls */
  .mode-select {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.3);
    border-radius: 4px;
    color: var(--color-text);
    padding: 0.25rem 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    margin-right: 0.5rem;
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text-secondary);
    margin-right: 0.5rem;
  }

  .checkbox-label input[type="checkbox"] {
    accent-color: var(--color-accent);
  }

  .error-message {
    color: #ff5f57;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: rgba(255, 95, 87, 0.1);
    border: 1px solid rgba(255, 95, 87, 0.3);
    border-radius: 4px;
    display: none;
  }

  .error-message.show {
    display: block;
  }
</style>

<script>
  // Caiatech Base64 Encoder/Decoder Tool - JavaScript Implementation
  const textInput = document.getElementById('text-input');
  const textOutput = document.getElementById('text-output');
  const modeSelect = document.getElementById('mode-select');
  const urlSafeCheckbox = document.getElementById('url-safe');
  const errorMessage = document.getElementById('error-message');
  
  const copyBtn = document.getElementById('copy-btn');
  const clearBtn = document.getElementById('clear-btn');
  const pasteBtn = document.getElementById('paste-btn');
  const downloadBtn = document.getElementById('download-btn');
  
  function showError(message) {
    errorMessage.textContent = message;
    errorMessage.classList.add('show');
    setTimeout(() => {
      errorMessage.classList.remove('show');
    }, 5000);
  }
  
  function clearError() {
    errorMessage.textContent = '';
    errorMessage.classList.remove('show');
  }
  
  function processText() {
    const input = textInput.value;
    if (!input) {
      textOutput.value = '';
      clearError();
      return;
    }
    
    try {
      if (modeSelect.value === 'encode') {
        let encoded = btoa(unescape(encodeURIComponent(input)));
        if (urlSafeCheckbox.checked) {
          encoded = encoded.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
        }
        textOutput.value = encoded;
        clearError();
      } else {
        let toDecode = input;
        if (urlSafeCheckbox.checked) {
          toDecode = toDecode.replace(/-/g, '+').replace(/_/g, '/');
          while (toDecode.length % 4) {
            toDecode += '=';
          }
        }
        const decoded = decodeURIComponent(escape(atob(toDecode)));
        textOutput.value = decoded;
        clearError();
      }
    } catch (e) {
      showError(`Failed to ${modeSelect.value}: ${e.message}`);
    }
  }
  
  // Event listeners
  if (textInput) textInput.addEventListener('input', processText);
  if (modeSelect) modeSelect.addEventListener('change', processText);
  if (urlSafeCheckbox) urlSafeCheckbox.addEventListener('change', processText);
  
  if (copyBtn) {
    copyBtn.addEventListener('click', async () => {
      if (textOutput.value) {
        try {
          await navigator.clipboard.writeText(textOutput.value);
          // Could add a visual feedback here
        } catch (e) {
          console.error('Copy failed:', e);
        }
      }
    });
  }
  
  if (clearBtn) {
    clearBtn.addEventListener('click', () => {
      textInput.value = '';
      textOutput.value = '';
      clearError();
    });
  }
  
  if (pasteBtn) {
    pasteBtn.addEventListener('click', async () => {
      try {
        const text = await navigator.clipboard.readText();
        textInput.value = text;
        processText();
      } catch (e) {
        console.error('Paste failed:', e);
      }
    });
  }
  
  if (downloadBtn) {
    downloadBtn.addEventListener('click', () => {
      if (textOutput.value) {
        const blob = new Blob([textOutput.value], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `base64-${modeSelect.value}-result.txt`;
        a.click();
        URL.revokeObjectURL(url);
      }
    });
  }
</script>