---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="JavaScript Formatter - Caiatech">
  <CaiatechToolLayout 
    title="JavaScript Formatter" 
    description="Format JavaScript code"
    icon="JS">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Terminal-style input section -->
      <div class="terminal-panel input-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://js-formatter</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="clear-input-btn" title="Clear">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"/>
              </svg>
            </button>
            <button class="terminal-action" id="paste-btn" title="Paste">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">$</span>
            <span class="prompt-text">js-formatter</span>
            <span class="prompt-arrow">→</span>
          </div>
          <textarea 
            id="input" 
            class="terminal-input"
            placeholder="Enter JavaScript code to format...

Examples:
• function test(){return true;}
• const arr = [1,2,3];
• if(condition){doSomething();}
• Minified React components
• jQuery code chains"
            spellcheck="false"
          ></textarea>
        </div>
      </div>

      <!-- Control center -->
      <div class="control-center">
        <div class="control-grid">
          <button id="format-btn" class="cyber-btn primary">
            <span class="btn-glow"></span>
            <span class="btn-text">📋 Format</span>
          </button>
          <button id="minify-btn" class="cyber-btn secondary">
            <span class="btn-text">⚡ Minify</span>
          </button>
          <button id="validate-btn" class="cyber-btn secondary">
            <span class="btn-text">✓ Validate</span>
          </button>
          <button id="clear-btn" class="cyber-btn secondary">
            <span class="btn-text">Clear All</span>
          </button>
          <button id="sample-btn" class="cyber-btn secondary">
            <span class="btn-text">Load Sample</span>
          </button>
          <button id="copy-btn" class="cyber-btn secondary">
            <span class="btn-text">Copy Output</span>
          </button>
        </div>
        
        <!-- Status indicator -->
        <div class="status-bar">
          <div class="status-indicator" id="status">
            <span class="status-dot"></span>
            <span class="status-text">Ready</span>
          </div>
          <div class="stats" id="stats">
            <span class="stat-item">Input: <span id="input-length">0</span> chars</span>
            <span class="stat-separator">•</span>
            <span class="stat-item">Output: <span id="output-length">0</span> chars</span>
          </div>
        </div>
      </div>

      <!-- Terminal-style output section -->
      <div class="terminal-panel output-terminal">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">OUTPUT://js-formatter.result</span>
          <div class="terminal-actions">
            <button class="terminal-action" id="copy-output-btn" title="Copy">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2"/>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"/>
              </svg>
            </button>
            <button class="terminal-action" id="download-btn" title="Download">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="terminal-body">
          <div class="terminal-prompt">
            <span class="prompt-symbol">></span>
            <span class="prompt-text">result</span>
          </div>
          <pre id="output" class="terminal-output"></pre>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="JavaScript Formatter" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .control-grid {
      grid-template-columns: 1fr 1fr;
    }

    .stats {
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-separator {
      display: none;
    }
  }
</style>

<script>
  // JavaScript Formatter Tool
  (function() {
    const input = document.getElementById('input');
    const output = document.getElementById('output');
    const status = document.getElementById('status');
    const statusText = status.querySelector('.status-text');
    const inputLength = document.getElementById('input-length');
    const outputLength = document.getElementById('output-length');
    
    const formatBtn = document.getElementById('format-btn');
    const minifyBtn = document.getElementById('minify-btn');
    const validateBtn = document.getElementById('validate-btn');
    const clearBtn = document.getElementById('clear-btn');
    const sampleBtn = document.getElementById('sample-btn');
    const copyBtn = document.getElementById('copy-btn');
    const copyOutputBtn = document.getElementById('copy-output-btn');
    const downloadBtn = document.getElementById('download-btn');
    const pasteBtn = document.getElementById('paste-btn');
    const clearInputBtn = document.getElementById('clear-input-btn');
    
    function updateStats() {
      inputLength.textContent = input.value.length;
      outputLength.textContent = output.textContent.length;
    }
    
    function setStatus(text, type = 'normal') {
      status.className = 'status-indicator ' + type;
      statusText.textContent = text;
      
      if (type !== 'normal') {
        setTimeout(() => {
          status.className = 'status-indicator';
          statusText.textContent = 'Ready';
        }, 3000);
      }
    }
    
    function formatJS() {
      const code = input.value.trim();
      if (!code) {
        setStatus('Please enter JavaScript code to format', 'error');
        return;
      }
      
      try {
        const formatted = beautifyJS(code);
        const result = generateFormatResult('FORMATTING', code, formatted);
        output.textContent = result;
        setStatus('JavaScript formatted successfully!', 'success');
        updateStats();
      } catch (error) {
        setStatus('Format failed: ' + error.message, 'error');
        const errorResult = generateErrorResult('FORMATTING ERROR', code, error.message);
        output.textContent = errorResult;
        updateStats();
      }
    }
    
    function minifyJS() {
      const code = input.value.trim();
      if (!code) {
        setStatus('Please enter JavaScript code to minify', 'error');
        return;
      }
      
      try {
        const minified = minifyJavaScript(code);
        const result = generateMinifyResult('MINIFICATION', code, minified);
        output.textContent = result;
        setStatus('JavaScript minified successfully!', 'success');
        updateStats();
      } catch (error) {
        setStatus('Minify failed: ' + error.message, 'error');
        const errorResult = generateErrorResult('MINIFICATION ERROR', code, error.message);
        output.textContent = errorResult;
        updateStats();
      }
    }
    
    function validateJS() {
      const code = input.value.trim();
      if (!code) {
        setStatus('Please enter JavaScript code to validate', 'error');
        return;
      }
      
      try {
        const validation = validateJavaScript(code);
        const result = generateValidationResult('VALIDATION', code, validation);
        output.textContent = result;
        
        if (validation.isValid) {
          setStatus('JavaScript is valid!', 'success');
        } else {
          setStatus('JavaScript has syntax errors', 'error');
        }
        updateStats();
      } catch (error) {
        setStatus('Validation failed: ' + error.message, 'error');
        const errorResult = generateErrorResult('VALIDATION ERROR', code, error.message);
        output.textContent = errorResult;
        updateStats();
      }
    }
    
    function beautifyJS(code) {
      let indentLevel = 0;
      let result = '';
      let inString = false;
      let inComment = false;
      let stringChar = '';
      let i = 0;
      
      // Clean up the code first
      code = code.replace(/^\s+|\s+$/g, ''); // Trim
      
      while (i < code.length) {
        const char = code[i];
        const nextChar = code[i + 1] || '';
        const prevChar = code[i - 1] || '';
        
        // Handle strings
        if (!inComment && (char === '"' || char === "'" || char === '`') && prevChar !== '\\\\') {
          if (!inString) {
            inString = true;
            stringChar = char;
          } else if (char === stringChar) {
            inString = false;
            stringChar = '';
          }
          result += char;
          i++;
          continue;
        }
        
        // Handle comments
        if (!inString && char === '/' && nextChar === '/') {
          inComment = true;
          result += char;
          i++;
          continue;
        }
        
        if (inComment && char === '\\n') {
          inComment = false;
        }
        
        if (inString || inComment) {
          result += char;
          i++;
          continue;
        }
        
        // Format based on character
        switch (char) {
          case '{':
            result += char + '\\n';
            indentLevel++;
            result += '  '.repeat(indentLevel);
            break;
            
          case '}':
            result = result.replace(/\\s+$/, ''); // Remove trailing spaces
            if (result[result.length - 1] !== '\\n') {
              result += '\\n';
            }
            indentLevel--;
            result += '  '.repeat(indentLevel) + char;
            if (nextChar && nextChar !== ';' && nextChar !== ',' && nextChar !== ')') {
              result += '\\n';
              if (indentLevel > 0) {
                result += '  '.repeat(indentLevel);
              }
            }
            break;
            
          case ';':
            result += char;
            if (nextChar && nextChar !== '}' && nextChar !== '\\n') {
              result += '\\n';
              if (indentLevel > 0) {
                result += '  '.repeat(indentLevel);
              }
            }
            break;
            
          case ',':
            result += char;
            if (nextChar !== ' ' && nextChar !== '\\n') {
              result += ' ';
            }
            break;
            
          case '(':
          case '[':
            result += char;
            break;
            
          case ')':
          case ']':
            result += char;
            break;
            
          case '\\n':
            if (result[result.length - 1] !== '\\n') {
              result += char;
              if (indentLevel > 0) {
                result += '  '.repeat(indentLevel);
              }
            }
            break;
            
          case ' ':
            if (result[result.length - 1] !== ' ' && result[result.length - 1] !== '\\n') {
              result += char;
            }
            break;
            
          default:
            result += char;
        }
        
        i++;
      }
      
      return result.replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n'); // Remove excessive newlines
    }
    
    function minifyJavaScript(code) {
      let result = '';
      let inString = false;
      let inComment = false;
      let stringChar = '';
      let i = 0;
      
      while (i < code.length) {
        const char = code[i];
        const nextChar = code[i + 1] || '';
        const prevChar = code[i - 1] || '';
        
        // Handle strings - preserve them exactly
        if (!inComment && (char === '"' || char === "'" || char === '`') && prevChar !== '\\\\') {
          if (!inString) {
            inString = true;
            stringChar = char;
          } else if (char === stringChar) {
            inString = false;
            stringChar = '';
          }
          result += char;
          i++;
          continue;
        }
        
        if (inString) {
          result += char;
          i++;
          continue;
        }
        
        // Remove single-line comments
        if (char === '/' && nextChar === '/') {
          // Skip to end of line
          while (i < code.length && code[i] !== '\\n') {
            i++;
          }
          continue;
        }
        
        // Remove multi-line comments
        if (char === '/' && nextChar === '*') {
          i += 2;
          while (i < code.length - 1 && !(code[i] === '*' && code[i + 1] === '/')) {
            i++;
          }
          i += 2;
          continue;
        }
        
        // Remove unnecessary whitespace
        if (char === ' ' || char === '\\t' || char === '\\n' || char === '\\r') {
          // Keep space if needed for syntax
          const needsSpace = /[a-zA-Z0-9_$]/.test(prevChar) && /[a-zA-Z0-9_$]/.test(nextChar);
          if (needsSpace) {
            result += ' ';
          }
        } else {
          result += char;
        }
        
        i++;
      }
      
      return result;
    }
    
    function validateJavaScript(code) {
      const validation = {
        isValid: true,
        errors: [],
        warnings: []
      };
      
      try {
        // Basic syntax check using Function constructor
        new Function(code);
        validation.isValid = true;
      } catch (error) {
        validation.isValid = false;
        validation.errors.push(error.message);
      }
      
      // Additional basic checks
      const brackets = { '(': 0, '[': 0, '{': 0 };
      let inString = false;
      let stringChar = '';
      
      for (let i = 0; i < code.length; i++) {
        const char = code[i];
        const prevChar = code[i - 1] || '';
        
        if (!inString && (char === '"' || char === "'" || char === '`') && prevChar !== '\\\\') {
          if (!inString) {
            inString = true;
            stringChar = char;
          }
        } else if (inString && char === stringChar && prevChar !== '\\\\') {
          inString = false;
          stringChar = '';
        }
        
        if (!inString) {
          if (char === '(' || char === '[' || char === '{') {
            brackets[char]++;
          }
          if (char === ')') brackets['(']--;
          if (char === ']') brackets['[']--;
          if (char === '}') brackets['{']--;
        }
      }
      
      // Check for unmatched brackets
      Object.keys(brackets).forEach(bracket => {
        if (brackets[bracket] !== 0) {
          validation.isValid = false;
          validation.errors.push(`Unmatched ${bracket} bracket`);
        }
      });
      
      // Check for common issues
      if (code.includes('var ')) {
        validation.warnings.push('Consider using let/const instead of var');
      }
      
      if (code.includes('==') && !code.includes('===')) {
        validation.warnings.push('Consider using === instead of ==');
      }
      
      return validation;
    }
    
    function generateFormatResult(operation, input, formatted) {
      let result = '';
      result += '┌─── JAVASCRIPT ' + operation + ' RESULTS ───┐\\n';
      result += '│                                         │\\n';
      result += `│ Original Length: ${input.length.toString().padEnd(19)}│\\n`;
      result += `│ Formatted Length: ${formatted.length.toString().padEnd(18)}│\\n`;
      result += `│ Lines Added: ${(formatted.split('\\n').length - input.split('\\n').length).toString().padEnd(23)}│\\n`;
      result += '│                                         │\\n';
      result += '└─────────────────────────────────────────┘\\n\\n';
      
      result += 'ORIGINAL CODE:\\n';
      result += '─'.repeat(50) + '\\n';
      result += input.substring(0, 500) + (input.length > 500 ? '...\\n[truncated]' : '') + '\\n\\n';
      
      result += 'FORMATTED CODE:\\n';
      result += '─'.repeat(50) + '\\n';
      result += formatted + '\\n\\n';
      
      result += 'FORMATTING BENEFITS:\\n';
      result += '─'.repeat(30) + '\\n';
      result += '• Improved readability with proper indentation\\n';
      result += '• Consistent spacing and line breaks\\n';
      result += '• Better code structure visualization\\n';
      result += '• Easier debugging and maintenance\\n';
      
      return result;
    }
    
    function generateMinifyResult(operation, input, minified) {
      const reduction = ((input.length - minified.length) / input.length * 100).toFixed(1);
      
      let result = '';
      result += '┌─── JAVASCRIPT ' + operation + ' RESULTS ───┐\\n';
      result += '│                                         │\\n';
      result += `│ Original Length: ${input.length.toString().padEnd(19)}│\\n`;
      result += `│ Minified Length: ${minified.length.toString().padEnd(19)}│\\n`;
      result += `│ Size Reduction: ${reduction}%${(' '.repeat(20 - reduction.length))}│\\n`;
      result += '│                                         │\\n';
      result += '└─────────────────────────────────────────┘\\n\\n';
      
      result += 'ORIGINAL CODE:\\n';
      result += '─'.repeat(50) + '\\n';
      result += input.substring(0, 300) + (input.length > 300 ? '...\\n[truncated]' : '') + '\\n\\n';
      
      result += 'MINIFIED CODE:\\n';
      result += '─'.repeat(50) + '\\n';
      result += minified + '\\n\\n';
      
      result += 'MINIFICATION BENEFITS:\\n';
      result += '─'.repeat(30) + '\\n';
      result += `• Reduced file size by ${reduction}%\\n`;
      result += '• Faster download times\\n';
      result += '• Removed comments and whitespace\\n';
      result += '• Optimized for production deployment\\n';
      
      return result;
    }
    
    function generateValidationResult(operation, input, validation) {
      let result = '';
      result += '┌─── JAVASCRIPT ' + operation + ' RESULTS ───┐\\n';
      result += '│                                         │\\n';
      result += `│ Status: ${validation.isValid ? 'VALID' : 'INVALID'}${validation.isValid ? '                        ' : '                      '}│\\n`;
      result += `│ Errors: ${validation.errors.length.toString().padEnd(29)}│\\n`;
      result += `│ Warnings: ${validation.warnings.length.toString().padEnd(27)}│\\n`;
      result += `│ Code Length: ${input.length.toString().padEnd(23)}│\\n`;
      result += '│                                         │\\n';
      result += '└─────────────────────────────────────────┘\\n\\n';
      
      if (validation.errors.length > 0) {
        result += 'SYNTAX ERRORS:\\n';
        result += '─'.repeat(30) + '\\n';
        validation.errors.forEach((error, index) => {
          result += `${index + 1}. ${error}\\n`;
        });
        result += '\\n';
      }
      
      if (validation.warnings.length > 0) {
        result += 'WARNINGS:\\n';
        result += '─'.repeat(30) + '\\n';
        validation.warnings.forEach((warning, index) => {
          result += `${index + 1}. ${warning}\\n`;
        });
        result += '\\n';
      }
      
      if (validation.isValid) {
        result += 'VALIDATION SUCCESS:\\n';
        result += '─'.repeat(30) + '\\n';
        result += '✓ No syntax errors found\\n';
        result += '✓ Brackets and parentheses are balanced\\n';
        result += '✓ Code structure is valid\\n';
        result += '✓ Ready for execution or further processing\\n';
      }
      
      result += '\\nCODE SAMPLE:\\n';
      result += '─'.repeat(20) + '\\n';
      result += input.substring(0, 200) + (input.length > 200 ? '...\\n[truncated]' : '');
      
      return result;
    }
    
    function generateErrorResult(title, input, errorMessage) {
      let result = '';
      result += '┌─── ' + title + ' ───┐\\n';
      result += '│' + ' '.repeat(title.length + 8) + '│\\n';
      result += `│ Error: ${errorMessage.substring(0, 30)}${errorMessage.length > 30 ? '...' : '   '}│\\n`;
      result += `│ Input Length: ${input.length.toString().padEnd(20)}│\\n`;
      result += '│' + ' '.repeat(title.length + 8) + '│\\n';
      result += '└' + '─'.repeat(title.length + 8) + '┘\\n\\n';
      
      result += 'ERROR DETAILS:\\n';
      result += '─'.repeat(20) + '\\n';
      result += errorMessage + '\\n\\n';
      
      result += 'INPUT CODE:\\n';
      result += '─'.repeat(20) + '\\n';
      result += input.substring(0, 300) + (input.length > 300 ? '...\\n[truncated]' : '');
      
      return result;
    }
    
    function clearAll() {
      input.value = '';
      output.textContent = '';
      updateStats();
      setStatus('Cleared', 'success');
    }
    
    function clearInput() {
      input.value = '';
      updateStats();
      setStatus('Input cleared', 'success');
    }
    
    async function copyOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to copy', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(text);
        setStatus('Copied to clipboard', 'success');
      } catch (error) {
        setStatus('Copy failed', 'error');
      }
    }
    
    function downloadOutput() {
      const text = output.textContent;
      if (!text) {
        setStatus('Nothing to download', 'error');
        return;
      }
      
      const toolName = document.title.split(' - ')[0].toLowerCase().replace(/\\s+/g, '-');
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = toolName + '-output.txt';
      a.click();
      URL.revokeObjectURL(url);
      setStatus('Downloaded', 'success');
    }
    
    async function pasteInput() {
      try {
        const text = await navigator.clipboard.readText();
        input.value = text;
        updateStats();
        setStatus('Pasted from clipboard', 'success');
      } catch (error) {
        setStatus('Paste failed - check permissions', 'error');
      }
    }
    
    function loadSample() {
      const sampleCode = `function fibonacci(n) {
    if (n <= 1) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(x => x * 2);

class Calculator {
    constructor() {
        this.result = 0;
    }
    
    add(value) {
        this.result += value;
        return this;
    }
    
    multiply(value) {
        this.result *= value;
        return this;
    }
    
    getResult() {
        return this.result;
    }
}

const calc = new Calculator();
console.log(calc.add(5).multiply(2).getResult());`;
      
      input.value = sampleCode;
      formatJS();
    }
    
    // Event listeners
    if (formatBtn) formatBtn.addEventListener('click', formatJS);
    if (minifyBtn) minifyBtn.addEventListener('click', minifyJS);
    if (validateBtn) validateBtn.addEventListener('click', validateJS);
    if (clearBtn) clearBtn.addEventListener('click', clearAll);
    if (clearInputBtn) clearInputBtn.addEventListener('click', clearInput);
    if (sampleBtn) sampleBtn.addEventListener('click', loadSample);
    if (copyBtn) copyBtn.addEventListener('click', copyOutput);
    if (copyOutputBtn) copyOutputBtn.addEventListener('click', copyOutput);
    if (downloadBtn) downloadBtn.addEventListener('click', downloadOutput);
    if (pasteBtn) pasteBtn.addEventListener('click', pasteInput);
    
    // Update stats on input
    input.addEventListener('input', updateStats);
    
    // Keyboard shortcuts
    input.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          formatJS();
        }
      }
    });
    
    // Initial stats
    updateStats();
  })();
</script>