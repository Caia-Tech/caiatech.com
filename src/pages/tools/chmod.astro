---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CaiatechToolLayout from '../../components/tools/CaiatechToolLayout.astro';
import ToolAttribution from '../../components/tools/ToolAttribution.astro';
import PrivacyBadge from '../../components/tools/PrivacyBadge.astro';
---

<BaseLayout title="Chmod Calculator - Caiatech">
  <CaiatechToolLayout 
    title="Chmod Calculator" 
    description="Calculate Unix file permissions"
    icon="755">
    
    <div slot="header-actions">
      <PrivacyBadge />
    </div>
    
    <div class="tool-container">
      <!-- Permissions Calculator -->
      <div class="terminal-panel permissions-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">PERMISSIONS://calculator</span>
        </div>
        <div class="terminal-body">
          <div class="permissions-grid">
            <div class="permission-group">
              <h3>Owner (User)</h3>
              <div class="permission-checkboxes">
                <label class="permission-checkbox">
                  <input type="checkbox" id="owner-read" checked>
                  <span class="checkbox-custom"></span>
                  <div class="permission-info">
                    <span class="permission-name">Read</span>
                    <span class="permission-code">r</span>
                  </div>
                </label>
                <label class="permission-checkbox">
                  <input type="checkbox" id="owner-write" checked>
                  <span class="checkbox-custom"></span>
                  <div class="permission-info">
                    <span class="permission-name">Write</span>
                    <span class="permission-code">w</span>
                  </div>
                </label>
                <label class="permission-checkbox">
                  <input type="checkbox" id="owner-execute" checked>
                  <span class="checkbox-custom"></span>
                  <div class="permission-info">
                    <span class="permission-name">Execute</span>
                    <span class="permission-code">x</span>
                  </div>
                </label>
              </div>
              <div class="group-octal">
                <span class="octal-value" id="owner-octal">7</span>
              </div>
            </div>

            <div class="permission-group">
              <h3>Group</h3>
              <div class="permission-checkboxes">
                <label class="permission-checkbox">
                  <input type="checkbox" id="group-read" checked>
                  <span class="checkbox-custom"></span>
                  <div class="permission-info">
                    <span class="permission-name">Read</span>
                    <span class="permission-code">r</span>
                  </div>
                </label>
                <label class="permission-checkbox">
                  <input type="checkbox" id="group-write">
                  <span class="checkbox-custom"></span>
                  <div class="permission-info">
                    <span class="permission-name">Write</span>
                    <span class="permission-code">w</span>
                  </div>
                </label>
                <label class="permission-checkbox">
                  <input type="checkbox" id="group-execute" checked>
                  <span class="checkbox-custom"></span>
                  <div class="permission-info">
                    <span class="permission-name">Execute</span>
                    <span class="permission-code">x</span>
                  </div>
                </label>
              </div>
              <div class="group-octal">
                <span class="octal-value" id="group-octal">5</span>
              </div>
            </div>

            <div class="permission-group">
              <h3>Others (Public)</h3>
              <div class="permission-checkboxes">
                <label class="permission-checkbox">
                  <input type="checkbox" id="others-read" checked>
                  <span class="checkbox-custom"></span>
                  <div class="permission-info">
                    <span class="permission-name">Read</span>
                    <span class="permission-code">r</span>
                  </div>
                </label>
                <label class="permission-checkbox">
                  <input type="checkbox" id="others-write">
                  <span class="checkbox-custom"></span>
                  <div class="permission-info">
                    <span class="permission-name">Write</span>
                    <span class="permission-code">w</span>
                  </div>
                </label>
                <label class="permission-checkbox">
                  <input type="checkbox" id="others-execute">
                  <span class="checkbox-custom"></span>
                  <div class="permission-info">
                    <span class="permission-name">Execute</span>
                    <span class="permission-code">x</span>
                  </div>
                </label>
              </div>
              <div class="group-octal">
                <span class="octal-value" id="others-octal">4</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Results Section -->
      <div class="terminal-panel results-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">RESULTS://chmod</span>
        </div>
        <div class="terminal-body">
          <div class="results-grid">
            <div class="result-item">
              <h3>Octal Notation</h3>
              <div class="result-value">
                <span id="full-octal" class="octal-display">754</span>
                <button id="copy-octal" class="copy-btn">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                  </svg>
                </button>
              </div>
            </div>

            <div class="result-item">
              <h3>Symbolic Notation</h3>
              <div class="result-value">
                <span id="symbolic-notation" class="symbolic-display">rwxr-xr--</span>
                <button id="copy-symbolic" class="copy-btn">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2 2v1"/>
                  </svg>
                </button>
              </div>
            </div>

            <div class="result-item full-width">
              <h3>Command</h3>
              <div class="result-value">
                <code id="chmod-command" class="command-display">chmod 754 filename</code>
                <button id="copy-command" class="copy-btn">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2 2v1"/>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Quick Input Section -->
      <div class="terminal-panel input-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">INPUT://quick</span>
        </div>
        <div class="terminal-body">
          <div class="input-methods">
            <div class="input-method">
              <label for="octal-input">Enter Octal (e.g., 755)</label>
              <input type="text" id="octal-input" placeholder="755" maxlength="3" pattern="[0-7]{3}">
            </div>
            <div class="input-method">
              <label for="symbolic-input">Enter Symbolic (e.g., rwxr-xr-x)</label>
              <input type="text" id="symbolic-input" placeholder="rwxr-xr-x" maxlength="9">
            </div>
          </div>
        </div>
      </div>

      <!-- Presets Section -->
      <div class="terminal-panel presets-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">PRESETS://common</span>
        </div>
        <div class="terminal-body">
          <div class="presets-grid">
            <button class="preset-btn" data-octal="755" data-description="Executable files">
              <div class="preset-octal">755</div>
              <div class="preset-symbolic">rwxr-xr-x</div>
              <div class="preset-desc">Executable files</div>
            </button>
            <button class="preset-btn" data-octal="644" data-description="Regular files">
              <div class="preset-octal">644</div>
              <div class="preset-symbolic">rw-r--r--</div>
              <div class="preset-desc">Regular files</div>
            </button>
            <button class="preset-btn" data-octal="600" data-description="Private files">
              <div class="preset-octal">600</div>
              <div class="preset-symbolic">rw-------</div>
              <div class="preset-desc">Private files</div>
            </button>
            <button class="preset-btn" data-octal="777" data-description="Full access (dangerous)">
              <div class="preset-octal">777</div>
              <div class="preset-symbolic">rwxrwxrwx</div>
              <div class="preset-desc">Full access</div>
            </button>
            <button class="preset-btn" data-octal="700" data-description="Private executables">
              <div class="preset-octal">700</div>
              <div class="preset-symbolic">rwx------</div>
              <div class="preset-desc">Private exec</div>
            </button>
            <button class="preset-btn" data-octal="666" data-description="Readable/writable">
              <div class="preset-octal">666</div>
              <div class="preset-symbolic">rw-rw-rw-</div>
              <div class="preset-desc">Read/Write</div>
            </button>
          </div>
        </div>
      </div>

      <!-- Permission Details -->
      <div class="terminal-panel details-panel">
        <div class="terminal-header">
          <div class="terminal-controls">
            <span class="control red"></span>
            <span class="control yellow"></span>
            <span class="control green"></span>
          </div>
          <span class="terminal-title">DETAILS://breakdown</span>
        </div>
        <div class="terminal-body">
          <div id="permission-details" class="permission-details">
            <div class="detail-section">
              <h4>Owner Permissions</h4>
              <div class="permission-list">
                <div class="permission-item">
                  <span class="perm-icon">📖</span>
                  <span>Can read the file</span>
                </div>
                <div class="permission-item">
                  <span class="perm-icon">✏️</span>
                  <span>Can write/modify the file</span>
                </div>
                <div class="permission-item">
                  <span class="perm-icon">🚀</span>
                  <span>Can execute the file</span>
                </div>
              </div>
            </div>

            <div class="detail-section">
              <h4>Group Permissions</h4>
              <div class="permission-list">
                <div class="permission-item">
                  <span class="perm-icon">📖</span>
                  <span>Group can read the file</span>
                </div>
                <div class="permission-item disabled">
                  <span class="perm-icon">✏️</span>
                  <span>Group cannot write/modify</span>
                </div>
                <div class="permission-item">
                  <span class="perm-icon">🚀</span>
                  <span>Group can execute the file</span>
                </div>
              </div>
            </div>

            <div class="detail-section">
              <h4>Others Permissions</h4>
              <div class="permission-list">
                <div class="permission-item">
                  <span class="perm-icon">📖</span>
                  <span>Others can read the file</span>
                </div>
                <div class="permission-item disabled">
                  <span class="perm-icon">✏️</span>
                  <span>Others cannot write/modify</span>
                </div>
                <div class="permission-item disabled">
                  <span class="perm-icon">🚀</span>
                  <span>Others cannot execute</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <ToolAttribution toolName="Chmod Calculator" version="2.0.0" />
  </CaiatechToolLayout>
</BaseLayout>

<style>
  .tool-container {
    display: grid;
    gap: 1.5rem;
    grid-template-columns: 1fr 1fr;
    grid-template-areas:
      "permissions results"
      "input presets"
      "details details";
  }

  .permissions-panel {
    grid-area: permissions;
  }

  .results-panel {
    grid-area: results;
  }

  .input-panel {
    grid-area: input;
  }

  .presets-panel {
    grid-area: presets;
  }

  .details-panel {
    grid-area: details;
  }

  /* Terminal panels */
  .terminal-panel {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.05);
    transition: all 0.3s ease;
  }

  .terminal-panel:hover {
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 0 80px rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .terminal-header {
    background: linear-gradient(90deg, rgba(42, 42, 43, 1) 0%, rgba(26, 26, 27, 1) 100%);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .control.red { 
    background: #ff5f57; 
    box-shadow: 0 0 10px rgba(255, 95, 87, 0.5);
  }
  .control.yellow { 
    background: #ffbd2e; 
    box-shadow: 0 0 10px rgba(255, 189, 46, 0.5);
  }
  .control.green { 
    background: #28ca42; 
    box-shadow: 0 0 10px rgba(40, 202, 66, 0.5);
  }

  .terminal-panel:hover .control {
    box-shadow: 0 0 15px currentColor;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    margin-left: auto;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .terminal-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .terminal-action {
    background: transparent;
    border: 1px solid transparent;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .terminal-action:hover {
    color: var(--color-accent);
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
  }

  .terminal-body {
    padding: 1.5rem;
  }

  .terminal-prompt {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt-symbol {
    color: var(--color-accent);
    font-weight: bold;
  }

  .prompt-text {
    color: var(--color-text-secondary);
  }

  .prompt-arrow {
    color: var(--color-accent);
    opacity: 0.5;
  }

  .terminal-input,
  .terminal-output {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    padding: 1rem;
    width: 100%;
    min-height: 200px;
    resize: vertical;
    transition: all 0.3s;
  }

  .terminal-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.2),
      inset 0 0 20px rgba(0, 212, 255, 0.05);
  }

  .terminal-output {
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
  }

  /* Control center */
  .control-center {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Cyber buttons */
  .cyber-btn {
    position: relative;
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-surface);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s;
  }

  .cyber-btn.primary {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  }

  .cyber-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
  }

  .cyber-btn.primary:hover {
    border-color: var(--color-accent);
    box-shadow: 
      0 5px 30px rgba(0, 212, 255, 0.4),
      inset 0 0 30px rgba(0, 212, 255, 0.1);
  }

  .btn-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .cyber-btn:hover .btn-glow {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  .btn-text {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Status bar */
  .status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--color-accent);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { 
      opacity: 1;
      box-shadow: 0 0 10px var(--color-accent);
    }
    50% { 
      opacity: 0.5;
      box-shadow: 0 0 5px var(--color-accent);
    }
  }

  .status-text {
    color: var(--color-text-secondary);
  }

  .stats {
    display: flex;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-secondary);
  }

  .stat-item {
    display: flex;
    gap: 0.25rem;
  }

  .stat-separator {
    opacity: 0.3;
  }

  /* Success/Error states */
  .status-indicator.success .status-dot {
    background: #28ca42;
    animation: success-pulse 1s;
  }

  .status-indicator.error .status-dot {
    background: #ff5f57;
    animation: error-pulse 1s;
  }

  @keyframes success-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); }
    100% { transform: scale(1); }
  }

  @keyframes error-pulse {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  /* Permissions Grid */
  .permissions-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
  }

  .permission-group {
    background: rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    padding: 1.5rem;
    text-align: center;
    transition: all 0.3s;
  }

  .permission-group:hover {
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.05);
  }

  .permission-group h3 {
    margin: 0 0 1rem 0;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 1rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .permission-checkboxes {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 1rem;
  }

  .permission-checkbox {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    cursor: pointer;
    padding: 0.75rem;
    border-radius: 6px;
    transition: all 0.2s;
    background: rgba(0, 0, 0, 0.1);
    border: 1px solid transparent;
  }

  .permission-checkbox:hover {
    background: rgba(0, 212, 255, 0.1);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .checkbox-custom {
    width: 20px;
    height: 20px;
    border: 2px solid var(--color-border);
    border-radius: 4px;
    position: relative;
    transition: all 0.2s;
    flex-shrink: 0;
    background: rgba(0, 0, 0, 0.3);
  }

  .permission-checkbox input[type="checkbox"] {
    display: none;
  }

  .permission-checkbox input[type="checkbox"]:checked + .checkbox-custom {
    background: var(--color-accent);
    border-color: var(--color-accent);
    box-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
  }

  .permission-checkbox input[type="checkbox"]:checked + .checkbox-custom::after {
    content: '✓';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: var(--color-bg);
    font-weight: bold;
    font-size: 14px;
  }

  .permission-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex: 1;
    text-align: left;
  }

  .permission-name {
    font-family: var(--font-mono);
    font-weight: 500;
    color: var(--color-text);
    font-size: 0.9rem;
  }

  .permission-code {
    font-family: var(--font-mono);
    background: rgba(0, 212, 255, 0.2);
    color: var(--color-accent);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
    border: 1px solid var(--color-accent);
  }

  .group-octal {
    border-top: 1px solid rgba(0, 212, 255, 0.2);
    padding-top: 1rem;
  }

  .octal-value {
    font-size: 2.5rem;
    font-weight: bold;
    color: var(--color-accent);
    font-family: var(--font-mono);
    text-shadow: 0 0 20px var(--color-accent);
  }

  /* Results Grid */
  .results-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
  }

  .result-item {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .result-item.full-width {
    grid-column: span 2;
  }

  .result-item h3 {
    margin: 0;
    font-size: 0.9rem;
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
    border-bottom: 2px solid var(--color-accent);
    padding-bottom: 0.5rem;
  }

  .result-value {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 8px;
    border: 1px solid rgba(0, 212, 255, 0.2);
    transition: all 0.3s;
  }

  .result-value:hover {
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.05);
  }

  .octal-display {
    font-size: 1.8rem;
    font-weight: bold;
    color: var(--color-accent);
    font-family: var(--font-mono);
    text-shadow: 0 0 15px var(--color-accent);
  }

  .symbolic-display {
    font-size: 1.4rem;
    font-weight: 600;
    color: var(--color-text);
    font-family: var(--font-mono);
  }

  .command-display {
    font-size: 1rem;
    color: var(--color-text);
    background: rgba(0, 0, 0, 0.3);
    padding: 0.75rem;
    border-radius: 6px;
    flex: 1;
    font-family: var(--font-mono);
    border: 1px solid rgba(0, 212, 255, 0.1);
  }

  .copy-btn {
    padding: 0.5rem;
    background: var(--color-accent);
    color: var(--color-bg);
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .copy-btn:hover {
    background: rgba(0, 212, 255, 0.8);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 212, 255, 0.3);
  }

  /* Input Methods */
  .input-methods {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
  }

  .input-method {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .input-method label {
    font-size: 0.85rem;
    font-family: var(--font-mono);
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .input-method input {
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.95rem;
    transition: all 0.3s;
  }

  .input-method input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 20px rgba(0, 212, 255, 0.2);
  }

  /* Presets Grid */
  .presets-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
  }

  .preset-btn {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s;
    text-align: center;
  }

  .preset-btn:hover {
    border-color: var(--color-accent);
    background: rgba(0, 212, 255, 0.1);
    transform: translateY(-2px);
  }

  .preset-octal {
    font-size: 1.4rem;
    font-weight: bold;
    color: var(--color-accent);
    font-family: var(--font-mono);
  }

  .preset-symbolic {
    font-family: var(--font-mono);
    color: var(--color-text-secondary);
    font-size: 0.85rem;
  }

  .preset-desc {
    font-size: 0.75rem;
    color: var(--color-text-secondary);
    opacity: 0.8;
  }

  /* Permission Details */
  .permission-details {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
  }

  .detail-section h4 {
    margin: 0 0 1rem 0;
    color: var(--color-accent);
    font-size: 0.9rem;
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .permission-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .permission-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 6px;
    font-size: 0.85rem;
    border: 1px solid rgba(0, 212, 255, 0.1);
    transition: all 0.3s;
  }

  .permission-item:hover {
    background: rgba(0, 212, 255, 0.05);
    border-color: rgba(0, 212, 255, 0.3);
  }

  .permission-item.disabled {
    opacity: 0.4;
    text-decoration: line-through;
  }

  .perm-icon {
    font-size: 1.2rem;
    flex-shrink: 0;
  }

  /* Responsive */
  @media (max-width: 1200px) {
    .tool-container {
      grid-template-columns: 1fr;
      grid-template-areas:
        "permissions"
        "results"
        "input"
        "presets"
        "details";
    }
    
    .permissions-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .permission-details {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 768px) {
    .results-grid {
      grid-template-columns: 1fr;
    }

    .result-item.full-width {
      grid-column: span 1;
    }

    .input-methods {
      grid-template-columns: 1fr;
    }

    .presets-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>

<script>
  // Chmod Calculator implementation
  (function() {
    const checkboxes = {
      owner: {
        read: document.getElementById('owner-read'),
        write: document.getElementById('owner-write'),
        execute: document.getElementById('owner-execute')
      },
      group: {
        read: document.getElementById('group-read'),
        write: document.getElementById('group-write'),
        execute: document.getElementById('group-execute')
      },
      others: {
        read: document.getElementById('others-read'),
        write: document.getElementById('others-write'),
        execute: document.getElementById('others-execute')
      }
    };

    const displays = {
      owner: document.getElementById('owner-octal'),
      group: document.getElementById('group-octal'),
      others: document.getElementById('others-octal'),
      fullOctal: document.getElementById('full-octal'),
      symbolic: document.getElementById('symbolic-notation'),
      command: document.getElementById('chmod-command')
    };

    const inputs = {
      octal: document.getElementById('octal-input'),
      symbolic: document.getElementById('symbolic-input')
    };

    function calculateOctal(group) {
      const permissions = checkboxes[group];
      let value = 0;
      
      if (permissions.read.checked) value += 4;
      if (permissions.write.checked) value += 2;
      if (permissions.execute.checked) value += 1;
      
      return value;
    }

    function generateSymbolic() {
      const groups = ['owner', 'group', 'others'];
      return groups.map(group => {
        const permissions = checkboxes[group];
        let symbolic = '';
        symbolic += permissions.read.checked ? 'r' : '-';
        symbolic += permissions.write.checked ? 'w' : '-';
        symbolic += permissions.execute.checked ? 'x' : '-';
        return symbolic;
      }).join('');
    }

    function updateDisplays() {
      // Update individual group octals
      const ownerOctal = calculateOctal('owner');
      const groupOctal = calculateOctal('group');
      const othersOctal = calculateOctal('others');
      
      displays.owner.textContent = ownerOctal.toString();
      displays.group.textContent = groupOctal.toString();
      displays.others.textContent = othersOctal.toString();
      
      // Update full octal
      const fullOctal = `${ownerOctal}${groupOctal}${othersOctal}`;
      displays.fullOctal.textContent = fullOctal;
      
      // Update symbolic notation
      const symbolic = generateSymbolic();
      displays.symbolic.textContent = symbolic;
      
      // Update command
      displays.command.textContent = `chmod ${fullOctal} filename`;
      
      // Update explanation
      updatePermissionExplanation();
    }

    function updatePermissionExplanation() {
      const explanations = [
        {
          title: 'Owner Permissions',
          permissions: [
            { enabled: checkboxes.owner.read.checked, icon: '📖', text: 'Can read the file' },
            { enabled: checkboxes.owner.write.checked, icon: '✏️', text: 'Can write/modify the file' },
            { enabled: checkboxes.owner.execute.checked, icon: '🚀', text: 'Can execute the file' }
          ]
        },
        {
          title: 'Group Permissions',
          permissions: [
            { enabled: checkboxes.group.read.checked, icon: '📖', text: 'Group can read the file' },
            { enabled: checkboxes.group.write.checked, icon: '✏️', text: 'Group can write/modify' },
            { enabled: checkboxes.group.execute.checked, icon: '🚀', text: 'Group can execute the file' }
          ]
        },
        {
          title: 'Others Permissions',
          permissions: [
            { enabled: checkboxes.others.read.checked, icon: '📖', text: 'Others can read the file' },
            { enabled: checkboxes.others.write.checked, icon: '✏️', text: 'Others can write/modify' },
            { enabled: checkboxes.others.execute.checked, icon: '🚀', text: 'Others can execute' }
          ]
        }
      ];

      const detailsContainer = document.getElementById('permission-details');
      if (!detailsContainer) return;

      detailsContainer.innerHTML = explanations.map(section => `
        <div class="detail-section">
          <h4>${section.title}</h4>
          <div class="permission-list">
            ${section.permissions.map(perm => `
              <div class="permission-item ${perm.enabled ? '' : 'disabled'}">
                <span class="perm-icon">${perm.icon}</span>
                <span>${perm.enabled ? perm.text : perm.text.replace('can', 'cannot')}</span>
              </div>
            `).join('')}
          </div>
        </div>
      `).join('');
    }

    function setPermissionsFromOctal(octal) {
      if (octal.length !== 3 || !/^[0-7]{3}$/.test(octal)) return false;
      
      const values = octal.split('').map(d => parseInt(d, 10));
      const groups = ['owner', 'group', 'others'];
      
      groups.forEach((group, index) => {
        const value = values[index];
        const permissions = checkboxes[group];
        
        permissions.read.checked = !!(value & 4);
        permissions.write.checked = !!(value & 2);
        permissions.execute.checked = !!(value & 1);
      });
      
      updateDisplays();
      return true;
    }

    function setPermissionsFromSymbolic(symbolic) {
      if (symbolic.length !== 9 || !/^[rwx-]{9}$/.test(symbolic)) return false;
      
      const groups = ['owner', 'group', 'others'];
      
      groups.forEach((group, index) => {
        const groupSymbolic = symbolic.slice(index * 3, (index + 1) * 3);
        const permissions = checkboxes[group];
        
        permissions.read.checked = groupSymbolic[0] === 'r';
        permissions.write.checked = groupSymbolic[1] === 'w';
        permissions.execute.checked = groupSymbolic[2] === 'x';
      });
      
      updateDisplays();
      return true;
    }

    // Event listeners for checkboxes
    Object.values(checkboxes).forEach(group => {
      Object.values(group).forEach(checkbox => {
        checkbox.addEventListener('change', updateDisplays);
      });
    });

    // Event listeners for input fields
    inputs.octal.addEventListener('input', (e) => {
      const value = e.target.value;
      if (value.length <= 3) {
        setPermissionsFromOctal(value.padStart(3, '0'));
      }
    });

    inputs.symbolic.addEventListener('input', (e) => {
      const value = e.target.value;
      if (value.length <= 9) {
        setPermissionsFromSymbolic(value);
      }
    });

    // Preset buttons
    document.querySelectorAll('.preset-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const octal = btn.getAttribute('data-octal');
        if (octal) {
          setPermissionsFromOctal(octal);
          inputs.octal.value = octal;
          inputs.symbolic.value = generateSymbolic();
        }
      });
    });

    // Copy buttons
    async function copyToClipboard(text, button) {
      try {
        await navigator.clipboard.writeText(text);
        const originalContent = button.innerHTML;
        button.innerHTML = '✓ Copied';
        setTimeout(() => {
          button.innerHTML = originalContent;
        }, 2000);
      } catch (err) {
        console.error('Failed to copy:', err);
      }
    }

    document.getElementById('copy-octal')?.addEventListener('click', (e) => {
      copyToClipboard(displays.fullOctal.textContent || '', e.target);
    });

    document.getElementById('copy-symbolic')?.addEventListener('click', (e) => {
      copyToClipboard(displays.symbolic.textContent || '', e.target);
    });

    document.getElementById('copy-command')?.addEventListener('click', (e) => {
      copyToClipboard(displays.command.textContent || '', e.target);
    });

    // Initialize
    updateDisplays();
    inputs.octal.value = displays.fullOctal.textContent || '';
    inputs.symbolic.value = displays.symbolic.textContent || '';
  })();
</script>